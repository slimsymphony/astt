<Views:UcBase x:Class="Marble.Views.FlasherView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:sb="clr-namespace:Wpf.Controls;assembly=Wpf.SplitButton"
             xmlns:acb="clr-namespace:AttachedCommandBehavior;assembly=AttachedCommandBehavior"
              xmlns:Model="clr-namespace:Marble.Model" xmlns:Converters="clr-namespace:Marble.Converters" xmlns:Views="clr-namespace:Marble.Views"
             xmlns:ViewModel="clr-namespace:Marble.ViewModel"
              xmlns:CustomControls="clr-namespace:MarbleLibrary.CustomControls;assembly=MarbleLibrary"
              xmlns:Converters1="clr-namespace:MarbleLibrary.Converters;assembly=MarbleLibrary"
              xmlns:System="clr-namespace:System;assembly=mscorlib" mc:Ignorable="d" 
             d:DesignWidth="640" d:DesignHeight="480"
              DragEnter="onFlashingFileDragEnter" DragOver="onFlashingFileDragOver" AllowDrop="True" Drop="LayoutRoot_Drop">
    <Views:UcBase.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Close"
                        Executed="CloseCommandHandler"/>
    </Views:UcBase.CommandBindings>

    <Grid x:Name="LayoutRoot" Background="#FF2F2F2F" >
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <GroupBox x:Name="groupBox1" Grid.Column="0" Header="Flasher" Margin="3,3,3,8" Background="White" Style="{DynamicResource MarbleGroupBox}">
            <Grid>
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Setter Property="Background">
                            <Setter.Value>
                                <ImageBrush ImageSource="/MarbleLibrary;component/Images\flasher.icon.232x320.png" Opacity="0.2" Stretch="None" AlignmentX="Right" AlignmentY="Top"  />
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding FlashingStatus, UpdateSourceTrigger=PropertyChanged}" Value="Flashing">
                                <Setter Property="Background" Value="{x:Null}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition x:Name="rowDefinitionConnection" Height="Auto" />
                    <RowDefinition x:Name="rowDefinitionMcuFile">
                        <RowDefinition.Style>
                            <Style TargetType="{x:Type RowDefinition}">
                                <Setter Property="Height" Value="Auto" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsFirmwareFlashModeEnabled, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                        <Setter Property="Height" Value="0" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </RowDefinition.Style>
                    </RowDefinition>
                    <RowDefinition x:Name="rowDefinitionContentFile">
                        <RowDefinition.Style>
                            <Style TargetType="{x:Type RowDefinition}">
                                <Setter Property="Height" Value="Auto" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsFirmwareFlashModeEnabled, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                        <Setter Property="Height" Value="0" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsMiddlewareOnlyFlashModeEnabled, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                        <Setter Property="Height" Value="0" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </RowDefinition.Style>
                    </RowDefinition>
                    <RowDefinition x:Name="rowDefinitionLanguageFile">
                        <RowDefinition.Style>
                            <Style TargetType="{x:Type RowDefinition}">
                                <Setter Property="Height" Value="Auto" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ContentFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                        <Setter Property="Height" Value="0" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ContentFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}">
                                        <Setter Property="Height" Value="0" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsFirmwareFlashModeEnabled, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                        <Setter Property="Height" Value="0" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsMiddlewareOnlyFlashModeEnabled, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                        <Setter Property="Height" Value="0" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </RowDefinition.Style>
                    </RowDefinition>
                    <RowDefinition x:Name="rowDefinitionFirmwareFolder">
                        <RowDefinition.Style>
                            <Style TargetType="{x:Type RowDefinition}">
                                <Setter Property="Height" Value="Auto" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsFirmwareFlashModeEnabled, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Height" Value="0" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </RowDefinition.Style>
                    </RowDefinition>
                    <RowDefinition x:Name="rowDefinitionEraseFile">
                        <RowDefinition.Style>
                            <Style TargetType="{x:Type RowDefinition}">
                                <Setter Property="Height" Value="Auto" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsMiddlewareOnlyFlashModeEnabled, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Height" Value="0" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </RowDefinition.Style>
                    </RowDefinition>
                    <RowDefinition x:Name="rowDefinitionFirmwareInfo">
                        <RowDefinition.Style>
                            <Style TargetType="{x:Type RowDefinition}">
                                <Setter Property="Height" Value="Auto" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsFirmwareFlashModeEnabled, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Height" Value="0" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding HasFirmwareFolderCorrectFiles, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Height" Value="0" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </RowDefinition.Style>
                    </RowDefinition>
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="40" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                
                <!--<Image Height="32" Width="32" Source="/MarbleLibrary;component/Images\flasher.icon.32x32.png" HorizontalAlignment="Left" />-->
                <StackPanel Orientation="Horizontal" Margin="5,5,5,5">
                    <Canvas VerticalAlignment="Top" x:Name="canvasStatus" Height="32" Width="32" ClipToBounds="True">
                        <Canvas.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding State, UpdateSourceTrigger=PropertyChanged}" Value="FW_EXECUTING">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard x:Name="animationFadeInAndOut">
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.Target="{Binding TemplatedParent}" Storyboard.TargetProperty="Height"
                                                                From="0" To="32" Duration="0:0:1" AutoReverse="False" RepeatBehavior="Forever" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.EnterActions>
                                        <DataTrigger.ExitActions>
                                            <RemoveStoryboard BeginStoryboardName="animationFadeInAndOut" />
                                        </DataTrigger.ExitActions>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Canvas.Style>

                        <!--<Image Height="32" Width="32" Source="/MarbleLibrary;component/Images\screen.capture.icon.32x32.png" />-->
                        <Image x:Name="imageLoadArrow" Height="32" Width="32" Source="/MarbleLibrary;component/Images\loading.yellow.orange.icon.32x32.png" Canvas.Bottom="0" Canvas.Right="0" Opacity="0">
                            <Image.RenderTransform>
                                <RotateTransform  CenterX="16" CenterY="16"/>
                            </Image.RenderTransform>
                            <Image.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding FlashingStatus, UpdateSourceTrigger=PropertyChanged}" Value="Flashing">
                                            <DataTrigger.EnterActions>
                                                <BeginStoryboard x:Name="animationRotateLoadArrow">
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.Target="{Binding TemplatedParent}" Storyboard.TargetProperty="(RenderTransform).(RotateTransform.Angle)"
                                                                From="0" To="360" Duration="0:0:2" AutoReverse="False" RepeatBehavior="Forever" />
                                                        <DoubleAnimation Storyboard.Target="{Binding TemplatedParent}" Storyboard.TargetProperty="Opacity"
                                                                From="0" To="1" Duration="0:0:0.5" AutoReverse="False" />
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </DataTrigger.EnterActions>
                                            <DataTrigger.ExitActions>
                                                <RemoveStoryboard BeginStoryboardName="animationRotateLoadArrow" />
                                            </DataTrigger.ExitActions>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                        <Image x:Name="imageExecuting" Height="32" Width="32" ClipToBounds="True" Source="/MarbleLibrary;component/Images\flasher.icon.32x32.png" Canvas.Top="0" Canvas.Right="0" Opacity="0">
                            <Image.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding FlashingStatus, UpdateSourceTrigger=PropertyChanged}" Value="Idle">
                                            <DataTrigger.EnterActions>
                                                <BeginStoryboard x:Name="animationFadeInAndOut">
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.Target="{Binding TemplatedParent}" Storyboard.TargetProperty="Opacity"
                                                                From="0" To="1" Duration="0:0:0.1" AutoReverse="False" />
                                                        <!--<ThicknessAnimation Storyboard.Target="{Binding TemplatedParent}" Storyboard.TargetProperty="Margin" 
                                                                From="0,0,0,-32" To="0,0,0,0" AutoReverse="False" RepeatBehavior="Forever" />-->
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </DataTrigger.EnterActions>
                                            <DataTrigger.ExitActions>
                                                <RemoveStoryboard BeginStoryboardName="animationFadeInAndOut" />
                                            </DataTrigger.ExitActions>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                        <Image x:Name="imageReady" Height="32" Width="32" Source="/MarbleLibrary;component/Images\passed.circle.icon.32x32.png" Canvas.Bottom="0" Canvas.Right="0" Opacity="0">
                            <Image.RenderTransform>
                                <RotateTransform  CenterX="16" CenterY="16"/>
                            </Image.RenderTransform>
                            <Image.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding FlashingStatus, UpdateSourceTrigger=PropertyChanged}" Value="Succesful">
                                            <DataTrigger.EnterActions>
                                                <BeginStoryboard x:Name="animationFadeReady">
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.Target="{Binding TemplatedParent}" Storyboard.TargetProperty="Opacity"
                                                                From="0" To="1" Duration="0:0:0.5" AutoReverse="False" />
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </DataTrigger.EnterActions>
                                            <DataTrigger.ExitActions>
                                                <RemoveStoryboard BeginStoryboardName="animationFadeReady" />
                                            </DataTrigger.ExitActions>

                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                        <Image x:Name="imageFailed" Height="32" Width="32" Source="/MarbleLibrary;component/Images\failed.circle.icon.32x32.png" Canvas.Bottom="0" Canvas.Right="0" Opacity="0">
                            <Image.RenderTransform>
                                <RotateTransform  CenterX="16" CenterY="16"/>
                            </Image.RenderTransform>
                            <Image.Style>
                                <Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding FlashingStatus, UpdateSourceTrigger=PropertyChanged}" Value="Failed">
                                            <DataTrigger.EnterActions>
                                                <BeginStoryboard x:Name="animationFadeReady">
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.Target="{Binding TemplatedParent}" Storyboard.TargetProperty="Opacity"
                                                                From="0" To="1" Duration="0:0:0.5" AutoReverse="False" />
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </DataTrigger.EnterActions>
                                            <DataTrigger.ExitActions>
                                                <RemoveStoryboard BeginStoryboardName="animationFadeReady" />
                                            </DataTrigger.ExitActions>

                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                    </Canvas>
                </StackPanel>
                
                <TextBlock Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2" Text="{Binding StatusText, UpdateSourceTrigger=PropertyChanged}" FontSize="16" VerticalAlignment="Center">
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="Visibility" Value="Collapsed" />
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ErrorText, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}" />
                                        <Condition Binding="{Binding WarningText, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Visibility" Value="Visible" />
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
                
                <Border Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2" CornerRadius="2" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="0,5,0,5">
                    <Border.Effect>
                        <DropShadowEffect BlurRadius="5" ShadowDepth="0" />
                    </Border.Effect>
                    <Border.Style>
                        <Style TargetType="{x:Type Border}">
                            <Setter Property="Background" Value="{DynamicResource ResourceKey=MarbleTextBoxErrorBackground}" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=WarningText.Length, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:NumericValueIsBiggerThanParameterValue}, ConverterParameter=0}" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource ResourceKey=MarbleTextBoxWarningBackground}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=ErrorText.Length, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:NumericValueIsBiggerThanParameterValue}, ConverterParameter=0}" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource ResourceKey=MarbleTextBoxErrorBackground}" />
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ErrorText, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}" />
                                        <Condition Binding="{Binding WarningText, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>

                    <StackPanel HorizontalAlignment="Left" Orientation="Horizontal" MaxWidth="520">
                        <Image Margin="10,2,2,2" Height="20" Width="20">
                            <Image.Style>
                                <Style TargetType="{x:Type Image}">
                                    <Setter Property="Visibility" Value="Visible" />
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\failed.circle.icon.20x20.png" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=WarningText.Length, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:NumericValueIsBiggerThanParameterValue}, ConverterParameter=0}" Value="True">
                                            <Setter Property="Source" Value="/MarbleLibrary;component/Images\warning.icon.20x20.png" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=ErrorText.Length, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:NumericValueIsBiggerThanParameterValue}, ConverterParameter=0}" Value="True">
                                            <Setter Property="Source" Value="/MarbleLibrary;component/Images\failed.circle.icon.20x20.png" />
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding ErrorText, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}" />
                                                <Condition Binding="{Binding WarningText, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                        <TextBlock x:Name="textBlockWarning" Margin="5,0,5,0" Text="{Binding WarningText, UpdateSourceTrigger=PropertyChanged}" TextWrapping="Wrap" VerticalAlignment="Center" MaxWidth="480">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding WarningText, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=ErrorText.Length, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:NumericValueIsBiggerThanParameterValue}, ConverterParameter=0}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <TextBlock x:Name="textBlockError" Margin="5,0,5,0" Text="{Binding ErrorText, UpdateSourceTrigger=PropertyChanged}" TextWrapping="Wrap" VerticalAlignment="Center" MaxWidth="480">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ErrorText, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </StackPanel>
                </Border>

                <TextBlock Grid.Row="1" Grid.Column="0" Text="Flashing Mode" VerticalAlignment="Center" Margin="0,0,10,10" />
                
                <StackPanel Grid.Row="1" Grid.Column="2" HorizontalAlignment="Left" VerticalAlignment="Center" Orientation="Vertical" Margin="0,0,0,10">

                    
                    <CheckBox Content="Firmware Flash" VerticalAlignment="Center" IsChecked="{Binding IsFirmwareFlashModeEnabled, Mode=TwoWay}" Margin="0,0,10,5" 
                              IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}"/>
                        
                    <!--<RadioButton x:Name="radioButtonNormalFlash" GroupName="groupFlashingMode" Content="Normal" VerticalAlignment="Center" IsChecked="{Binding IsDeadPhoneFlashModeEnabled, Mode=TwoWay, Converter={Converters1:SuccessConverter}, ConverterParameter=False}" Margin="0,0,100,0" 
                                    IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}"/>-->
                        
                        

                    <CheckBox Content="Dead Phone Flash" VerticalAlignment="Center" IsChecked="{Binding IsDeadPhoneFlashModeEnabled, Mode=TwoWay}" Margin="0,0,10,5" 
                                  IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}"/>
                    <!--<RadioButton x:Name="radioButtonDeadPhoneFlash" GroupName="groupFlashingModeDead" Content="Dead Phone Flash" VerticalAlignment="Center" Margin="0,5,0,5" IsChecked="{Binding IsDeadPhoneFlashModeEnabled, Mode=TwoWay, Converter={Converters1:SuccessConverter}, ConverterParameter=True}" 
                                 IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}"/>-->

                    <!-- NOT VISIBLE UNTIL MIDDLEWARE ONLY FLASHING IS WORKING -->
                    
                    <CheckBox Content="Middleware Only Flash" VerticalAlignment="Center" IsChecked="{Binding IsMiddlewareOnlyFlashModeEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,10,0" 
                                IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}"
                                Visibility="Collapsed"/>
                </StackPanel>

                <!--<StackPanel Grid.Row="2" Orientation="Horizontal">
                    <StackPanel.Style>
                        <Style TargetType="{x:Type StackPanel}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsDeadPhoneFlashModeEnabled, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="IsEnabled" Value="False" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>-->
                <TextBlock Grid.Row="2" Grid.Column="0" Text="Connection" VerticalAlignment="Center" Margin="0,0,10,0" IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}" />
                <Image Grid.Row="2" Grid.Column="1" Height="20" Width="20" >
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Setter Property="Visibility" Value="Visible" />
                            <Setter Property="Source" Value="/MarbleLibrary;component/Images\passed.circle.icon.20x20.png" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Connection, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\failed.circle.icon.20x20.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsDeadPhoneFlashModeEnabled, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\passed.circle.icon.20x20.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsConnectionSupported, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\failed.circle.icon.20x20.png" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
                <Grid Grid.Row="2" Grid.Column="2">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="240" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    
                    <ComboBox x:Name="comboBoxConnections" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Left" 
                                      ItemsSource="{Binding Source={x:Static Application.Current}, Path=ViewModel.FuseClient.ConnectionsSupportedByFlasher, UpdateSourceTrigger=PropertyChanged}"
                                      SelectedItem="{Binding Connection, Mode=TwoWay}" IsEnabledChanged="comboBoxConnections_IsEnabledChanged">
                        <ComboBox.Style>
                            <Style TargetType="{x:Type ComboBox}">
                                <Setter Property="IsEnabled" Value="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Source={x:Static Application.Current}, Path=ViewModel.FuseClient.ConnectionsSupportedByFlasher, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                        <Setter Property="IsEnabled" Value="False" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Source={x:Static Application.Current}, Path=ViewModel.FuseClient.ConnectionsSupportedByFlasher.Count, UpdateSourceTrigger=PropertyChanged}" Value="0">
                                        <Setter Property="IsEnabled" Value="False" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsDeadPhoneFlashModeEnabled, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                        <Setter Property="IsEnabled" Value="False" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ComboBox.Style>
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <Image x:Name="imageConnectionLabel" Source="{Binding Connection.Name, Converter={Converters:ConnectionTypeToImageConverter}}" Height="16" Width="32" Margin="0,0,5,0" />
                                    <TextBlock Text="{Binding Path=Connection.Name}" />
                                    <TextBlock Text="{Binding Path=Version.RMCode}" Margin="15,0,0,0" />
                                </StackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>

                    <StackPanel Grid.Column="1" Orientation="Horizontal" ToolTip="Product RM code was not found on ADL value list for USB connection.&#x0a;Select MCU file name containing RM code or select correct ADL value.">
                        <StackPanel.Style>
                            <Style TargetType="{x:Type StackPanel}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsUserSelectionForAdlValueRequired, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding McuFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding McuFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Style>
                        <TextBlock Text="USB Flash ADL Argument" VerticalAlignment="Center"/>

                        <RadioButton x:Name="radioButtonAdl2" GroupName="AdlGroup" Width="40" IsChecked="{Binding ForcedAdlArgumentValue, Mode=TwoWay, Converter={Converters1:EnumToBoolConverter}, ConverterParameter=Adl2}"
                                     Style="{StaticResource MarbleRadioButtonPushable}" Margin="12,1,1,1" VerticalAlignment="Center">
                            <RadioButton.Content>
                                <TextBlock Text="2" Foreground="White"/>
                            </RadioButton.Content>
                        </RadioButton>
                        <RadioButton x:Name="radioButtonAdl4" GroupName="AdlGroup" Width="40" IsChecked="{Binding ForcedAdlArgumentValue, Mode=TwoWay, Converter={Converters1:EnumToBoolConverter}, ConverterParameter=Adl4}" 
                                     Style="{StaticResource MarbleRadioButtonPushable}" Margin="1,1,1,1" VerticalAlignment="Center">
                            <RadioButton.Content>
                                <TextBlock Text="4" Foreground="White"/>
                            </RadioButton.Content>
                        </RadioButton>
                    </StackPanel>

                </Grid>
                <!--</StackPanel>-->


                <TextBlock Grid.Row="3" Grid.Column="0" Text="MCU File" VerticalAlignment="Center" Margin="0,0,10,0" />
                <Image Grid.Row="3" Grid.Column="1" Margin="2" Height="20" Width="20">
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Setter Property="Visibility" Value="Visible" />
                            <Setter Property="Source" Value="/MarbleLibrary;component/Images\passed.circle.icon.20x20.png" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding HasMcuFileCorrectFileExtension, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\warning.icon.20x20.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsMcuFilePossiblyWrongFile, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\warning.icon.20x20.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding McuFileExists, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\failed.circle.icon.20x20.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding McuFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding McuFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
                <StackPanel Grid.Row="3" Grid.Column="2" Orientation="Horizontal">
                    <CustomControls:ClickSelectTextBox Width="380" Text="{Binding McuFilePath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}">
                        <CustomControls:ClickSelectTextBox.Style>
                            <Style TargetType="{x:Type TextBox}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsMcuFilePossiblyWrongFile, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource ResourceKey=MarbleTextBoxWarningBackground}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding HasMcuFileCorrectFileExtension, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Background" Value="{DynamicResource ResourceKey=MarbleTextBoxWarningBackground}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding McuFileExists, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Background" Value="{DynamicResource ResourceKey=MarbleTextBoxErrorBackground}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding McuFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                        <Setter Property="Background" Value="White" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding McuFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}">
                                        <Setter Property="Background" Value="White" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CustomControls:ClickSelectTextBox.Style>
                    </CustomControls:ClickSelectTextBox>

                    <Button x:Name="buttonBrowseMcuFile" Width="120" HorizontalContentAlignment="Left" HorizontalAlignment="Right" Margin="5" VerticalAlignment="Center" Style="{DynamicResource MarbleButton}" Click="buttonBrowseMcuFile_Click" IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}">
                        <StackPanel Orientation="Horizontal" IsEnabledChanged="StackPanel_IsEnabledChanged">
                            <Image Margin="5" Height="16" Width="16" Source="/MarbleLibrary;component/Images\open.file.icon2.16x16.png" />
                            <TextBlock Margin="10,0,10,0" Text="Select File..." VerticalAlignment="Center" />
                        </StackPanel>
                    </Button>
                </StackPanel>

                <TextBlock Grid.Row="4" Grid.Column="0" Text="Content File" VerticalAlignment="Center" Margin="0,0,10,0" />
                <Image Grid.Row="4" Grid.Column="1" Margin="2" Height="20" Width="20">
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Setter Property="Visibility" Value="Visible" />
                            <Setter Property="Source" Value="/MarbleLibrary;component/Images\passed.circle.icon.20x20.png" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding HasContentFileCorrectFileExtension, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\warning.icon.20x20.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ContentFileExists, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\failed.circle.icon.20x20.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ContentFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ContentFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
                <StackPanel Grid.Row="4" Grid.Column="2" Orientation="Horizontal">
                    <CustomControls:ClickSelectTextBox Width="380" Text="{Binding ContentFilePath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}"
                                                       DragEnter="onFlashingFileDragEnter" DragOver="onFlashingFileDragOver" AllowDrop="True" Drop="LayoutRoot_Drop">
                        <CustomControls:ClickSelectTextBox.Style>
                            <Style TargetType="{x:Type TextBox}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding HasContentFileCorrectFileExtension, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Background" Value="{DynamicResource ResourceKey=MarbleTextBoxWarningBackground}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ContentFileExists, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Background" Value="{DynamicResource ResourceKey=MarbleTextBoxErrorBackground}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ContentFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                        <Setter Property="Background" Value="White" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ContentFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}">
                                        <Setter Property="Background" Value="White" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CustomControls:ClickSelectTextBox.Style>
                    </CustomControls:ClickSelectTextBox>

                    <Button x:Name="buttonBrowseContentFile" Width="120" HorizontalContentAlignment="Left" HorizontalAlignment="Right" Margin="5" VerticalAlignment="Center" Style="{DynamicResource MarbleButton}" Click="buttonBrowseContentFile_Click" IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}">
                        <StackPanel Orientation="Horizontal">
                            <Image Margin="5" Height="16" Width="16" Source="/MarbleLibrary;component/Images\open.file.icon2.16x16.png" />
                            <TextBlock Margin="10,0,10,0" Text="Select File..." VerticalAlignment="Center" />
                        </StackPanel>
                    </Button>
                </StackPanel>

                <TextBlock Grid.Row="5" Grid.Column="0" Text="Language File" VerticalAlignment="Center" Margin="0,0,10,0" />
                <Image Grid.Row="5" Grid.Column="1" Margin="2" Height="20" Width="20">
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Setter Property="Visibility" Value="Visible" />
                            <Setter Property="Source" Value="/MarbleLibrary;component/Images\passed.circle.icon.20x20.png" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding HasLanguageFileCorrectFileExtension, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\warning.icon.20x20.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding LanguageFileExists, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\failed.circle.icon.20x20.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding LanguageFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\failed.circle.icon.20x20.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding LanguageFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\failed.circle.icon.20x20.png" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
                <StackPanel Grid.Row="5" Grid.Column="2" Orientation="Horizontal">
                    <CustomControls:ClickSelectTextBox Width="380" Text="{Binding LanguageFilePath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}"
                                                       DragEnter="onFlashingFileDragEnter" DragOver="onFlashingFileDragOver" AllowDrop="True" Drop="LayoutRoot_Drop">
                        <CustomControls:ClickSelectTextBox.Style>
                            <Style TargetType="{x:Type TextBox}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding HasLanguageFileCorrectFileExtension, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Background" Value="{DynamicResource ResourceKey=MarbleTextBoxWarningBackground}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding LanguageFileExists, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Background" Value="{DynamicResource ResourceKey=MarbleTextBoxErrorBackground}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding LanguageFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                        <Setter Property="Background" Value="White" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding LanguageFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}">
                                        <Setter Property="Background" Value="White" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CustomControls:ClickSelectTextBox.Style>
                    </CustomControls:ClickSelectTextBox>

                    <Button x:Name="buttonBrowseLanguageFile" Width="120" HorizontalContentAlignment="Left" HorizontalAlignment="Right" Margin="5" VerticalAlignment="Center" Style="{DynamicResource MarbleButton}" Click="buttonBrowseLanguageFile_Click" IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}">
                        <StackPanel Orientation="Horizontal">
                            <Image Margin="5" Height="16" Width="16" Source="/MarbleLibrary;component/Images\open.file.icon2.16x16.png" />
                            <TextBlock Margin="10,0,10,0" Text="Select File..." VerticalAlignment="Center" />
                        </StackPanel>
                    </Button>
                </StackPanel>


                <TextBlock Grid.Row="6" Grid.Column="0" Text="FW Folder" VerticalAlignment="Center" Margin="0,0,10,0" />
                <Image Grid.Row="6" Grid.Column="1" Margin="2" Height="20" Width="20">
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Setter Property="Visibility" Value="Visible" />
                            <Setter Property="Source" Value="/MarbleLibrary;component/Images\passed.circle.icon.20x20.png" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding HasFirmwareFolderCorrectFiles, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\failed.circle.icon.20x20.png" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
                <StackPanel Grid.Row="6" Grid.Column="2" Orientation="Horizontal">
                    <CustomControls:ClickSelectTextBox Width="380" Text="{Binding FirmwareDirectoryPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}"
                                                       DragEnter="onFlashingFileDragEnter" DragOver="onFlashingFileDragOver" AllowDrop="True" Drop="LayoutRoot_Drop" TextChanged="ClickSelectTextBox_TextChanged">
                        <CustomControls:ClickSelectTextBox.Style>
                            <Style TargetType="{x:Type TextBox}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding HasLanguageFileCorrectFileExtension, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Background" Value="{DynamicResource ResourceKey=MarbleTextBoxWarningBackground}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding LanguageFileExists, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Background" Value="{DynamicResource ResourceKey=MarbleTextBoxErrorBackground}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding LanguageFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                        <Setter Property="Background" Value="White" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding LanguageFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}">
                                        <Setter Property="Background" Value="White" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CustomControls:ClickSelectTextBox.Style>
                    </CustomControls:ClickSelectTextBox>

                    <Button x:Name="buttonBrowseFirmwareFolder" Width="120" HorizontalContentAlignment="Left" HorizontalAlignment="Right" Margin="5" VerticalAlignment="Center" Style="{DynamicResource MarbleButton}" Click="buttonBrowseFirmwareFolder_Click" IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}">
                        <StackPanel Orientation="Horizontal">
                            <Image Margin="5" Height="16" Width="16" Source="/MarbleLibrary;component/Images\open.file.icon2.16x16.png" />
                            <TextBlock Margin="10,0,10,0" Text="Select Folder..." VerticalAlignment="Center" />
                        </StackPanel>
                    </Button>
                </StackPanel>


                <TextBlock Grid.Row="7" Grid.Column="0" Text="Erase File" VerticalAlignment="Center" Margin="0,0,10,0" />
                <Image Grid.Row="7" Grid.Column="1" Margin="2" Height="20" Width="20">
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Setter Property="Visibility" Value="Visible" />
                            <Setter Property="Source" Value="/MarbleLibrary;component/Images\passed.circle.icon.20x20.png" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding HasEraseFileCorrectFileExtension, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\warning.icon.20x20.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding EraseFileExists, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\failed.circle.icon.20x20.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding EraseFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\failed.circle.icon.20x20.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding EraseFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\failed.circle.icon.20x20.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding EraseFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding EraseFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
                <StackPanel Grid.Row="7" Grid.Column="2" Orientation="Horizontal">
                    <CustomControls:ClickSelectTextBox Width="380" Text="{Binding EraseFilePath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}"
                                                       DragEnter="onFlashingFileDragEnter" DragOver="onFlashingFileDragOver" AllowDrop="True" Drop="LayoutRoot_Drop">
                        <CustomControls:ClickSelectTextBox.Style>
                            <Style TargetType="{x:Type TextBox}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding HasEraseFileCorrectFileExtension, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Background" Value="{DynamicResource ResourceKey=MarbleTextBoxWarningBackground}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding EraseFileExists, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                        <Setter Property="Background" Value="{DynamicResource ResourceKey=MarbleTextBoxErrorBackground}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding EraseFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                        <Setter Property="Background" Value="White" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding EraseFilePath, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}">
                                        <Setter Property="Background" Value="White" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CustomControls:ClickSelectTextBox.Style>
                    </CustomControls:ClickSelectTextBox>

                    <Button x:Name="buttonBrowseEraseFile" Width="120" HorizontalContentAlignment="Left" HorizontalAlignment="Right" Margin="5" VerticalAlignment="Center" Style="{DynamicResource MarbleButton}" Click="buttonBrowseEraseFile_Click" IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}">
                        <StackPanel Orientation="Horizontal">
                            <Image Margin="5" Height="16" Width="16" Source="/MarbleLibrary;component/Images\open.file.icon2.16x16.png" />
                            <TextBlock Margin="10,0,10,0" Text="Select File..." VerticalAlignment="Center" />
                        </StackPanel>
                    </Button>
                </StackPanel>


                <StackPanel Grid.Row="8" Grid.ColumnSpan="3" Orientation="Horizontal">
                    <TextBlock Text="Variant Code" VerticalAlignment="Center" Width="130"/>
                    <ComboBox x:Name="comboBoxVariants" VerticalAlignment="Center" HorizontalAlignment="Left" SelectedItem="{Binding Variant, Mode=TwoWay}" IsEnabled="{Binding IsFlashingInProgress, UpdateSourceTrigger=PropertyChanged, Converter={Converters1:InvertBoolValueConverter}}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <StackPanel.ToolTip>
                                        <WrapPanel Orientation="Horizontal">
                                            <TextBlock Text="{Binding Key}" Margin="0,0,10,0" />
                                            <TextBlock Text="( " />
                                            <TextBlock Text="{Binding Value}" TextWrapping="Wrap" />
                                            <TextBlock Text=" )" />
                                        </WrapPanel>
                                    </StackPanel.ToolTip>
                                    <TextBlock Text="{Binding Key}" VerticalAlignment="Center"/>
                                    <!--<TextBlock Text="{Binding Value}" Margin="15,0,0,0"/>-->
                                </StackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </StackPanel>

                <StackPanel Grid.Row="9" Grid.ColumnSpan="3">
                    <StackPanel.Style>
                        <Style TargetType="{x:Type StackPanel}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ConsoleOutputText, UpdateSourceTrigger=PropertyChanged}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ConsoleOutputText, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static System:String.Empty}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding FlashingStatus, UpdateSourceTrigger=PropertyChanged}" Value="Idle">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                    <GroupBox x:Name="groupBoxConsoleOutput" HorizontalAlignment="Stretch" Grid.Row="5" Grid.ColumnSpan="3" Header="Flasher Messages" Margin="2" Style="{DynamicResource MarbleGroupBox}" Background="Transparent">
                        <TextBox x:Name="textBlockConsoleOutput" Text="{Binding ConsoleOutputText, UpdateSourceTrigger=PropertyChanged}" MaxHeight="300" MaxWidth="610" IsReadOnly="True" IsUndoEnabled="False" 
                                 HorizontalAlignment="Stretch" VerticalAlignment="Stretch" TextWrapping="Wrap" TextChanged="textBlockConsoleOutput_TextChanged" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">
                            <TextBox.Style>
                                <Style TargetType="{x:Type TextBox}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsPreviousFlashingSuccessful, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <ImageBrush ImageSource="/MarbleLibrary;component/Images\failed.circle.icon.313x320.png" Opacity="0.2" Stretch="None" AlignmentX="Right" AlignmentY="Bottom"  />
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsPreviousFlashingSuccessful, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <ImageBrush ImageSource="/MarbleLibrary;component/Images\passed.circle.icon.313x320.png" Opacity="0.2" Stretch="None" AlignmentX="Right" AlignmentY="Bottom"  />
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding FlashingStatus, UpdateSourceTrigger=PropertyChanged}" Value="Flashing">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <ImageBrush ImageSource="/MarbleLibrary;component/Images\flasher.icon.232x320.png" Opacity="0.2" Stretch="None" AlignmentX="Right" AlignmentY="Bottom"  />
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                    </GroupBox>
                </StackPanel>

            </Grid>
        </GroupBox>

        

        <Grid Grid.Row="2" Grid.ColumnSpan="3">
            <Grid.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FF2F2F2F" Offset="1"/>
                    <GradientStop Color="#FF444444"/>
                </LinearGradientBrush>
            </Grid.Background>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Button x:Name="buttonStartFlashing" Grid.Column="0" HorizontalAlignment="Left" Width="150" Height="30" Margin="5" Style="{DynamicResource MarbleButton}" Command="{Binding CmdStartFlashing}">
                <TextBlock Text="Start Flashing" />
            </Button>
            <Button x:Name="buttonCancel" Grid.Column="2" HorizontalAlignment="Right" Width="100" Height="30" Margin="5" Style="{DynamicResource MarbleButton}" Command="Close">
                <TextBlock Text="Close" />
            </Button>
        </Grid>

    </Grid>
</Views:UcBase>
