<Window x:Class="Marble.MarbleMainWindow" x:Name="WindowMarbleMainWindow"
                     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:ribbon="clr-namespace:Microsoft.Windows.Controls.Ribbon;assembly=RibbonControlsLibrary"
                     xmlns:ribbonPrimitives="clr-namespace:Microsoft.Windows.Controls.Ribbon.Primitives;assembly=RibbonControlsLibrary"
                     xmlns:local="clr-namespace:Marble.ViewModel"
                     xmlns:utilities="clr-namespace:Marble.Utilities"
                     xmlns:app="clr-namespace:Marble"
                     xmlns:converters="clr-namespace:Marble.Converters"
                     xmlns:command="clr-namespace:MarbleLibrary.Commands;assembly=MarbleLibrary"
                     xmlns:Converters="clr-namespace:MarbleLibrary.Converters;assembly=MarbleLibrary"
                     
                     command:WindowClosingBehaviour.Closing="{Binding MainWindowClosingCommand}"                     
                     Title="{Binding MarbleApplicationTitleText}" Height="750" Width="1150" MinHeight="450" MinWidth="450"
                     Icon="/MarbleLibrary;component/Images/Marble.M.Icon.ico"
                     KeyUp="RibbonWindowKeyUp" Loaded="RibbonWindow_Loaded"
                     xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:customControls="clr-namespace:MarbleLibrary.CustomControls;assembly=MarbleLibrary"
        xmlns:views="clr-namespace:Marble.Views" StateChanged="WindowMarbleMainWindow_StateChanged">
    <Window.InputBindings>
        <KeyBinding Key="F5" Command="{Binding RunTestSetCommand}" />
    </Window.InputBindings>

    <Grid x:Name="LayoutRoot" Background="#FF10002D">

        <Button Command="{Binding RunTestSetCommand}" Width="64" Height="64" Margin="0,0,0,-8" Panel.ZIndex="99" VerticalAlignment="Bottom" HorizontalAlignment="Left">
            <Button.Style>
                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MarbleRoundButton}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding MarbleConnector.State, Converter={converters:ConnectorStateToGuiStateString}}" Value="Ready">
                            <Setter Property="ToolTip">
                                <Setter.Value>
                                    <customControls:MarbleToolTip ToolTipTitle="Start (F5)"
                                                  ToolTipDescription="Starts executing configured test run."/>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding MarbleConnector.State, Converter={converters:ConnectorStateToGuiStateString}}" Value="Running">
                            <Setter Property="ToolTip">
                                <Setter.Value>
                                    <customControls:MarbleToolTip ToolTipTitle="Pause Request (F5)"
                                                  ToolTipDescription="Requests pause and pauses test run when possible."/>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
                <Image Source="{Binding MarbleConnector.State, Converter={converters:ConnectorStateToCircleMarbleButtonImageConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center" Height="64" Width="64"/>
                <!--<Image Source="/MarbleLibrary;component/Images\play.marble.icon.64x64.png" HorizontalAlignment="Center" VerticalAlignment="Center" Height="64" Width="64"/>-->
            </StackPanel>
        </Button>

        <DockPanel>

        <Border x:Name="MainViewBottomBorder" DockPanel.Dock="Bottom" BorderBrush="Black" BorderThickness="1" Background="{StaticResource MarbleLightNaturalBackgroundGradient}" Margin="20,0,0,0" Height="50">
            <StatusBar x:Name="MainViewStatusBar" Height="50" Background="{StaticResource MarbleLightNaturalBackgroundGradient}" >
                <StatusBar.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="5*" />
                                <!-- Separator -->
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <!-- Separator -->
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <!-- Separator -->
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <!-- Separator -->
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <!-- Separator -->
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                        </Grid>
                    </ItemsPanelTemplate>
                </StatusBar.ItemsPanel>

                <StatusBarItem Grid.Column="0" Margin="5,0,5,0">
                    <StackPanel Orientation="Horizontal">
                        
                        <!--<Button Command="{Binding RunTestSetCommand}" Width="32" Height="32" Style="{StaticResource MarbleButton}" Margin="2">
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Image Source="{Binding MarbleConnector.State, Converter={converters:ConnectorStateToImageConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center" Height="20" Width="20"/>
                            </StackPanel>
                        </Button>-->

                        <Button Command="{Binding StopTestRunCommand}" Width="38" Height="38" Style="{StaticResource MarbleButton}" Margin="45,2,2,2">
                            <!--<Button.Template>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <ContentPresenter />
                                </ControlTemplate>
                            </Button.Template>-->
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Image HorizontalAlignment="Center" VerticalAlignment="Center" Height="20" Width="20" Source="/MarbleLibrary;component/Images\stopping.icon.20x20.png" />

                                <!--<Image HorizontalAlignment="Center" VerticalAlignment="Center" Height="20" Width="20">
                                    <Image.Style>
                                        <Style TargetType="{x:Type Image}" BasedOn="{StaticResource {x:Type Image}}">
                                            <Setter Property="Source" Value="/MarbleLibrary;component/Images\stop.icon.32x32.png"></Setter>
                                            <Setter Property="Source" Value="/MarbleLibrary;component/Images\stopping.icon.20x20.png"></Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding StoppingExecution, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images\stop.red.icon.32x32.png" />
                                                    <Setter Property="ToolTipTitle" Value="Emergency Stop!"/>
                                                    <Setter Property="ToolTipDescription" Value="Emergency stops the test execution."/>
                                                    <Setter Property="LargeImageSource" Value="/MarbleLibrary;component/Images\stop.red.icon.32x32.png" />
                                                    <Setter Property="SmallImageSource" Value="/MarbleLibrary;component/Images\stop.red.icon.32x32.png" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>-->

                                <!--<customControls:MarbleMainMenuItem x:Name="buttonStopTestSetRun" 
                                         Label="Stop" Margin="0,5,0,0"
                                         Command="{Binding StopTestRunCommand}" Visibility="Collapsed">
                                    <customControls:MarbleMainMenuItem.Style>
                                        <Style TargetType="{x:Type customControls:MarbleMainMenuItem}">
                                            <Setter Property="ToolTipTitle" Value="Stop"/>
                                            <Setter Property="ToolTipDescription" Value="Stops the test execution."/>
                                            <Setter Property="LargeImageSource" Value="/MarbleLibrary;component/Images\stop.icon.32x32.png" />
                                            <Setter Property="SmallImageSource" Value="/MarbleLibrary;component/Images\stop.icon.32x32.png" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding StoppingExecution, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                    <Setter Property="ToolTipTitle" Value="Emergency Stop!"/>
                                                    <Setter Property="ToolTipDescription" Value="Emergency stops the test execution."/>
                                                    <Setter Property="LargeImageSource" Value="/MarbleLibrary;component/Images\stop.red.icon.32x32.png" />
                                                    <Setter Property="SmallImageSource" Value="/MarbleLibrary;component/Images\stop.red.icon.32x32.png" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </customControls:MarbleMainMenuItem.Style>
                                </customControls:MarbleMainMenuItem>-->
                            </StackPanel>
                        </Button>

                        <customControls:MarbleMainMenuItem x:Name="btnRunTestSet" LargeImageSource="{Binding MarbleConnector.State, Converter={converters:ConnectorStateToImageConverter}}"
                                         SmallImageSource="{Binding MarbleConnector.State, Converter={converters:ConnectorStateToImageConverter}}"
                                         Label="{Binding MarbleConnector.State, Converter={converters:ConnectorStateToRunStopText}}"
                                         Margin="0,5,0,0"
                                         ToolTipTitle="{Binding MarbleConnector.State, Converter={converters:ConnectorStateToTooltipConverter}}"
                                         Command="{Binding RunTestSetCommand}" Visibility="Collapsed">
                            <!--<customControls:MarbleMainMenuItem.Style>
                        <Style TargetType="{x:Type customControls:MarbleMainMenuItem}" BasedOn="{StaticResource {x:Type customControls:MarbleMainMenuItem}}">
                            <Setter Property="ToolTipDescription" Value="Run checked test cases." />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding MarbleConnector.State, Converter={converters:ConnectorStateToRunStopText}}" Value="Pause">
                                    <Setter Property="ToolTipDescription" Value="Pause test set execution after current test case has finished."/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsTestRunPaused, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="ToolTipDescription" Value="Resume test set execution."/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsTestRunPauseRequested, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="ToolTipDescription" Value="Resume test set execution and cancel pausing after current test case has finished."/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </customControls:MarbleMainMenuItem.Style>-->
                        </customControls:MarbleMainMenuItem>
                        <customControls:MarbleMainMenuItem x:Name="buttonStopTestSetRun" 
                                         Label="Stop" Margin="0,5,0,0"
                                         Command="{Binding StopTestRunCommand}" Visibility="Collapsed">
                            <customControls:MarbleMainMenuItem.Style>
                                <Style TargetType="{x:Type customControls:MarbleMainMenuItem}">
                                    <!--<Setter Property="ToolTipTitle" Value="Stop"/>
                            <Setter Property="ToolTipDescription" Value="Stops the test execution."/>-->
                                    <Setter Property="LargeImageSource" Value="/MarbleLibrary;component/Images\stop.icon.32x32.png" />
                                    <Setter Property="SmallImageSource" Value="/MarbleLibrary;component/Images\stop.icon.32x32.png" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding StoppingExecution, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                            <!--<Setter Property="ToolTipTitle" Value="Emergency Stop!"/>
                                    <Setter Property="ToolTipDescription" Value="Emergency stops the test execution."/>-->
                                            <Setter Property="LargeImageSource" Value="/MarbleLibrary;component/Images\stop.red.icon.32x32.png" />
                                            <Setter Property="SmallImageSource" Value="/MarbleLibrary;component/Images\stop.red.icon.32x32.png" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </customControls:MarbleMainMenuItem.Style>
                        </customControls:MarbleMainMenuItem>

                        
                    </StackPanel>
                </StatusBarItem>

                <StatusBarItem Grid.Column="1" >
                    <StackPanel Orientation="Horizontal">
                        <StackPanel Orientation="Horizontal" x:Name="stackPanelTestingStatus">
                            <StackPanel.Style>
                                <Style TargetType="{x:Type StackPanel}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=borderCurrentlyTesting, Path=IsVisible}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <Image Height="20" Width="20" Source="/MarbleLibrary;component/Images/timeout.icon.20x20.png">
                                <Image.Style>
                                    <Style TargetType="{x:Type Image}">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsTestRunPauseRequested, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                <Setter Property="Visibility" Value="Visible" />
                                                <Setter Property="ToolTip" Value="Pausing after current test case has finished." />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                            <Image Height="20" Width="20" Margin="0,0,6,0" Source="{Binding MarbleConnector.State, Converter={converters:ConnectorStateToCurrentTestingStateImageConverter}, UpdateSourceTrigger=PropertyChanged}">
                                <Image.Style>
                                    <Style TargetType="{x:Type Image}">
                                        <Setter Property="ToolTip" Value="Test run is in progress..."/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsTestRunPaused, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                <Setter Property="ToolTip" Value="Test run is paused."/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding IsTestRunPauseRequested, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                <Setter Property="ToolTip" Value="Pausing after current test case has finished."/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding StoppingExecution, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                <Setter Property="ToolTip" Value="Stopping test run..."/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                        </StackPanel>
                        <TextBlock x:Name="TextBlockElapsedExecutionTime" Text="{Binding TestExecutionTimeSpanText, UpdateSourceTrigger=PropertyChanged}" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}" VerticalAlignment="Center"
                                   ToolTip="{Binding TestExecutionTimeToolTip, UpdateSourceTrigger=PropertyChanged}"/>
                        <!--<TextBlock x:Name="textBlockCurrentTestCase" VerticalAlignment="Center" Margin="15,2,5,2" Style="{StaticResource MarbleTextBlockLightBackgroundStyle}" Foreground="Black" Text="{Binding TestSetModel.CurrentTestCase.Name}" 
                                   TextTrimming="CharacterEllipsis" ToolTip="{Binding TestSetModel.CurrentTestCase.Name}"/>-->
                    </StackPanel>
                </StatusBarItem>

                <StatusBarItem Grid.Column="2" HorizontalContentAlignment="Stretch">
                    <ProgressBar Name="totalProgressBar" Height="20"
                                    Value="{Binding TestSetModel.TestRunProgressValue}"
                                    Minimum="0" Maximum="100"
                                    VerticalAlignment="Center">
                        <ProgressBar.Style>
                            <Style TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource {x:Type ProgressBar}}">
                                <Setter Property="Visibility" Value="Visible" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding TestSetModel.TestRunProgressValue}" Value="0">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ProgressBar.Style>
                    </ProgressBar>
                </StatusBarItem>
                
                <StatusBarItem Grid.Column="3">
                    <StackPanel Orientation="Horizontal">
                        <!--
                        <TextBlock Text="Settings:" Margin="0,0,4,0" />
                        <TextBlock Text="O" />
                        -->
                    </StackPanel>
                </StatusBarItem>
                <!--<Separator Grid.Column="4" />-->
                <StatusBarItem Grid.Column="5">
                    <StackPanel Orientation="Horizontal">
                        <!--
                        <TextBlock Text="Tests:" Margin="0,0,4,0" />
                        <TextBlock Text="O" />
                        -->
                    </StackPanel>
                </StatusBarItem>
                <!--<Separator Grid.Column="6" />-->
                <StatusBarItem Grid.Column="7" Margin="10,0,0,0">
                    <StackPanel Orientation="Horizontal">
                        <Image Height="20" Width="20" Source="/MarbleLibrary;component/Images\passed.circle.icon.20x20.png" Margin="0,0,6,0" ToolTip="Passed Test Cases." />
                        <TextBlock Text="{Binding TestSetModel.PassedResultsCount, UpdateSourceTrigger=PropertyChanged}" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}" FontWeight="SemiBold" VerticalAlignment="Center" FontSize="15">
                        <!--<TextBlock Text="{Binding TestSetModel.PassedTestCases}" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}" FontWeight="SemiBold" VerticalAlignment="Center" FontSize="15">-->
                            <!--<TextBlock.Effect>
                                <DropShadowEffect BlurRadius="3" Color="Black" Direction="0" ShadowDepth="0" />
                            </TextBlock.Effect>-->
                        </TextBlock>
                    </StackPanel>
                </StatusBarItem>
                <!--<Separator Grid.Column="8" />-->
                <StatusBarItem Grid.Column="9" Margin="10,0,0,0">
                    <StackPanel Orientation="Horizontal">
                        <Image Height="20" Width="20" Source="/MarbleLibrary;component/Images\failed.circle.icon.20x20.png" Margin="0,0,6,0" ToolTip="Failed Test Cases."/>
                        <TextBlock Text="{Binding TestSetModel.FailedResultsCount, UpdateSourceTrigger=PropertyChanged}" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}" FontWeight="SemiBold" VerticalAlignment="Center" FontSize="15">
                        <!--<TextBlock Text="{Binding TestSetModel.FailedTestCases}" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}" FontWeight="SemiBold" VerticalAlignment="Center" FontSize="15">-->
                            <!--<TextBlock.Effect>
                                <DropShadowEffect BlurRadius="3" Color="Black" Direction="0" ShadowDepth="0" />
                            </TextBlock.Effect>-->
                        </TextBlock>
                    </StackPanel>
                </StatusBarItem>
                <!--<Separator Grid.Column="10" />-->
                <StatusBarItem Grid.Column="11" Margin="10,0,10,0">
                    <StackPanel Orientation="Horizontal">
                        <Image Height="20" Width="20" Source="/MarbleLibrary;component/Images\no.resolution.circle.icon.20x20.png" Margin="0,0,6,0" ToolTip="Test Cases with no resolution." />
                        <TextBlock Text="{Binding TestSetModel.NoResultResultsCount, UpdateSourceTrigger=PropertyChanged}" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}" FontWeight="SemiBold" VerticalAlignment="Center" FontSize="15">
                        <!--<TextBlock Text="{Binding TestSetModel.NoResultTestCases}" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}" FontWeight="SemiBold" VerticalAlignment="Center" FontSize="15">-->
                            <!--<TextBlock.Effect>
                                <DropShadowEffect BlurRadius="3" Color="Black" Direction="0" ShadowDepth="0" />
                            </TextBlock.Effect>-->
                        </TextBlock>
                    </StackPanel>
                </StatusBarItem>
            </StatusBar>
        </Border>

        <views:CurrentlyTestingBarUc x:Name="currentlyTestingBarUc" DockPanel.Dock="Bottom" />

        <ItemsControl Width="Auto" DockPanel.Dock="Left" Foreground="#FF2D2D2D" ScrollViewer.VerticalScrollBarVisibility="Visible" Background="#FF10002D" ScrollViewer.CanContentScroll="True">
            <ItemsControl.Resources>
                <Style TargetType="{x:Type Button}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <StackPanel Background="{TemplateBinding Background}">
                                    <ContentPresenter />
                                </StackPanel>
                                <ControlTemplate.Triggers>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="True" />
                                            <!--<Condition Property="IsSelected" Value="False"/>-->
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Background" Value="{StaticResource MarblePurpleHighlightBackground}" />
                                        <Setter Property="Cursor" Value="Hand" />
                                    </MultiTrigger>
                                    <!--<Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{StaticResource SelectedItemBackground}" />
                                    </Trigger>-->
                                    <Trigger Property="IsMouseOver" Value="False">
                                        <Setter Property="Background" Value="Transparent" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                            <!--<ControlTemplate TargetType="{x:Type Button}">
                                <ContentPresenter />
                                <ControlTemplate.Triggers>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="True" />
                                            <Condition Property="IsSelected" Value="False"/>
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Background" Value="{StaticResource MarbleDarkPurpleButtonBackground}" />
                                    </MultiTrigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{StaticResource SelectedItemBackground}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>-->
                        </Setter.Value>
                    </Setter>
                </Style>
            </ItemsControl.Resources>
            <ItemsControl.Items>
                <!--<Button x:Name="buttonTestingView" Click="ButtonBase_OnClick" Height="30">
                    <StackPanel Orientation="Horizontal" Margin="2,5,5,5">
                        <Image Source="/MarbleLibrary;component/Images\test.set.icon.32x32.png" HorizontalAlignment="Left" VerticalAlignment="Center" Height="24" Width="24" Margin="0,0,2,0"/>
                        <StackPanel VerticalAlignment="Center">
                            <TextBlock Text="Testing" Typography.Capitals="SmallCaps" FontFamily="Calibri" FontSize="13pt" VerticalAlignment="Center">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Foreground" Value="{StaticResource MarbleMainMenuItemNotSelectedColor}" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ActiveView, UpdateSourceTrigger=PropertyChanged}" Value="TestLab">
                                                <Setter Property="Foreground" Value="{StaticResource MarbleMainMenuItemSelectedColor}" />
                                                <Setter Property="FontWeight" Value="Heavy" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                    </StackPanel>
                </Button>-->
                <customControls:MarbleMainMenuItem x:Name="buttonTestingView" LargeImageSource="/MarbleLibrary;component/Images\test.set.icon.32x32.png" Label="Testing"
                                         Click="ButtonBase_OnClick" Height="30" FontSize="14pt"
                                         SmallImageSource="/MarbleLibrary;component/Images\new.document.icon.16x16.png"
                                         IsEnabled="True" Margin="2,1,2,1"
                                         ToolTipTitle="Testing"
                                         ToolTipDescription="Changes view to testing."
                                         >
                    <customControls:MarbleMainMenuItem.Style>
                        <Style TargetType="{x:Type customControls:MarbleMainMenuItem}" BasedOn="{StaticResource {x:Type customControls:MarbleMainMenuItem}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ActiveView, UpdateSourceTrigger=PropertyChanged}" Value="TestLab">
                                    <Setter Property="IsSelected" Value="True" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </customControls:MarbleMainMenuItem.Style>
                </customControls:MarbleMainMenuItem>
                <customControls:MarbleMainMenuItem x:Name="buttonResultsView" LargeImageSource="/MarbleLibrary;component/Images\report.icon.32x32.png" Label="Results"
                                         Click="ButtonBase_OnClick" Height="30" FontSize="14pt"
                                         SmallImageSource="/MarbleLibrary;component/Images\report.icon.16x16.png"
                                         IsEnabled="True" Margin="2,1,2,1"
                                         ToolTipTitle="Results"
                                         ToolTipDescription="Changes view to results."
                                         >
                    <customControls:MarbleMainMenuItem.Style>
                        <Style TargetType="{x:Type customControls:MarbleMainMenuItem}" BasedOn="{StaticResource {x:Type customControls:MarbleMainMenuItem}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ActiveView, UpdateSourceTrigger=PropertyChanged}" Value="TestReports">
                                    <Setter Property="IsSelected" Value="True" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </customControls:MarbleMainMenuItem.Style>
                </customControls:MarbleMainMenuItem>
                <!--<Button x:Name="buttonResultsView" Click="ButtonBase_OnClick">
                    <StackPanel Orientation="Horizontal" Margin="2,5,5,5">
                        <Image Source="/MarbleLibrary;component/Images\report.icon.32x32.png" HorizontalAlignment="Left" VerticalAlignment="Center" Height="24" Width="24" Margin="0,0,2,0"/>
                        <StackPanel VerticalAlignment="Center">
                            <TextBlock Text="Results" Typography.Capitals="SmallCaps" FontFamily="Calibri" FontSize="13pt" VerticalAlignment="Center">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Foreground" Value="{StaticResource MarbleMainMenuItemNotSelectedColor}" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ActiveView, UpdateSourceTrigger=PropertyChanged}" Value="TestReports">
                                                <Setter Property="Foreground" Value="{StaticResource MarbleMainMenuItemSelectedColor}" />
                                                <Setter Property="FontWeight" Value="Heavy" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                    </StackPanel>
                </Button>-->
                <customControls:MarbleMainMenuItem x:Name="btnNewTestSet" LargeImageSource="/MarbleLibrary;component/Images\new.document.icon.32x32.png" Label="New" 
                                         SmallImageSource="/MarbleLibrary;component/Images\new.document.icon.16x16.png"
                                         IsEnabled="True" Margin="2,1,2,1"
                                         ToolTipTitle="Create new testset file"
                                         ToolTipDescription="Creates a new empty testset file."
                                         Command="{Binding NewTestsetFileCommand}" />
                    <customControls:MarbleMainMenuItem x:Name="btnNewTestRun" LargeImageSource="/MarbleLibrary;component/Images\new.run.icon.32x32.png" Label="New Run" 
                                         SmallImageSource="/MarbleLibrary;component/Images\new.run.icon.16x16.png"
                                         IsEnabled="True" Margin="2,1,2,1"
                                         ToolTipTitle="Start new test run"
                                         ToolTipDescription="Creates new testset without results from the current test set."
                                         Command="{Binding NewTestRunCommand}" />
                    <customControls:MarbleMainMenuItem LargeImageSource="/MarbleLibrary;component/Images\open.file.icon2.32x32.png" Label="Open" 
                                         SmallImageSource="/MarbleLibrary;component/Images\open.file.icon2.16x16.png"
                                         Margin="2,1,2,1"
                                         ToolTipTitle="Open a testset or a script file" 
                                         ToolTipDescription="Opens an existing .testset or .py file."
                                         Command="{Binding OpenTestsetFileCommand}" />
                <customControls:MarbleMainMenuItem x:Name="btnSaveTestSet" LargeImageSource="/MarbleLibrary;component/Images\save.icon.32x32.png"
                                        SmallImageSource="/MarbleLibrary;component/Images\save.icon.16x16.png"
                                        Label="Save" Margin="2,1,2,1"
                                        ToolTipTitle="Save changes to testset" 
                                        ToolTipDescription="Saves changes to currently open testset file."
                                        Command="{Binding SaveTestsetFileCommand}" />
                <customControls:MarbleMainMenuItem x:Name="btnSaveTestSetAs" LargeImageSource="/MarbleLibrary;component/Images\save.as.icon2.32x32.png"
                                        SmallImageSource="/MarbleLibrary;component/Images\save.icon.16x16.png"
                                        Label="Save As" Margin="2,1,2,1"
                                        ToolTipTitle="Save testset to another location" 
                                        ToolTipDescription="Copies currently open testset to a new location.&#x0a;NOTE: All result files are also copied to the new location."
                                        Command="{Binding SaveAsTestsetFileCommand}" >
                    <customControls:MarbleMainMenuItem.CommandParameter>
                        <sys:Boolean>False</sys:Boolean>
                    </customControls:MarbleMainMenuItem.CommandParameter>
                </customControls:MarbleMainMenuItem>
                <!--<customControls:MarbleMainMenuItem x:Name="btnSaveTestSetAsForCi" LargeImageSource="/MarbleLibrary;component/Images\save.icon.32x32.png"
                                        SmallImageSource="/MarbleLibrary;component/Images\save.icon.16x16.png"
                                        Label="Save" Margin="2,2,2,2"
                                        ToolTipTitle="Save changes to testset" 
                                        ToolTipDescription="Saves changes to currently open testset file."
                                        Command="{Binding SaveAsTestsetFileCommand}" >
                    <customControls:MarbleMainMenuItem.CommandParameter>
                        <sys:Boolean>True</sys:Boolean>
                    </customControls:MarbleMainMenuItem.CommandParameter>
                </customControls:MarbleMainMenuItem>-->
                <!--<customControls:MarbleMainMenuItem x:Name="btnConnection" LargeImageSource="{Binding FuseClient.MainConnection, Converter={converters:ConnectorConnectionsToImageConverter}}"
                                         SmallImageSource="{Binding FuseClient.MainConnection, Converter={converters:ConnectorConnectionsToImageConverter}}"
                                         Label="Connect" Margin="2,2,2,2"
                                         ToolTipTitle="Show connection selector"
                                         ToolTipDescription="Here you can change to a different connection or open Fuse for modifying connections."
                                         Command="{Binding ShowConnectionWindowCommand}" />-->
                <!--<customControls:MarbleMainMenuItem x:Name="btnSim" LargeImageSource="/MarbleLibrary;component/Images\sim.icon.32x32.png" Label="SIM" IsEnabled="True" 
                                         SmallImageSource="/MarbleLibrary;component/Images\sim.icon2.16x16.png"
                                         Margin="2,2,2,2"
                                         ToolTipTitle="Show SIM records" 
                                         ToolTipDescription="Here you can view and modify SIM records."
                                         Command="{Binding OpenSimManager}" />-->
                <customControls:MarbleMainMenuItem x:Name="btnScriptEditor" LargeImageSource="/MarbleLibrary;component/Images\iron.python.code.icon.64x64.png"
                                        SmallImageSource="/MarbleLibrary;component/Images\iron.python.code.icon.64x64.png"
                                        Label="Script Editor" Margin="2,1,2,1"
                                        ToolTipTitle="Script Editor" 
                                        ToolTipDescription="Opens Marble script editor for selected test set."
                                        Command="{Binding Source={x:Static Application.Current}, Path=ViewModel.EditSelectedTestCommand, UpdateSourceTrigger=PropertyChanged}" />
                <customControls:MarbleMainMenuItem x:Name="btnExecutor" LargeImageSource="/MarbleLibrary;component/Images\output.icon.32x32.png"
                                         SmallImageSource="/MarbleLibrary;component/Images\output.icon.32x32.png"
                                         Label="Output" Margin="2,1,2,1"
                                         ToolTipTitle="Show Output" 
                                         ToolTipDescription="Here you can view the framework and trace logs."
                                         Command="{Binding ShowExecutorWindowCommand}" />
                <!-- BlackBox icon disabled when using Netduino based HW or no IoWarrior based HW detected -->
                <customControls:MarbleMainMenuItem x:Name="buttonInit" LargeImageSource="/MarbleLibrary;component/Images\blackbox.icon.32x32.png"
                                         SmallImageSource="/MarbleLibrary;component/Images\blackbox.icon.15x16.png"
                                         Label="Blackbox" Margin="2,1,2,1"
                                         ToolTipTitle="Open Blackbox Settings" 
                                         ToolTipDescription="Opens blackbox settings. Blackbox is initiliazed in here."
                                         Command="{Binding CmdInitBlackbox}" 
                                         Visibility="{Binding Path=IsIoWarriorHWForBlackBoxAvailable, Converter={Converters:BoolToVisibilityCollapsedConverter}, UpdateSourceTrigger=PropertyChanged}" />
                <customControls:MarbleMainMenuItem x:Name="buttonSettings" LargeImageSource="/MarbleLibrary;component/Images\settings.icon.32x32.png"
                                         SmallImageSource="/MarbleLibrary;component/Images\settings.icon.32x32.png"
                                         Label="Settings" Margin="2,1,2,1"
                                         ToolTipTitle="Open Settings" 
                                         ToolTipDescription="Opens settings." 
                                         Command="{Binding OpenSettings}" />

                <TextBlock Text="TOOLS" Style="{StaticResource MarbleMainMenuTextBlockGroup}" />

                <customControls:MarbleMainMenuItem x:Name="btnCapture" LargeImageSource="/MarbleLibrary;component/Images\screen.capture.icon.32x32.png" Margin="2,1,2,1"
                                         SmallImageSource="/MarbleLibrary;component/Images\screen.capture.icon.32x32.png"
                                         Label="Scripting" 
                                         ToolTipTitle="Open scripting tool" 
                                         ToolTipDescription="Here you can create scripts using screen captures from product."
                                         Command="{Binding ShowCaptureToolCommand}" />
                <customControls:MarbleMainMenuItem x:Name="btnMarbleWiki" LargeImageSource="/MarbleLibrary;component/Images\no.resolution.circle.icon.32x32.png" Margin="2,1,2,1"
                                         SmallImageSource="/MarbleLibrary;component/Images\no.resolution.circle.icon.32x32.png"
                                         Label="Wiki"
                                         ToolTipTitle="Open Marble Wiki" 
                                         ToolTipDescription="Opens Marble Wiki."
                                         Command="{Binding OpenMarbleWikiCommand}" Visibility="Collapsed"/>

                <TextBlock Text="ADVANCED" Style="{StaticResource MarbleMainMenuTextBlockGroup}" />
                
                <customControls:MarbleMainMenuToggleItem x:Name="btnCurrentMeasurement" LargeImageSource="/MarbleLibrary;component/Images\current.measurement.icon.32x32.png" Margin="2,1,2,1"
                                         SmallImageSource="/MarbleLibrary;component/Images\screen.capture.icon.32x32.png"
                                         Label="Measurement" 
                                         Command="{Binding CmdInitBltUe}" 
                                         IsChecked="{Binding IsBltUeTestingEnabledForTestrun, UpdateSourceTrigger=PropertyChanged}"
                                         Visibility="Visible">
                    <customControls:MarbleMainMenuToggleItem.Style>
                        <Style TargetType="{x:Type customControls:MarbleMainMenuToggleItem}" BasedOn="{StaticResource {x:Type customControls:MarbleMainMenuToggleItem}}">
                            <Setter Property="ToolTipTitle" Value="Enable Current Measurement" />
                            <Setter Property="ToolTipDescription" Value="Enables current measurement for testing (currently disabled)." />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsBltUeTestingEnabledForTestrun, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="ToolTipTitle" Value="Disable Current Measurement" />
                                    <Setter Property="ToolTipDescription" Value="Disables current measurement for testing (currently enabled)." />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </customControls:MarbleMainMenuToggleItem.Style>
                </customControls:MarbleMainMenuToggleItem>


                    <customControls:MarbleMainMenuItem x:Name="btnGenerateLeaderFollowerReportFromCurrentResults" LargeImageSource="/MarbleLibrary;component/Images\test.set.exporting.icon.32x32.png" Margin="2,1,2,1"
                                         SmallImageSource="/MarbleLibrary;component/Images\test.set.exporting.icon.32x32.png"
                                         Label="Current LF" 
                                         ToolTipTitle="Open Leader Follower Report from Current Results" 
                                         ToolTipDescription="Creates and opens Leader Follower report from current results."
                                         Command="{Binding GenerateLeaderFollowerReportFromCurrentResultsCommand}" 
                                         Visibility="{Binding ElementName=btnGenerateLeaderFollowerReportFromCurrentResults, Path=IsEnabled, Converter={Converters:BoolToVisibilityCollapsedConverter}, UpdateSourceTrigger=PropertyChanged}"/>
                    <customControls:MarbleMainMenuItem x:Name="btnGenerateLeaderFollowerReportFromExistingResults" LargeImageSource="/MarbleLibrary;component/Images\test.set.exporting.icon.32x32.png" Margin="2,1,2,1"
                                         SmallImageSource="/MarbleLibrary;component/Images\test.set.exporting.icon.32x32.png"
                                         Label="Open LF Report..." 
                                         ToolTipTitle="Open Leader Follower Report from Existing Results" 
                                         ToolTipDescription="Opens file dialog, creates and opens Leader Follower report from selected results."
                                         Command="{Binding GenerateLeaderFollowerReportFromExistingResultsCommand}" 
                                         Visibility="{Binding ElementName=btnGenerateLeaderFollowerReportFromExistingResults, Path=IsEnabled, Converter={Converters:BoolToVisibilityCollapsedConverter}, UpdateSourceTrigger=PropertyChanged}"/>

                    <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="MAIN DEVICES" Style="{StaticResource MarbleMainMenuTextBlockGroup}" ToolTip="Lists devices that can be used as a main phone."/>
                    <Button Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="5 5 4 0" Command="{Binding Path=UpdateDevicesCommand}"
                            ToolTip="{Binding Source={x:Static Application.Current}, Path=ViewModel.DeviceCollection.TooltipText}" ToolTipService.ShowDuration="10000">
                        <Image Source="/MarbleLibrary;component/Images\load.arrow.icon.16x16.png" Width="16"/>
                    </Button>
                </Grid>
                <!--
                <StackPanel Orientation="Horizontal">
                    <customControls:MarbleMainMenuItem Margin="2,1,2,1" Label="Error" LargeImageSource="/MarbleLibrary;component/Images\error.icon.32x32.png"
                                                       ToolTipTitle="Error info" ToolTipDescription="{Binding Path=ViewModel.DeviceCollection.ErrorDescription}">
                    </customControls:MarbleMainMenuItem>
                    <ToggleButton IsHitTestVisible="{Binding ElementName=popupDetails, Path=IsOpen, Mode=OneWay, Converter={Converters:InvertBoolValueConverter}}" BorderBrush="Transparent" Background="Transparent">
                        <StackPanel>
                            <TextBlock Text=">" />
                            <Popup x:Name="popupDetails" IsOpen="{Binding RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}, Path=IsChecked}"
                                AllowsTransparency="True" StaysOpen="False" PlacementTarget="{Binding RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}}" Placement="Right" HorizontalOffset="5" PopupAnimation="Fade">
                                <StackPanel>
                                    <TextBlock Text="TESTAUS" />
                                    <TextBlock Text="{Binding Path=ViewModel.DeviceCollection.ErrorException}" />
                                </StackPanel>
                            </Popup>
                        </StackPanel>
                    </ToggleButton>
                </StackPanel>
                -->
                <ItemsControl ItemsSource="{Binding Source={x:Static Application.Current}, Path=ViewModel.DeviceCollection}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <customControls:MarbleMainDeviceItem Label="{Binding Path=SerialNumber}" ToolTipTitle="{Binding Path=ProductModel}" IsSelected="{Binding Path=IsMain, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                                 DisableLockScreenCommand="{Binding Source={x:Static Application.Current}, Path=ViewModel.DisableLockScreen}" MainIndex="{Binding Path=MainIndex}"
                                                                 State="{Binding Path=State}">
                                <customControls:MarbleMainDeviceItem.ToolTipDescription>
                                    <MultiBinding StringFormat="{}State: {0}&#x0a;SWVersion: {1}&#x0a;BuildDate: {2}&#x0a;HWType: {3}&#x0a;HWID: {4}&#x0a;IMEI1: {5}&#x0a;IMEI2: {6}&#x0a;PlatformVersion: {7}&#x0a;SdkVersion: {8}">
                                        <Binding Path="State"></Binding>
                                        <Binding Path="SWVersion"></Binding>
                                        <Binding Path="SWBuildDate"></Binding>
                                        <Binding Path="HWType"></Binding>
                                        <Binding Path="HWVersion"></Binding>
                                        <Binding Path="IMEI1"></Binding>
                                        <Binding Path="IMEI2"></Binding>
                                        <Binding Path="PlatformVersion"></Binding>
                                        <Binding Path="SdkVersion"></Binding>
                                    </MultiBinding>
                                </customControls:MarbleMainDeviceItem.ToolTipDescription>
                            </customControls:MarbleMainDeviceItem>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
                <TextBlock Text="FUSE DEVICES" Style="{StaticResource MarbleMainMenuTextBlockGroup}" ToolTip="Lists devices that can be used as a remote phone."/>
                <ItemsControl ItemsSource="{Binding Source={x:Static Application.Current}, Path=ViewModel.FuseClient.ConnectedProducts}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <customControls:MarbleMainMenuItem Margin="2,1,2,1" Label="{Binding Path=Connection.Name}" LargeImageSource="/MarbleLibrary;component/Images\phone.icon.32x32.png"
                                                                   ToolTipTitle="{Binding Path=Version.RMCode}">
                                    <customControls:MarbleMainMenuItem.ToolTipDescription>
                                        <MultiBinding StringFormat="{}SWVersion: {0}&#x0a;BuildDate: {1}&#x0a;IMEI1: {2}">
                                            <Binding Path="Version.VersionString"></Binding>
                                            <Binding Path="Version.Date"></Binding>
                                            <Binding Path="ProductImei"></Binding>
                                        </MultiBinding>
                                    </customControls:MarbleMainMenuItem.ToolTipDescription>
                                </customControls:MarbleMainMenuItem>
                                <CheckBox IsChecked="{Binding Path=IsRemote, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" Margin="5 0"></CheckBox>
                            </StackPanel>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>

            </ItemsControl.Items>
        </ItemsControl>
        
        <!-- This Grid will show the appropriate views. -->
        <Grid x:Name="ViewGrid" />

    </DockPanel>
        
    </Grid>
</Window>