<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Templates="clr-namespace:Marble.Templates"
                    xmlns:Converters="clr-namespace:MarbleLibrary.Converters;assembly=MarbleLibrary"
                    xmlns:Views="clr-namespace:Marble.Views" xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:customControls="clr-namespace:MarbleLibrary.CustomControls;assembly=MarbleLibrary">

    <!-- [ TEST STEP DATA TEMPLATES ]-->

    <DataTemplate x:Key="testReportTestStepGenericTemplate">
        <StackPanel>

            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{Binding Path=Id}" Foreground="Black" />
                <TextBlock Text=". " Foreground="Black" />
                <TextBlock Text="{Binding Path=Name}" Foreground="Black" />
            </StackPanel>

            <TextBlock Text="{Binding Path=Text}" Foreground="DarkGray" Margin="10,0,0,0" TextWrapping="Wrap" MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}" />
        </StackPanel>
    </DataTemplate>

    <!--<local:TestCaseItemDataTemplateSelector x:Key="testCaseItemDataTemplateSelector"
                                                    GenericTestCaseItemTemplate="{StaticResource testCaseReportItemGenericTemplate}"
                                                    CommentTestCaseItemTemplate="{StaticResource testCaseReportItemCommentTemplate}"
                                                    DescriptionTestCaseItemTemplate="{StaticResource testCaseReportItemDescriptionTemplate}"
                                                    ErrorTestCaseItemTemplate="{StaticResource testCaseReportItemErrorTemplate}"
                                                    SummaryTestCaseItemTemplate="{StaticResource testCaseReportItemSummaryTemplate}"
                                                    TestStepTestCaseItemTemplate="{StaticResource testCaseReportItemTestStepTemplate}"
                                                    UnknownTestCaseItemTemplate="{StaticResource testCaseReportItemGenericTemplate}"
                                                    />-->

    <Templates:TestReportTestStepDataTemplateSelector x:Key="testReportTestStepDataTemplateSelector"
                                                      GenericTestStepTemplate="{StaticResource testReportTestStepGenericTemplate}"
                                                      />

    <DataTemplate x:Key="testCaseReportSummaryTemplate">
        <StackPanel x:Name="rootStackPanelSummary" Orientation="Vertical">
            <StackPanel.Style>
                <Style TargetType="{x:Type StackPanel}" >
                    <Setter Property="MaxWidth" Value="600"/>
                    <Setter Property="Width" Value="600"/>
                    <Style.Triggers>
                        <!-- Prevents binding errors caused by virtualization. -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBox, AncestorLevel=1}, Converter={Converters:IsNullConverter}}" Value="False">
                            <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox, AncestorLevel=1}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-50}"/>
                            <Setter Property="MaxWidth" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox, AncestorLevel=1}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-50}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </StackPanel.Style>

            <!--[ TEST REPORT RESULT]-->
            <Grid Grid.Row="0" x:Name="stackPanelTestReportResult" HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <Border Width="{Binding ElementName=rootStackPanelSummary, Path=ActualWidth}" Grid.ColumnSpan="99" CornerRadius="5">
                    <Border.Style>
                        <Style TargetType="{x:Type Border}">
                            <Setter Property="Background" Value="{StaticResource MarbleDataGridCellFailedBackground}" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=TestReport.Result}" Value="Passed">
                                    <Setter Property="Background" Value="{StaticResource MarbleDataGridCellPassedBackground}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=TestReport.Result}" Value="NoResult">
                                    <Setter Property="Background" Value="{StaticResource MarbleDataGridCellUnresolvedBackground}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>
                    <StackPanel Orientation="Horizontal">
                        <Image Height="32" Width="32" Margin="5">
                            <Image.Style>
                                <Style TargetType="{x:Type Image}">
                                    <Setter Property="Source" Value="/MarbleLibrary;component/Images/failed.circle.icon.32x32.png" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=TestReport.Result}" Value="Passed">
                                            <Setter Property="Source" Value="/MarbleLibrary;component/Images/passed.circle.icon.32x32.png" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=TestReport.Result}" Value="NoResult">
                                            <Setter Property="Source" Value="/MarbleLibrary;component/Images/no.resolution.circle.icon.32x32.png" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                        <TextBlock Text="{Binding Path=TestReport.Result}" Margin="5" FontSize="30" HorizontalAlignment="Stretch" FontFamily="Calibri" Typography.Capitals="SmallCaps" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Panel.ZIndex="99">
                            <TextBlock.Effect>
                                <DropShadowEffect BlurRadius="5" Direction="0" ShadowDepth="0" Color="Black" />
                            </TextBlock.Effect>
                        </TextBlock>

                    </StackPanel>
                </Border>

                <Border Grid.Column="1" Background="#99000000" Height="30" CornerRadius="5">
                    <Border.ToolTip>
                        <customControls:MarbleToolTip ToolTipTitle="Testing Time Info"
                                                  ToolTipDescription="">
                            <customControls:MarbleToolTip.Content>
                                <StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock Text="Start Time:" Width="100" />
                                        <TextBlock Text="{Binding Path=TestReport.TestCaseReport.StartTime, StringFormat={}{0:yyyy'.'MM'.'dd HH':'mm':'ss}, Mode=OneWay}" />
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock Text="End Time:" Width="100" />
                                        <TextBlock Text="{Binding Path=TestReport.TestCaseReport.EndTime, StringFormat={}{0:yyyy'.'MM'.'dd HH':'mm':'ss}, Mode=OneWay}" />
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock Text="Duration:" Width="100" />
                                        <TextBlock Text="{Binding Path=TestReport.TestCaseReport.Duration, StringFormat={}{0:hh\\:mm\\:ss}, Mode=OneWay}" />
                                    </StackPanel>
                                </StackPanel>
                            </customControls:MarbleToolTip.Content>
                        </customControls:MarbleToolTip>
                    </Border.ToolTip>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="/MarbleLibrary;component/Images/start.start.icon.16x16.png" Height="16" Width="16" VerticalAlignment="Center" Margin="10,0,0,0" />
                        <TextBlock Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.TestCaseReport.StartTime, StringFormat={}{0:yyyy'.'MM'.'dd HH':'mm':'ss}, Mode=OneWay}" VerticalAlignment="Center" Margin="5,0,10,0">
                            <TextBlock.Effect>
                                <DropShadowEffect BlurRadius="2" Direction="0" ShadowDepth="0" Color="Black" />
                            </TextBlock.Effect>
                        </TextBlock>
                    </StackPanel>
                </Border>

                <ToggleButton Grid.Column="2" x:Name="toggleButtonProductPopup" Margin="10,5,10,5" Content="Show Info" Width="80"
                              IsHitTestVisible="{Binding ElementName=popupProductInfo, Path=IsOpen, Mode=OneWay, Converter={Converters:InvertBoolValueConverter}}" Background="{StaticResource MarbleDarkPurpleButtonBackground}">
                </ToggleButton>

            </Grid>

            <Popup x:Name="popupProductInfo" IsOpen="{Binding IsChecked, ElementName=toggleButtonProductPopup}"  StaysOpen="False" AllowsTransparency="True">
                <Border CornerRadius="5" BorderBrush="{StaticResource MarbleYellowHighlight}" BorderThickness="2" Background="{StaticResource MarbleDarkPurleBackgroundGradient}" Opacity="0.9">
                    <!-- [ PRODUCT ]-->
                    <Grid Margin="5">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="150" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <StackPanel Grid.Row="0" Orientation="Horizontal">
                            <StackPanel.Style>
                                <Style TargetType="{x:Type StackPanel}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=TestReport.Author}" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=TestReport.Author}" Value="{x:Static system:String.Empty}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <TextBlock Width="150" Grid.Row="0" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="Author" />
                            <TextBlock Grid.Row="0" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.Author}" />
                        </StackPanel>

                        <StackPanel Grid.Row="1" Orientation="Horizontal">
                            <StackPanel.Style>
                                <Style TargetType="{x:Type StackPanel}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=TestReport.TestGroupFilter}" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=TestReport.TestGroupFilter}" Value="{x:Static system:String.Empty}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <TextBlock Width="150" Grid.Row="1" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="Test Group Filter" />
                            <TextBlock Grid.Row="1" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.TestGroupFilter}" />
                        </StackPanel>

                        <StackPanel Grid.Row="2" Orientation="Horizontal">
                            <StackPanel.Style>
                                <Style TargetType="{x:Type StackPanel}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=TestReport.StartTime}" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=TestReport.StartTime}" Value="{x:Static system:String.Empty}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <TextBlock Width="150" Grid.Row="2" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="Test Start Time" />
                            <TextBlock Grid.Row="2" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.StartTime}" />
                        </StackPanel>

                        <StackPanel Grid.Row="3" Orientation="Horizontal">
                            <StackPanel.Style>
                                <Style TargetType="{x:Type StackPanel}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=TestReport.Summary}" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=TestReport.Summary}" Value="{x:Static system:String.Empty}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=TestReport.Summary}" Value="N/A">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                            <TextBlock Width="150" Grid.Row="3" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="Summary" />
                            <TextBlock Grid.Row="3" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.Summary}" />
                        </StackPanel>

                        <TextBlock Grid.Row="4" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="Name" />
                        <TextBlock Grid.Row="4" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.TestReportProduct.Name}" />

                        <TextBlock Grid.Row="5" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="Main Display" />
                        <TextBlock Grid.Row="5" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.TestReportProduct.MainDisplay}" />

                        <TextBlock Grid.Row="6" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="IMEI" />
                        <TextBlock Grid.Row="6" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.TestReportProduct.Imei}" />

                        <TextBlock Grid.Row="7" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="Software Version" />
                        <TextBlock Grid.Row="7" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.TestReportProduct.SoftwareVersion}" />

                        <TextBlock Grid.Row="8" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="Hardware Version" />
                        <TextBlock Grid.Row="8" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.TestReportProduct.HardwareVersion}" />

                        <TextBlock Grid.Row="9" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="Marble Server Version" />
                        <TextBlock Grid.Row="9" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.TestReportProduct.MarbleServerVersion}" />


                        <TextBlock Grid.Row="10" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="Result" />
                        <TextBlock Grid.Row="10" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.TestCaseReport.Result}" />

                        <TextBlock Grid.Row="11" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="ID" />
                        <TextBlock Grid.Row="11" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.TestCaseReport.Id}" />

                        <TextBlock Grid.Row="12" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="Type" />
                        <TextBlock Grid.Row="12" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.TestCaseReport.TestCaseType}" />

                        <TextBlock Grid.Row="13" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="Start Time" />
                        <TextBlock Grid.Row="13" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.TestCaseReport.StartTime}" />
                        
                        <TextBlock Grid.Row="14" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="End Time" />
                        <TextBlock Grid.Row="14" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.TestCaseReport.EndTime}" />

                        <TextBlock Grid.Row="15" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="Duration" />
                        <TextBlock Grid.Row="15" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.TestCaseReport.Duration}" />

                        <TextBlock Grid.Row="16" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="Subarea" />
                        <TextBlock Grid.Row="16" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.TestCaseReport.Subarea}" />

                        <TextBlock Grid.Row="17" Grid.Column="0" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="Feature" />
                        <TextBlock Grid.Row="17" Grid.Column="1" Foreground="{StaticResource MarbleNormalTextColorOnDarkBackground}" Text="{Binding Path=TestReport.TestCaseReport.Feature}" />
                    </Grid>
                </Border>
            </Popup>

        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="testCaseReportItemGenericTemplate">
        <StackPanel Orientation="Horizontal">

            <TextBlock Text="{Binding Path=ItemType}" Width="100" FontFamily="Calibri" Typography.Capitals="SmallCaps" FontSize="11pt" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}"
                       ToolTip="{Binding Path=TimeStamp}" Visibility="{Binding Path=TimeStamp, Converter={Converters:DateTimeToVisibilityHiddenConverter}}"/>

            <TextBlock Grid.Column="1" Text="{Binding Path=Text}" Foreground="DodgerBlue" TextWrapping="Wrap" MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}"/>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="testCaseReportItemCommentTemplate">
        <StackPanel Orientation="Horizontal">

            <StackPanel Orientation="Horizontal" Width="100">
                <Image Source="/MarbleLibrary;component/Images/comment.light.icon.16x16.png" Height="16" Width="16" Margin="0,1,5,1" VerticalAlignment="Top" ToolTip="{Binding Path=ItemType}"/>
                <TextBlock Text="{Binding Path=TimeStamp, StringFormat={}{0:HH':'mm':'ss'.'fff}, Mode=OneTime}" Typography.Capitals="SmallCaps" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}"
                           ToolTip="{Binding Path=TimeStamp}" Visibility="{Binding Path=TimeStamp, Converter={Converters:DateTimeToVisibilityHiddenConverter}}"/>
            </StackPanel>

            <!--<TextBlock Text="{Binding Path=Text}" Foreground="Black" TextWrapping="Wrap">
                <TextBlock.Style>
                    <Style TargetType="{x:Type TextBlock}">
                        <Setter Property="MaxWidth" Value="600"/>
                        <Style.Triggers>-->
            <!-- Prevents binding errors caused by virtualization. -->
            <!--<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBox, AncestorLevel=1}, Converter={Converters:IsNullConverter}}" Value="False">
                                <Setter Property="MaxWidth" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox, AncestorLevel=1}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>-->

            <TextBlock Text="{Binding Path=Text}" Foreground="Black" TextWrapping="Wrap">
                <TextBlock.Style>
                    <Style TargetType="{x:Type TextBlock}">
                        <Setter Property="MaxWidth" Value="600"/>
                        <Style.Triggers>
                            <!-- Prevents binding errors caused by virtualization. -->
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={Converters:IsNullConverter}}" Value="False">
                                <Setter Property="MaxWidth" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>

            <!--<TextBlock Text="{Binding Path=Text}" Foreground="Black" TextWrapping="Wrap" MaxWidth="{Binding RelativeSource={RelativeSource AncestorType=ListBox, AncestorLevel=1}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}"/>-->
            <!--<TextBlock Text="{Binding Path=Text}" Foreground="Black" TextWrapping="Wrap" MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}, AncestorLevel=2}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}"/>
            <TextBlock Text="{Binding Path=Text}" Foreground="Black" TextWrapping="Wrap" MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}, AncestorLevel=3}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}"/>
            <TextBlock Text="{Binding Path=Text}" Foreground="Black" TextWrapping="Wrap" MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}, AncestorLevel=4}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}"/>
            <TextBlock Text="{Binding Path=Text}" Foreground="Black" TextWrapping="Wrap" MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}, AncestorLevel=5}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}"/>
            <TextBlock Text="{Binding Path=Text}" Foreground="Black" TextWrapping="Wrap" MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}, AncestorLevel=6}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}"/>
            <TextBlock Text="{Binding Path=Text}" Foreground="Black" TextWrapping="Wrap" MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}, AncestorLevel=7}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}"/>
            <TextBlock Text="{Binding Path=Text}" Foreground="Black" TextWrapping="Wrap" MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}, AncestorLevel=8}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}"/>
            <TextBlock Text="{Binding Path=Text}" Foreground="Black" TextWrapping="Wrap" MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}, AncestorLevel=9}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}"/>
            <TextBlock Text="{Binding Path=Text}" Foreground="Black" TextWrapping="Wrap" MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}, AncestorLevel=10}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}"/>-->
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="testCaseReportItemDescriptionTemplate">
        <Border CornerRadius="5" Margin="0,5,0,5">
            <Border.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="Khaki" Offset="0" />
                        <GradientStop Color="LightYellow" Offset="1" />
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Border.Background>

            <StackPanel Orientation="Horizontal" Margin="0,5,0,5">

                <StackPanel Orientation="Horizontal" Width="100">
                    <Image Source="/MarbleLibrary;component/Images/comment.icon.16x16.png" Height="16" Width="16" Margin="0,1,5,1" VerticalAlignment="Top" ToolTip="{Binding Path=ItemType}"/>
                    <TextBlock Text="{Binding Path=TimeStamp, StringFormat={}{0:HH':'mm':'ss'.'fff}, Mode=OneTime}" FontFamily="Calibri" Typography.Capitals="SmallCaps" FontSize="11pt" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}" 
                               ToolTip="{Binding Path=TimeStamp}" Visibility="{Binding Path=TimeStamp, Converter={Converters:DateTimeToVisibilityHiddenConverter}}"/>
                </StackPanel>

                <StackPanel MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}">
                    <TextBlock Text="{Binding Path=Title}" Foreground="Black">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Title}" Value="(not defined)">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <TextBlock Text="{Binding Path=Text}" Foreground="Purple" TextWrapping="Wrap"/>
                </StackPanel>
            </StackPanel>

        </Border>
    </DataTemplate>

    <DataTemplate x:Key="testCaseReportItemSummaryTemplate">
        <StackPanel Orientation="Horizontal">

            <StackPanel Orientation="Horizontal" Width="100">
                <Image Source="/MarbleLibrary;component/Images/empty.report.icon.16x16.png" Height="16" Width="16" Margin="0,1,5,1" VerticalAlignment="Top" ToolTip="{Binding Path=ItemType}"/>
                <TextBlock Text="{Binding Path=TimeStamp, StringFormat={}{0:HH':'mm':'ss'.'fff}, Mode=OneTime}" FontFamily="Calibri" Typography.Capitals="SmallCaps" FontSize="11pt" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}" 
                           ToolTip="{Binding Path=TimeStamp}" Visibility="{Binding Path=TimeStamp, Converter={Converters:DateTimeToVisibilityHiddenConverter}}"/>
            </StackPanel>

            <StackPanel>
                <Expander Header="Capture Element Table" Margin="0,5,0,0">
                    <Expander.Style>
                        <Style TargetType="{x:Type Expander}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=HasCaptureItemReport}" Value="True">
                                    <Setter Property="Visibility" Value="Visible" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=HasCaptureItemReport}" Value="False">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Expander.Style>
                    <DataGrid x:Name="dataGridElementTable" CanUserReorderColumns="True" CanUserAddRows="False" Margin="10" IsReadOnly="True"
                            HorizontalAlignment="Stretch" VerticalAlignment="Stretch" AutoGenerateColumns="False"
                            CanUserDeleteRows="False" SelectionUnit="FullRow" SelectionMode="Extended" GridLinesVisibility="None"
                            AlternatingRowBackground="AliceBlue" CanUserResizeRows="False">
                        <DataGrid.Style>
                            <Style TargetType="{x:Type DataGrid}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=HasCaptureItemReport}" Value="True">
                                        <Setter Property="DataContext" Value="{Binding}" />
                                        <Setter Property="ItemsSource" Value="{Binding Path=CaptureItemReport.DisplayElements, UpdateSourceTrigger=PropertyChanged}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=HasCaptureItemReport}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </DataGrid.Style>
                        <DataGrid.Resources>
                            <Style x:Key="DataGridTextBlockColumnElementDefaultStyle" TargetType="{x:Type TextBlock}">
                                <Setter Property="Padding" Value="3,0,3,0" />
                                <Setter Property="HorizontalAlignment" Value="Right" />
                            </Style>
                            <Style x:Key="DataGridTextBlockColumnElementForNumberStyle" TargetType="{x:Type TextBlock}">
                                <Setter Property="Padding" Value="3,0,3,0" />
                                <Setter Property="HorizontalAlignment" Value="Right" />
                            </Style>
                            <Style x:Key="DataGridCheckBoxColumnElementDefaultStyle"  TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
                                <Setter Property="HorizontalAlignment" Value="Center" />
                                <Setter Property="VerticalAlignment" Value="Center" />
                                <Setter Property="Margin" Value="1,1,1,1" />
                                <Setter Property="IsHitTestVisible" Value="False" />
                            </Style>
                        </DataGrid.Resources>
                        <DataGrid.Columns>
                            <!--<DataGridTextColumn Header="Type" SortMemberPath="Type" Binding="{Binding Type}" IsReadOnly="True"
                                                        ElementStyle="{StaticResource DataGridTextBlockColumnElementDefaultStyle}" />-->
                            <!--<DataGridTextColumn Header="Content" SortMemberPath="Content" Binding="{Binding Content}" IsReadOnly="True"
                                                        ElementStyle="{StaticResource DataGridTextBlockColumnElementDefaultStyle}" />-->
                            <DataGridTextColumn Header="Left" SortMemberPath="Rectangle.X" Binding="{Binding Rectangle.X}" IsReadOnly="True"
                                                        ElementStyle="{StaticResource DataGridTextBlockColumnElementForNumberStyle}" />
                            <DataGridTextColumn Header="Top" SortMemberPath="Rectangle.Y" Binding="{Binding Rectangle.Y}" IsReadOnly="True"
                                                        ElementStyle="{StaticResource DataGridTextBlockColumnElementForNumberStyle}" />
                            <DataGridTextColumn Header="Width" SortMemberPath="Rectangle.Width" Binding="{Binding Rectangle.Width}" IsReadOnly="True"
                                                        ElementStyle="{StaticResource DataGridTextBlockColumnElementForNumberStyle}" />
                            <DataGridTextColumn Header="Height" SortMemberPath="Rectangle.Height" Binding="{Binding Rectangle.Height}" IsReadOnly="True"
                                                        ElementStyle="{StaticResource DataGridTextBlockColumnElementForNumberStyle}" />
                            <DataGridTextColumn Header="Center X" SortMemberPath="Center.X" Binding="{Binding Center.X}" IsReadOnly="True"
                                                        ElementStyle="{StaticResource DataGridTextBlockColumnElementForNumberStyle}" />
                            <DataGridTextColumn Header="Center Y" SortMemberPath="Center.Y" Binding="{Binding Center.Y}" IsReadOnly="True"
                                                        ElementStyle="{StaticResource DataGridTextBlockColumnElementForNumberStyle}" />

                            <DataGridTextColumn Header="Index Tree" SortMemberPath="IndexTree" Binding="{Binding Path=IndexTree}" IsReadOnly="True" 
                                                        ElementStyle="{StaticResource DataGridTextBlockColumnElementForNumberStyle}"/>
                            <DataGridTextColumn Header="Text" SortMemberPath="Text" Binding="{Binding Path=Text}" IsReadOnly="True" />
                            <DataGridTextColumn Header="Resource ID" SortMemberPath="ResourceId" Binding="{Binding Path=ResourceId}" IsReadOnly="True" />
                            <DataGridTextColumn Header="Description" SortMemberPath="Description" Binding="{Binding Path=Description}" IsReadOnly="True" />
                            <DataGridTextColumn Header="Class" SortMemberPath="Class" Binding="{Binding Path=Class}" IsReadOnly="True" />
                            <DataGridTextColumn Header="Package" SortMemberPath="Package" Binding="{Binding Path=Package}" IsReadOnly="True" />

                            <DataGridCheckBoxColumn Header="Checkable" SortMemberPath="IsCheckable" Binding="{Binding Path=IsCheckable, Mode=OneWay}" IsReadOnly="True" IsThreeState="True">
                                <DataGridCheckBoxColumn.ElementStyle>
                                    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource DataGridCheckBoxColumnElementDefaultStyle}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=IsCheckable}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Hidden" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridCheckBoxColumn.ElementStyle>
                            </DataGridCheckBoxColumn>
                            <DataGridCheckBoxColumn Header="Checked" SortMemberPath="IsChecked" Binding="{Binding Path=IsChecked, Mode=OneWay}" IsReadOnly="True" IsThreeState="True">
                                <DataGridCheckBoxColumn.ElementStyle>
                                    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource DataGridCheckBoxColumnElementDefaultStyle}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=IsChecked}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Hidden" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridCheckBoxColumn.ElementStyle>
                            </DataGridCheckBoxColumn>
                            <DataGridCheckBoxColumn Header="Clickable" SortMemberPath="IsClickable" Binding="{Binding Path=IsClickable, Mode=OneWay}" IsReadOnly="True" IsThreeState="True">
                                <DataGridCheckBoxColumn.ElementStyle>
                                    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource DataGridCheckBoxColumnElementDefaultStyle}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=IsClickable}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Hidden" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridCheckBoxColumn.ElementStyle>
                            </DataGridCheckBoxColumn>
                            <DataGridCheckBoxColumn Header="Enabled" SortMemberPath="IsEnabled" Binding="{Binding Path=IsEnabled, Mode=OneWay}" IsReadOnly="True" IsThreeState="True">
                                <DataGridCheckBoxColumn.ElementStyle>
                                    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource DataGridCheckBoxColumnElementDefaultStyle}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=IsEnabled}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Hidden" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridCheckBoxColumn.ElementStyle>
                            </DataGridCheckBoxColumn>
                            <DataGridCheckBoxColumn Header="Focusable" SortMemberPath="IsFocusable" Binding="{Binding Path=IsFocusable, Mode=OneWay}" IsReadOnly="True" IsThreeState="True">
                                <DataGridCheckBoxColumn.ElementStyle>
                                    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource DataGridCheckBoxColumnElementDefaultStyle}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=IsFocusable}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Hidden" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridCheckBoxColumn.ElementStyle>
                            </DataGridCheckBoxColumn>
                            <DataGridCheckBoxColumn Header="Focused" SortMemberPath="IsFocused" Binding="{Binding Path=IsFocused, Mode=OneWay}" IsReadOnly="True" IsThreeState="True">
                                <DataGridCheckBoxColumn.ElementStyle>
                                    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource DataGridCheckBoxColumnElementDefaultStyle}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=IsFocused}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Hidden" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridCheckBoxColumn.ElementStyle>
                            </DataGridCheckBoxColumn>
                            <DataGridCheckBoxColumn Header="Scrollable" SortMemberPath="IsScrollable" Binding="{Binding Path=IsScrollable, Mode=OneWay}" IsReadOnly="True" IsThreeState="True">
                                <DataGridCheckBoxColumn.ElementStyle>
                                    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource DataGridCheckBoxColumnElementDefaultStyle}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=IsScrollable}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Hidden" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridCheckBoxColumn.ElementStyle>
                            </DataGridCheckBoxColumn>
                            <DataGridCheckBoxColumn Header="Long Clickable" SortMemberPath="IsLongClickable" Binding="{Binding Path=IsLongClickable, Mode=OneWay}" IsReadOnly="True" IsThreeState="True">
                                <DataGridCheckBoxColumn.ElementStyle>
                                    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource DataGridCheckBoxColumnElementDefaultStyle}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=IsLongClickable}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Hidden" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridCheckBoxColumn.ElementStyle>
                            </DataGridCheckBoxColumn>
                            <DataGridCheckBoxColumn Header="Password" SortMemberPath="IsPassword" Binding="{Binding Path=IsPassword, Mode=OneWay}" IsReadOnly="True" IsThreeState="True">
                                <DataGridCheckBoxColumn.ElementStyle>
                                    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource DataGridCheckBoxColumnElementDefaultStyle}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=IsPassword}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Hidden" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridCheckBoxColumn.ElementStyle>
                            </DataGridCheckBoxColumn>
                            <DataGridCheckBoxColumn Header="Selected" SortMemberPath="IsSelected" Binding="{Binding Path=IsSelected, Mode=OneWay}" IsReadOnly="True" IsThreeState="True">
                                <DataGridCheckBoxColumn.ElementStyle>
                                    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource DataGridCheckBoxColumnElementDefaultStyle}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=IsSelected}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Hidden" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridCheckBoxColumn.ElementStyle>
                            </DataGridCheckBoxColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </Expander>

                <Image SnapsToDevicePixels="True" UseLayoutRounding="False" RenderOptions.BitmapScalingMode="NearestNeighbor" Margin="0,0,1,0" HorizontalAlignment="Left">
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=HasCaptureItemReport}" Value="True">
                                    <Setter Property="Source" Value="{Binding Path=CaptureItemReport.CaptureBitmapImageSource}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=HasCaptureItemReport}" Value="False">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
                <TextBlock Foreground="DarkSlateGray" Margin="0,0,0,5" TextWrapping="Wrap">
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=HasCaptureItemReport}" Value="True">
                                    <Setter Property="Text" Value="{Binding Path=CaptureItemReport.CaptureBitmapFileName}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=HasCaptureItemReport}" Value="False">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="testCaseReportItemErrorTemplate">
        <Border CornerRadius="5" Margin="0,5,0,5" Background="{StaticResource MarbleDataGridCellErrorBackground}">

            <StackPanel Orientation="Horizontal" Margin="0,5,0,5">

                <StackPanel x:Name="stackPanelErrorHeader" Orientation="Horizontal" Width="100">
                    <Image Source="/MarbleLibrary;component/Images/error.icon.16x16.png" Height="16" Width="16" Margin="0,1,5,1" VerticalAlignment="Top" ToolTip="{Binding Path=ItemType}"/>
                    <TextBlock Text="{Binding Path=TimeStamp, StringFormat={}{0:HH':'mm':'ss'.'fff}, Mode=OneTime}" FontFamily="Calibri" Typography.Capitals="SmallCaps" FontSize="11pt" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}" 
                               ToolTip="{Binding Path=TimeStamp}" Visibility="{Binding Path=TimeStamp, Converter={Converters:DateTimeToVisibilityHiddenConverter}}"/>
                </StackPanel>

                <Expander Header="{Binding Path=Text}" MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}">
                    <TextBlock Text="{Binding Path=TraceBack}" Foreground="Black" TextWrapping="Wrap" 
                               MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}" />
                </Expander>
            </StackPanel>

        </Border>
    </DataTemplate>

    <DataTemplate x:Key="testCaseReportItemWarningTemplate">
        <Border CornerRadius="5" Margin="0,5,0,5" Background="{StaticResource MarbleDataGridCellWarningBackground}">

            <StackPanel Orientation="Horizontal" Margin="0,5,0,5">

                <StackPanel x:Name="stackPanelWarningHeader" Orientation="Horizontal" Width="100">
                    <Image Source="/MarbleLibrary;component/Images/warning.icon.16x16.png" Height="16" Width="16" Margin="0,1,5,1" VerticalAlignment="Top" ToolTip="{Binding Path=ItemType}"/>
                    <TextBlock Text="{Binding Path=TimeStamp, StringFormat={}{0:HH':'mm':'ss'.'fff}, Mode=OneTime}" FontFamily="Calibri" Typography.Capitals="SmallCaps" FontSize="11pt" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}" 
                               ToolTip="{Binding Path=TimeStamp}" Visibility="{Binding Path=TimeStamp, Converter={Converters:DateTimeToVisibilityHiddenConverter}}"/>
                </StackPanel>

                <TextBlock Grid.Column="1" Text="{Binding Path=Text}" Foreground="Black" TextWrapping="Wrap" 
                           MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}" />
            </StackPanel>

        </Border>
    </DataTemplate>

    <DataTemplate x:Key="testCaseReportItemTestStepTemplate">
        <StackPanel Orientation="Horizontal">

            <StackPanel Orientation="Horizontal" Width="100" Margin="0,5,0,0">
                <Image Source="/MarbleLibrary;component/Images/play.icon.16x16.png" Height="16" Width="16" Margin="0,1,5,1" VerticalAlignment="Top" ToolTip="{Binding Path=ItemType}"/>
                <TextBlock Text="{Binding Path=TimeStamp, StringFormat={}{0:HH':'mm':'ss'.'fff}, Mode=OneTime}" FontFamily="Calibri" Typography.Capitals="SmallCaps" FontSize="11pt" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}"
                           ToolTip="{Binding Path=TimeStamp}" Visibility="{Binding Path=TimeStamp, Converter={Converters:DateTimeToVisibilityHiddenConverter}}"/>
            </StackPanel>

            <GroupBox x:Name="groupBoxTestStep" Style="{DynamicResource MarbleExpanderGroupBoxCustomHeader}" 
                      MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}" 
                      Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}">
                <GroupBox.Header>
                    <Grid MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.Column="0" Text="{Binding Path=Name}" Foreground="White" />

                        <StackPanel Grid.Column="1" Orientation="Horizontal" Margin="10,0,5,0">
                            <Image Source="/MarbleLibrary;component/Images/timeout.icon.16x16.png" Height="16" Width="16" Margin="0,0,5,0" VerticalAlignment="Top" />
                            <TextBlock Grid.Column="1" Text="{Binding Path=Timeout}" Foreground="White" />
                            <TextBlock Grid.Column="1" Text="ms" Foreground="White" />
                        </StackPanel>
                    </Grid>
                </GroupBox.Header>
                <GroupBox.ToolTip>
                    <TextBlock Text="{Binding Path=ToolTipSummary}" TextWrapping="Wrap" />
                </GroupBox.ToolTip>

                <ItemsControl ItemsSource="{Binding Path=Items}" DataContext="{Binding}" ItemTemplateSelector="{StaticResource testReportTestStepDataTemplateSelector}" />

            </GroupBox>

            <!--<StackPanel>

                <TextBlock Grid.Column="1" Text="{Binding Path=Name}" />

                <StackPanel Orientation="Horizontal">
                    <Image Source="/MarbleLibrary;component/Images/timeout.icon.16x16.png" Height="16" Width="16" Margin="0,0,5,0" VerticalAlignment="Top" />
                    <TextBlock Grid.Column="1" Text="{Binding Path=Timeout}" />
                    <TextBlock Grid.Column="1" Text="ms" />
                </StackPanel>

                <ItemsControl ItemsSource="{Binding Path=Items}" DataContext="{Binding}" ItemTemplateSelector="{StaticResource testReportTestStepDataTemplateSelector}" />

            </StackPanel>-->

        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="testCaseReportItemTestStepExpandedTemplate">
        <StackPanel Orientation="Horizontal">

            <StackPanel Orientation="Horizontal" Width="100" Margin="0,5,0,0">
                <Image Source="/MarbleLibrary;component/Images/play.icon.16x16.png" Height="16" Width="16" Margin="0,1,5,1" VerticalAlignment="Top" ToolTip="{Binding Path=ItemType}"/>
                <TextBlock Text="{Binding Path=TimeStamp, StringFormat={}{0:HH':'mm':'ss'.'fff}, Mode=OneTime}" FontFamily="Calibri" Typography.Capitals="SmallCaps" FontSize="11pt" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}"
                           ToolTip="{Binding Path=TimeStamp}" Visibility="{Binding Path=TimeStamp, Converter={Converters:DateTimeToVisibilityHiddenConverter}}"/>
            </StackPanel>

            <GroupBox x:Name="groupBoxTestStep" Style="{DynamicResource MarbleExpanderGroupBoxCustomHeader}" Tag="IsExpandedOnStart"
                      MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}, AncestorLevel=2}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}" 
                      Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}, AncestorLevel=2}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}">
                <GroupBox.Header>
                    <Grid MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.Column="0" Text="{Binding Path=Name}" Foreground="White" />

                        <StackPanel Grid.Column="1" Orientation="Horizontal" Margin="10,0,5,0">
                            <Image Source="/MarbleLibrary;component/Images/timeout.icon.16x16.png" Height="16" Width="16" Margin="0,0,5,0" VerticalAlignment="Top" />
                            <TextBlock Grid.Column="1" Text="{Binding Path=Timeout}" Foreground="White" />
                            <TextBlock Grid.Column="1" Text="ms" Foreground="White" />
                        </StackPanel>
                    </Grid>
                </GroupBox.Header>
                <GroupBox.ToolTip>
                    <TextBlock Text="{Binding Path=ToolTipSummary}" TextWrapping="Wrap" />
                </GroupBox.ToolTip>

                <ItemsControl ItemsSource="{Binding Path=Items}" DataContext="{Binding}" ItemTemplateSelector="{StaticResource testReportTestStepDataTemplateSelector}" />

            </GroupBox>

            <!--<StackPanel>

                <TextBlock Grid.Column="1" Text="{Binding Path=Name}" />

                <StackPanel Orientation="Horizontal">
                    <Image Source="/MarbleLibrary;component/Images/timeout.icon.16x16.png" Height="16" Width="16" Margin="0,0,5,0" VerticalAlignment="Top" />
                    <TextBlock Grid.Column="1" Text="{Binding Path=Timeout}" />
                    <TextBlock Grid.Column="1" Text="ms" />
                </StackPanel>

                <ItemsControl ItemsSource="{Binding Path=Items}" DataContext="{Binding}" ItemTemplateSelector="{StaticResource testReportTestStepDataTemplateSelector}" />

            </StackPanel>-->

        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="testCaseReportItemVideoFileTemplate">
        <StackPanel Orientation="Horizontal">

            <StackPanel Orientation="Horizontal" Width="100" Margin="0,5,0,0">
                <Image Source="/MarbleLibrary;component/Images/play.icon.16x16.png" Height="16" Width="16" Margin="0,1,5,1" VerticalAlignment="Top" ToolTip="{Binding Path=ItemType}"/>
                <TextBlock Text="{Binding Path=TimeStamp, StringFormat={}{0:HH':'mm':'ss'.'fff}, Mode=OneTime}" FontFamily="Calibri" Typography.Capitals="SmallCaps" FontSize="11pt" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}"
                           ToolTip="{Binding Path=TimeStamp}" Visibility="{Binding Path=TimeStamp, Converter={Converters:DateTimeToVisibilityHiddenConverter}}"/>
            </StackPanel>

            <ItemsControl ItemsSource="{Binding Path=VideoFilePaths}" DataContext="{Binding}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Views:VideoPlayerView VideoFilePath="{Binding}" />
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="testCaseReportItemPerfTestStepTemplate">
        <StackPanel Orientation="Horizontal" Height="400">

            <StackPanel Orientation="Horizontal" Width="100" Margin="0,5,0,0">
                <Image Source="/MarbleLibrary;component/Images/output.icon.32x32.png" Height="16" Width="16" Margin="0,1,5,1" VerticalAlignment="Top" ToolTip="{Binding Path=ItemType}"/>
                <TextBlock Text="{Binding Path=TimeStamp, StringFormat={}{0:HH':'mm':'ss'.'fff}, Mode=OneTime}" FontFamily="Calibri" Typography.Capitals="SmallCaps" FontSize="11pt" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}"
                           ToolTip="{Binding Path=TimeStamp}" Visibility="{Binding Path=TimeStamp, Converter={Converters:DateTimeToVisibilityHiddenConverter}}"/>
            </StackPanel>

            <!--<Views:GraphView Height="400" GraphXml="{Binding Path=PerformanceReportXml}" Background="BlueViolet"
                      MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter={StaticResource WidthReduce}}" 
                      Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter={StaticResource WidthReduce}}"/>-->

            <!--<Views:GraphView Height="400" GraphXml="{Binding Path=PerformanceReportXml}" Background="BlueViolet"
                      MaxWidth="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}" 
                      Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-150}"/>-->

            <!--<Views:GraphView Height="400" GraphXml="{Binding Path=PerformanceReportXml}" Width="600"></Views:GraphView>-->

            <Views:GraphView x:Name="graphView" Height="400" GraphXml="{Binding Path=PerformanceReportXml}" Background="BlueViolet" Width="600">
                <Views:GraphView.Style>
                    <Style TargetType="{x:Type Views:GraphView}">
                        <!--<Setter Property="MaxWidth" Value="600"/>
                        <Setter Property="Width" Value="600"/>-->
                        <!--<Style.Triggers>-->
                        <!-- Prevents binding errors caused by virtualization. -->
                        <!--<DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={Converters:IsNullConverter}}" Value="False">
                                <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-50}"/>
                                <Setter Property="MaxWidth" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-50}"/>
                            </DataTrigger>
                        </Style.Triggers>-->
                    </Style>
                </Views:GraphView.Style>
            </Views:GraphView>

        </StackPanel>

        <!--<DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={Converters:IsNullConverter}}" Value="False">
                <Setter TargetName="graphView" Property="Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-50}"/>
                <Setter TargetName="graphView" Property="MaxWidth" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MaxWidth, Converter={Converters:DoubleValueAndParameterValueAdded}, ConverterParameter=-50}"/>
            </DataTrigger>
        </DataTemplate.Triggers>-->
    </DataTemplate>

    <DataTemplate x:Key="testCaseReportItemBugReportTemplate">

        <Border CornerRadius="5" Margin="0,5,0,5">
            <Border.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="Khaki" Offset="0" />
                        <GradientStop Color="LightYellow" Offset="1" />
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Border.Background>
            <StackPanel Orientation="Horizontal">

                <StackPanel Orientation="Horizontal" Width="100" Margin="0,5,0,0">
                    <Image Source="/MarbleLibrary;component/Images/bugreport.icon.16x16.png" Height="16" Width="16" Margin="0,1,5,1" VerticalAlignment="Top" ToolTip="{Binding Path=ItemType}"/>
                    <TextBlock Text="{Binding Path=TimeStamp, StringFormat={}{0:HH':'mm':'ss'.'fff}, Mode=OneTime}" FontFamily="Calibri" Typography.Capitals="SmallCaps" FontSize="11pt" Foreground="{StaticResource MarbleNormalTextColorOnLightBackground}"
                               ToolTip="{Binding Path=TimeStamp}" Visibility="{Binding Path=TimeStamp, Converter={Converters:DateTimeToVisibilityHiddenConverter}}"/>
                </StackPanel>

                <StackPanel Margin="0,0,10,0">
                    <StackPanel.Style>
                        <Style TargetType="{x:Type StackPanel}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=IsFileFound, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                    
                    <Views:FileItemView FileItemReportModel="{Binding}" />
                    
                </StackPanel>

                <StackPanel Margin="0,0,10,0">
                    <StackPanel.Style>
                        <Style TargetType="{x:Type StackPanel}">
                            <Setter Property="Visibility" Value="Collapsed" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=IsFileFound, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter Property="Visibility" Value="Visible" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                    <TextBlock Text="Bug report file was not found." Style="{StaticResource MarbleTextBlockLightBackgroundStyle}"/>
                    <TextBlock Text="{Binding Path=FilePath, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" TextWrapping="Wrap"/>
                </StackPanel>

            </StackPanel>
            
        </Border>
    </DataTemplate>

</ResourceDictionary>