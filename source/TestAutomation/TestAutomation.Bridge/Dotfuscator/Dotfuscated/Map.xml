<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE dotfuscatorMap SYSTEM "http://www.preemptive.com/dotfuscator/dtd/dotfuscatorMap_v1.2.dtd">
<dotfuscatorMap version="1.1">
    <header>
        <timestamp>2014-06-25T15:19:23</timestamp>
        <product version="4.12.0.49433" user="Jukka Nurminen" serial="166215-391-6E019AEE-9A23631C-2EDBE9C5-9710BD66">Dotfuscator Professional Edition</product>
    </header>
    <mapping>
        <module>
            <name>Managed.AndroidDebugBridge.dll</name>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{BA4C5657-9C52-461A-BDB9-D169E357A98A}</name>
                <newname>a</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{BA4C5657-9C52-461A-BDB9-D169E357A98A}/__StaticArrayInitTypeSize=32</signature>
                        <name>$$method0x6000459-1</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{BA4C5657-9C52-461A-BDB9-D169E357A98A}/__StaticArrayInitTypeSize=80</signature>
                        <name>$$method0x60005b1-1</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{BA4C5657-9C52-461A-BDB9-D169E357A98A}/__StaticArrayInitTypeSize=72</signature>
                        <name>$$method0x60005b1-2</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{BA4C5657-9C52-461A-BDB9-D169E357A98A}/__StaticArrayInitTypeSize=32</name>
                <newname>a/c</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{BA4C5657-9C52-461A-BDB9-D169E357A98A}/__StaticArrayInitTypeSize=72</name>
                <newname>a/b</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{BA4C5657-9C52-461A-BDB9-D169E357A98A}/__StaticArrayInitTypeSize=80</name>
                <newname>a/a</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.AdbHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string, int32)</signature>
                        <name>CreateAdbForwardRequest</name>
                    </method>
                    <method>
                        <signature>bool(System.Net.IPEndPoint, Managed.Adb.Device, int32, int32)</signature>
                        <name>CreateForward</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](int32)</signature>
                        <name>CreateJdwpForwardRequest</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Net.Sockets.Socket(System.Net.IPEndPoint, Managed.Adb.Device, int32)</signature>
                        <name>CreatePassThroughConnection</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint, string, Managed.Adb.Device, Managed.Adb.IShellOutputReceiver)</signature>
                        <name>ExecuteRemoteCommand</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint, string, Managed.Adb.Device, Managed.Adb.IShellOutputReceiver, int32)</signature>
                        <name>ExecuteRemoteCommand</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint, string, Managed.Adb.Device, Managed.Adb.IShellOutputReceiver)</signature>
                        <name>ExecuteRemoteRootCommand</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint, string, Managed.Adb.Device, Managed.Adb.IShellOutputReceiver, int32)</signature>
                        <name>ExecuteRemoteRootCommand</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>FormAdbRequest</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.AdbHelper()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>int32(System.Net.IPEndPoint)</signature>
                        <name>GetAdbVersion</name>
                    </method>
                    <method>
                        <signature>int32[](System.Net.IPEndPoint, Managed.Adb.Device)</signature>
                        <name>GetDebuggableProcesses</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.Device&gt;()</signature>
                        <name>GetDevices</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.Device&gt;(System.Net.IPEndPoint)</signature>
                        <name>GetDevices</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.Net.IPEndPoint, Managed.Adb.IDevice)</signature>
                        <name>GetFrameBuffer</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.RawImage(System.Net.IPEndPoint, Managed.Adb.IDevice)</signature>
                        <name>GetFrameBuffer</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8[])</signature>
                        <name>IsOkay</name>
                    </method>
                    <method>
                        <signature>int32(System.Net.IPEndPoint)</signature>
                        <name>KillAdb</name>
                    </method>
                    <method>
                        <signature>System.Net.Sockets.Socket(System.Net.IPAddress, Managed.Adb.IDevice, int32)</signature>
                        <name>Open</name>
                    </method>
                    <method>
                        <signature>bool(System.Net.Sockets.Socket, unsigned int8[])</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket, unsigned int8[], int32, int32)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.AdbResponse(System.Net.Sockets.Socket, bool)</signature>
                        <name>ReadAdbResponse</name>
                    </method>
                    <method>
                        <signature>void(string, System.Net.IPEndPoint, Managed.Adb.Device)</signature>
                        <name>Reboot</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint, Managed.Adb.Device)</signature>
                        <name>Reboot</name>
                    </method>
                    <method>
                        <signature>bool(System.Net.IPEndPoint, Managed.Adb.Device, int32)</signature>
                        <name>RemoveForward</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[])</signature>
                        <name>ReplyToString</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint, Managed.Adb.Device, Managed.Adb.IShellOutputReceiver, int32)</signature>
                        <name>RunBugReporterService</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint, Managed.Adb.Device, string, Managed.Adb.Logs.LogReceiver)</signature>
                        <name>RunCatLog</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream(System.Net.IPEndPoint, Managed.Adb.Device, string, System.IO.Stream)</signature>
                        <name>RunDevService</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint, Managed.Adb.Device, Managed.Adb.Logs.LogReceiver)</signature>
                        <name>RunEventLogService</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint, Managed.Adb.Device, string, Managed.Adb.Logs.LogReceiver)</signature>
                        <name>RunLogService</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint, Managed.Adb.Device, string, Managed.Adb.Logs.ITailReceiver, int32)</signature>
                        <name>RunTailService</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket, Managed.Adb.IDevice)</signature>
                        <name>SetDevice</name>
                    </method>
                    <method>
                        <signature>bool(System.Net.Sockets.Socket, unsigned int8[])</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket, unsigned int8[], int32, int32)</signature>
                        <name>Write</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.AdbHelper</signature>
                        <name>_instance</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DEFAULT_ENCODING</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TAG</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>WAIT_TIME</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.AdbHelper()</signature>
                        <name>Instance</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.AdbHelper/&lt;&gt;c__DisplayClass1</name>
                <newname>Managed.Adb.AdbHelper/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>&lt;GetDebuggableProcesses&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;int32&gt;</signature>
                        <name>pids</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.AdbHelper/&lt;&gt;c__DisplayClass4</name>
                <newname>Managed.Adb.AdbHelper/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>&lt;GetDevices&gt;b__3</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.Device&gt;</signature>
                        <name>s</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.AdbHelper/&lt;&gt;c__DisplayClass8</name>
                <newname>Managed.Adb.AdbHelper/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;RunCatLog&gt;b__6</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Net.Sockets.Socket</signature>
                        <name>socket</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.AdbResponse</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IOSuccess</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Message</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Okay</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Timeout</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IOSuccess</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Message</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Okay</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Timeout</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IOSuccess&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Message&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Okay&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Timeout&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IOSuccess</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Message</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Okay</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Timeout</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.AndroidDebugBridge</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;Managed.Adb.AndroidDebugBridgeEventArgs&gt;)</signature>
                        <name>add_BridgeChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;Managed.Adb.ClientEventArgs&gt;)</signature>
                        <name>add_ClientChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;Managed.Adb.DeviceEventArgs&gt;)</signature>
                        <name>add_DeviceChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;Managed.Adb.DeviceEventArgs&gt;)</signature>
                        <name>add_DeviceConnected</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;Managed.Adb.DeviceEventArgs&gt;)</signature>
                        <name>add_DeviceDisconnected</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CheckAdbVersion</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Managed.Adb.AndroidDebugBridge()</signature>
                        <name>CreateBridge</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.AndroidDebugBridge(string, bool)</signature>
                        <name>CreateBridge</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DisconnectBridge</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AdbOsLocation</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.AndroidDebugBridge()</signature>
                        <name>get_Bridge</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ClientSupport</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ConnectionAttemptCount</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.Device&gt;()</signature>
                        <name>get_Devices</name>
                    </method>
                    <method>
                        <signature>System.Net.IPAddress()</signature>
                        <name>get_HostAddress</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.AndroidDebugBridge()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsConnected</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RestartAttemptCount</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IClient()</signature>
                        <name>get_SelectedClient</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_SocketAddress</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Started</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_VersionCheck</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>GetLock</name>
                    </method>
                    <method>
                        <signature>int32(System.Diagnostics.Process, System.Collections.Generic.List`1&lt;string&gt;, System.Collections.Generic.List`1&lt;string&gt;, bool)</signature>
                        <name>GrabProcessOutput</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>HasInitialDeviceList</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Initialize</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.AndroidDebugBridgeEventArgs)</signature>
                        <name>OnBridgeChanged</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.ClientEventArgs)</signature>
                        <name>OnClientChanged</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.DeviceEventArgs)</signature>
                        <name>OnDeviceChanged</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.DeviceEventArgs)</signature>
                        <name>OnDeviceConnected</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.DeviceEventArgs)</signature>
                        <name>OnDeviceDisconnected</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;Managed.Adb.AndroidDebugBridgeEventArgs&gt;)</signature>
                        <name>remove_BridgeChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;Managed.Adb.ClientEventArgs&gt;)</signature>
                        <name>remove_ClientChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;Managed.Adb.DeviceEventArgs&gt;)</signature>
                        <name>remove_DeviceChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;Managed.Adb.DeviceEventArgs&gt;)</signature>
                        <name>remove_DeviceConnected</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;Managed.Adb.DeviceEventArgs&gt;)</signature>
                        <name>remove_DeviceDisconnected</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Restart</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>ScanVersionLine</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AdbOsLocation</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ClientSupport</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(System.Net.IPAddress)</signature>
                        <name>set_HostAddress</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.IClient)</signature>
                        <name>set_SelectedClient</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint)</signature>
                        <name>set_SocketAddress</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Started</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_VersionCheck</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>StartAdb</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Stop</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>StopAdb</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.AndroidDebugBridge</signature>
                        <name>_instance</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;AdbOsLocation&gt;k__BackingField</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;ClientSupport&gt;k__BackingField</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Net.IPAddress</signature>
                        <name>&lt;HostAddress&gt;k__BackingField</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Net.IPEndPoint</signature>
                        <name>&lt;SocketAddress&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Started&gt;k__BackingField</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;VersionCheck&gt;k__BackingField</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>AAPT</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ADB</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ADB_PORT</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ADB_VERSION_MICRO_MAX</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ADB_VERSION_MICRO_MIN</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ADB_VERSION_PATTERN</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;Managed.Adb.AndroidDebugBridgeEventArgs&gt;</signature>
                        <name>BridgeChanged</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;Managed.Adb.ClientEventArgs&gt;</signature>
                        <name>ClientChanged</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DDMS</name>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;Managed.Adb.DeviceEventArgs&gt;</signature>
                        <name>DeviceChanged</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;Managed.Adb.DeviceEventArgs&gt;</signature>
                        <name>DeviceConnected</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;Managed.Adb.DeviceEventArgs&gt;</signature>
                        <name>DeviceDisconnected</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>HIERARCHYVIEWER</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>AdbOsLocation</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.AndroidDebugBridge()</signature>
                        <name>Bridge</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ClientSupport</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ConnectionAttemptCount</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.Device&gt;()</signature>
                        <name>Devices</name>
                    </property>
                    <property>
                        <signature>System.Net.IPAddress()</signature>
                        <name>HostAddress</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.AndroidDebugBridge()</signature>
                        <name>Instance</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsConnected</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>RestartAttemptCount</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.IClient()</signature>
                        <name>SelectedClient</name>
                    </property>
                    <property>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>SocketAddress</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Started</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>VersionCheck</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>System.EventHandler`1&lt;Managed.Adb.AndroidDebugBridgeEventArgs&gt;</signature>
                        <name>BridgeChanged</name>
                    </event>
                    <event>
                        <signature>System.EventHandler`1&lt;Managed.Adb.ClientEventArgs&gt;</signature>
                        <name>ClientChanged</name>
                    </event>
                    <event>
                        <signature>System.EventHandler`1&lt;Managed.Adb.DeviceEventArgs&gt;</signature>
                        <name>DeviceChanged</name>
                    </event>
                    <event>
                        <signature>System.EventHandler`1&lt;Managed.Adb.DeviceEventArgs&gt;</signature>
                        <name>DeviceConnected</name>
                    </event>
                    <event>
                        <signature>System.EventHandler`1&lt;Managed.Adb.DeviceEventArgs&gt;</signature>
                        <name>DeviceDisconnected</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>Managed.Adb.AndroidDebugBridge/&lt;&gt;c__DisplayClass3</name>
                <newname>Managed.Adb.AndroidDebugBridge/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;GrabProcessOutput&gt;b__1</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;GrabProcessOutput&gt;b__2</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>errorOutput</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Diagnostics.Process</signature>
                        <name>process</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>stdOutput</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.AndroidDebugBridgeEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.AndroidDebugBridge)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.AndroidDebugBridge()</signature>
                        <name>get_Bridge</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.AndroidDebugBridge)</signature>
                        <name>set_Bridge</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.AndroidDebugBridge</signature>
                        <name>&lt;Bridge&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.AndroidDebugBridge()</signature>
                        <name>Bridge</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ArrayHelper</name>
                <methodlist>
                    <method>
                        <signature>int32(unsigned int8[], int32)</signature>
                        <name>Swap32bitFromArray</name>
                    </method>
                    <method>
                        <signature>void(int32, unsigned int8[], int32)</signature>
                        <name>Swap32bitsToArray</name>
                    </method>
                    <method>
                        <signature>int64(unsigned int8[], int32)</signature>
                        <name>Swap64bitFromArray</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32)</signature>
                        <name>SwapU16bitFromArray</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.BatteryInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ACPowered</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_CalculatedLevel</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.BatteryInfo/HealthTypes()</signature>
                        <name>get_Health</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Level</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Present</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Scale</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.BatteryInfo/StatusTypes()</signature>
                        <name>get_Status</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Temperature</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_UsbPowered</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Voltage</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ACPowered</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.BatteryInfo/HealthTypes)</signature>
                        <name>set_Health</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Level</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Present</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Scale</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.BatteryInfo/StatusTypes)</signature>
                        <name>set_Status</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Temperature</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Type</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_UsbPowered</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Voltage</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;ACPowered&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.BatteryInfo/HealthTypes</signature>
                        <name>&lt;Health&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Level&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Present&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Scale&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.BatteryInfo/StatusTypes</signature>
                        <name>&lt;Status&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Temperature&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Type&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;UsbPowered&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Voltage&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>ACPowered</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>CalculatedLevel</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.BatteryInfo/HealthTypes()</signature>
                        <name>Health</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Level</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Present</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Scale</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.BatteryInfo/StatusTypes()</signature>
                        <name>Status</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Temperature</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Type</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>UsbPowered</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Voltage</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.BatteryInfo/&lt;&gt;c__DisplayClass1</name>
                <newname>Managed.Adb.BatteryInfo/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.PropertyInfo)</signature>
                        <name>&lt;ToString&gt;b__0</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.BatteryInfo</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>sb</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.BatteryInfo/HealthTypes</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.BatteryInfo/HealthTypes</signature>
                        <name>Cold</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.BatteryInfo/HealthTypes</signature>
                        <name>Good</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.BatteryInfo/HealthTypes</signature>
                        <name>Overheat</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.BatteryInfo/HealthTypes</signature>
                        <name>OverVoltage</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.BatteryInfo/HealthTypes</signature>
                        <name>Unknown</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.BatteryInfo/HealthTypes</signature>
                        <name>UnspecifiedFailure</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.BatteryInfo/StatusTypes</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.BatteryInfo/StatusTypes</signature>
                        <name>Charging</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.BatteryInfo/StatusTypes</signature>
                        <name>Discharging</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.BatteryInfo/StatusTypes</signature>
                        <name>Full</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.BatteryInfo/StatusTypes</signature>
                        <name>NotCharging</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.BatteryInfo/StatusTypes</signature>
                        <name>Unknown</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.BatteryReceiver</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.BatteryInfo()</signature>
                        <name>get_BatteryInfo</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.BatteryInfo)</signature>
                        <name>set_BatteryInfo</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.BatteryInfo</signature>
                        <name>&lt;BatteryInfo&gt;k__BackingField</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>AC_POWER</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BATTERY_LEVEL</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>HEALTH</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PRESENT</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.RegexOptions</signature>
                        <name>REOPTIONS</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>SCALE</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>STATUS</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TAG</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TEMP</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TYPE</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>USB_POWER</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>VOLTAGE</name>
                        <newname>i</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.BatteryInfo()</signature>
                        <name>BatteryInfo</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.BusyBox</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;Install&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CheckForBusyBox</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver, int32, object[])</signature>
                        <name>ExecuteRootShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver, object[])</signature>
                        <name>ExecuteRootShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver, int32, object[])</signature>
                        <name>ExecuteShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver, object[])</signature>
                        <name>ExecuteShellCommand</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Available</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Commands</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Device()</signature>
                        <name>get_Device</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Version()</signature>
                        <name>get_Version</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Install</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Available</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Commands</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>set_Device</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Version)</signature>
                        <name>set_Version</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Supports</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Available&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>&lt;Commands&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.Device</signature>
                        <name>&lt;Device&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Version</signature>
                        <name>&lt;Version&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BUSYBOX_BIN</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BUSYBOX_COMMAND</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>g</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>Available</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>Commands</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.Device()</signature>
                        <name>Device</name>
                    </property>
                    <property>
                        <signature>System.Version()</signature>
                        <name>Version</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.BusyBox/&lt;&gt;c__DisplayClass3</name>
                <newname>Managed.Adb.BusyBox/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;Supports&gt;b__2</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>command</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.BusyBox/BusyBoxCommandsReceiver</name>
                <newname>Managed.Adb.BusyBox/a</newname>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.BusyBox)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.BusyBox()</signature>
                        <name>get_BusyBox</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.BusyBox)</signature>
                        <name>set_BusyBox</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.BusyBox</signature>
                        <name>&lt;BusyBox&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BB_FUNCTIONS_PATTERN</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BB_VERSION_PATTERN</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ChunkHandler</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IO.BinaryReader(int32)</signature>
                        <name>allocBuffer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Managed.Adb.IClient(Managed.Adb.IClient, string)</signature>
                        <name>checkDebuggerPortForAppName</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.IClient)</signature>
                        <name>ClientDisconnected</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.IClient)</signature>
                        <name>ClientReady</name>
                    </method>
                    <method>
                        <signature>void(object, int32, int32)</signature>
                        <name>finishChunkPacket</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.IO.BinaryReader(System.IO.MemoryStream)</signature>
                        <name>GetChunkDataBuf</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(System.IO.MemoryStream, int32)</signature>
                        <name>GetString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.IClient, int32, unsigned int8[], bool, int32)</signature>
                        <name>HandleChunk</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.IClient, int32, System.IO.MemoryStream, bool, int32)</signature>
                        <name>handleUnknownChunk</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>name</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.MemoryStream, string)</signature>
                        <name>PutString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(string)</signature>
                        <name>type</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>CHUNK_FAIL</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>CHUNK_HEADER_LEN</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ChunkHandler/ByteOrder</signature>
                        <name>CHUNK_ORDER</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ChunkHandler/ByteOrder</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.ChunkHandler/ByteOrder</signature>
                        <name>BigEndian</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ChunkHandler/ByteOrder</signature>
                        <name>LittleEndian</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Client</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.Device, System.Net.Sockets.Socket, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, Managed.Adb.ChunkHandler)</signature>
                        <name>AddRequestId</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>DdmSeen</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DumpHprof</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>EnableAllocationTracker</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ExecuteGarbageCollector</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>ForwardPacketToClient</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ClientChangeState()</signature>
                        <name>get_ChangeState</name>
                    </method>
                    <method>
                        <signature>System.Net.Sockets.Socket()</signature>
                        <name>get_Channel</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ClientData()</signature>
                        <name>get_ClientData</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ClientConnectionState()</signature>
                        <name>get_ConnectionState</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Debugger()</signature>
                        <name>get_Debugger</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_DebuggerListenPort</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IDevice()</signature>
                        <name>get_Device</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Device()</signature>
                        <name>get_DeviceImplementation</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDdmAware</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDebuggerAttached</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsHeapUpdateEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSelectedClient</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsThreadUpdateEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsValid</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>GetJdwpPacket</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ChunkHandler(int32)</signature>
                        <name>IsResponseToUs</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Kill</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>ListenForDebugger</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>PacketFailed</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Register</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveRequestId</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RequestAllocationDetails</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RequestAllocationStatus</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RequestMethodProfilingStatus</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>RequestNativeHeapInformation</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RequestThreadStackTrace</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RequestThreadUpdate</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>SendAndConsume</name>
                    </method>
                    <method>
                        <signature>void(object, Managed.Adb.ChunkHandler)</signature>
                        <name>SendAndConsume</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>SendHandshake</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.ClientChangeState)</signature>
                        <name>set_ChangeState</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket)</signature>
                        <name>set_Channel</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.ClientData)</signature>
                        <name>set_ClientData</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.ClientConnectionState)</signature>
                        <name>set_ConnectionState</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Debugger)</signature>
                        <name>set_Debugger</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_DebuggerListenPort</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.IDevice)</signature>
                        <name>set_Device</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>set_DeviceImplementation</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsHeapUpdateEnabled</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsSelectedClient</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsThreadUpdateEnabled</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsValid</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ToggleMethodProfiling</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.ClientChangeMask)</signature>
                        <name>Update</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.ClientChangeState</signature>
                        <name>&lt;ChangeState&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Net.Sockets.Socket</signature>
                        <name>&lt;Channel&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientData</signature>
                        <name>&lt;ClientData&gt;k__BackingField</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientConnectionState</signature>
                        <name>&lt;ConnectionState&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.Debugger</signature>
                        <name>&lt;Debugger&gt;k__BackingField</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;DebuggerListenPort&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.IDevice</signature>
                        <name>&lt;Device&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.Device</signature>
                        <name>&lt;DeviceImplementation&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsHeapUpdateEnabled&gt;k__BackingField</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsSelectedClient&gt;k__BackingField</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsThreadUpdateEnabled&gt;k__BackingField</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsValid&gt;k__BackingField</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>INITIAL_BUF_SIZE</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MAX_BUF_SIZE</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>SERVER_PROTOCOL_VERSION</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>WRITE_BUF_SIZE</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.ClientChangeState()</signature>
                        <name>ChangeState</name>
                    </property>
                    <property>
                        <signature>System.Net.Sockets.Socket()</signature>
                        <name>Channel</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.ClientData()</signature>
                        <name>ClientData</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.ClientConnectionState()</signature>
                        <name>ConnectionState</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.Debugger()</signature>
                        <name>Debugger</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>DebuggerListenPort</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.IDevice()</signature>
                        <name>Device</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.Device()</signature>
                        <name>DeviceImplementation</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsDdmAware</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsDebuggerAttached</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsHeapUpdateEnabled</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsSelectedClient</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsThreadUpdateEnabled</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsValid</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ClientChangeMask</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.ClientChangeMask</signature>
                        <name>ChangeDebuggerStatus</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeMask</signature>
                        <name>ChangeHeapData</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeMask</signature>
                        <name>ChangeHeapMode</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeMask</signature>
                        <name>ChangeInfo</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeMask</signature>
                        <name>ChangeNatvieHeapData</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeMask</signature>
                        <name>ChangeThreadData</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeMask</signature>
                        <name>ChangeThreadMode</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ClientChangeState</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.ClientChangeState</signature>
                        <name>DebuggerStatus</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeState</signature>
                        <name>HeapAllocations</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeState</signature>
                        <name>HeapAllocationStatus</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeState</signature>
                        <name>HeapData</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeState</signature>
                        <name>HeapMode</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeState</signature>
                        <name>Info</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeState</signature>
                        <name>MethodProfilingStatus</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeState</signature>
                        <name>Name</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeState</signature>
                        <name>NativeHeapData</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeState</signature>
                        <name>Port</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeState</signature>
                        <name>ThreadData</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeState</signature>
                        <name>ThreadMode</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientChangeState</signature>
                        <name>ThreadStackTrace</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ClientConnectionState</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.ClientConnectionState</signature>
                        <name>AwaitShake</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientConnectionState</signature>
                        <name>Disconnected</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientConnectionState</signature>
                        <name>Error</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientConnectionState</signature>
                        <name>Init</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientConnectionState</signature>
                        <name>NeedDDMPacket</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientConnectionState</signature>
                        <name>NotDDM</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientConnectionState</signature>
                        <name>NotJDWP</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientConnectionState</signature>
                        <name>Ready</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ClientData</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ClientData/DebuggerStatus()</signature>
                        <name>get_DebuggerConnectionStatus</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ClientData/DebuggerStatus()</signature>
                        <name>get_DebuggerInterest</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Description</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDdmAware</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Pid</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_VmIdentifier</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.ClientData/DebuggerStatus)</signature>
                        <name>set_DebuggerConnectionStatus</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.ClientData/DebuggerStatus)</signature>
                        <name>set_DebuggerInterest</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Description</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsDdmAware</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Pid</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_VmIdentifier</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.ClientData/DebuggerStatus</signature>
                        <name>&lt;DebuggerConnectionStatus&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientData/DebuggerStatus</signature>
                        <name>&lt;DebuggerInterest&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Description&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsDdmAware&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Pid&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;VmIdentifier&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FEATURE_HPROF</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FEATURE_HPROF_STREAMING</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FEATURE_PROFILING</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FEATURE_PROFILING_STREAMING</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>HEAP_BYTES_ALLOCATED</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>HEAP_MAX_SIZE_BYTES</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>HEAP_OBJECTS_ALLOCATED</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>HEAP_SIZE_BYTES</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PRE_INITIALIZED</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.ClientData/DebuggerStatus()</signature>
                        <name>DebuggerConnectionStatus</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.ClientData/DebuggerStatus()</signature>
                        <name>DebuggerInterest</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Description</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsDdmAware</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Pid</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>VmIdentifier</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ClientData/AllocationTrackingStatus</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.ClientData/AllocationTrackingStatus</signature>
                        <name>OFF</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientData/AllocationTrackingStatus</signature>
                        <name>ON</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientData/AllocationTrackingStatus</signature>
                        <name>UNKNOWN</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ClientData/DebuggerStatus</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.ClientData/DebuggerStatus</signature>
                        <name>ATTACHED</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientData/DebuggerStatus</signature>
                        <name>DEFAULT</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientData/DebuggerStatus</signature>
                        <name>ERROR</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientData/DebuggerStatus</signature>
                        <name>WAITING</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ClientData/MethodProfilingStatus</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.ClientData/MethodProfilingStatus</signature>
                        <name>OFF</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientData/MethodProfilingStatus</signature>
                        <name>ON</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.ClientData/MethodProfilingStatus</signature>
                        <name>UNKNOWN</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ClientEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.IClient, Managed.Adb.ClientChangeMask)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ClientChangeMask()</signature>
                        <name>get_ChangeMask</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IClient()</signature>
                        <name>get_Client</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.ClientChangeMask)</signature>
                        <name>set_ChangeMask</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.IClient)</signature>
                        <name>set_Client</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.ClientChangeMask</signature>
                        <name>&lt;ChangeMask&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.IClient</signature>
                        <name>&lt;Client&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.ClientChangeMask()</signature>
                        <name>ChangeMask</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.IClient()</signature>
                        <name>Client</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ColorData</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Offset</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Length</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Offset</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Length&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Offset&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Length</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Offset</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.CommandErrorReceiver</name>
                <newname>Managed.Adb.a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ErrorMessage</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ErrorMessage</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ErrorMessage&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.CommandResultReceiver</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Result</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Result</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Result&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Result</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ConsoleOutputReceiver</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ConsoleOutputReceiver()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.ConsoleOutputReceiver</signature>
                        <name>_instance</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.ConsoleOutputReceiver()</signature>
                        <name>Instance</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Conversion.BigEndianBitConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int64, int32, unsigned int8[], int32)</signature>
                        <name>CopyBytesImpl</name>
                    </method>
                    <method>
                        <signature>int64(unsigned int8[], int32, int32)</signature>
                        <name>FromBytes</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Conversion.Endianness()</signature>
                        <name>get_Endianness</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsLittleEndian</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>Managed.Adb.Conversion.Endianness()</signature>
                        <name>Endianness</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Conversion.DoubleConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(float64)</signature>
                        <name>ToExactString</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Conversion.DoubleConverter/ArbitraryDecimal</name>
                <newname>Managed.Adb.Conversion.DoubleConverter/a</newname>
                <methodlist>
                    <method>
                        <signature>void(int64)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>MultiplyBy</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Normalize</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>Shift</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>decimalPoint</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>digits</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Conversion.EndianBitConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>CheckByteArgument</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int64(unsigned int8[], int32, int32)</signature>
                        <name>CheckedFromBytes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool, unsigned int8[], int32)</signature>
                        <name>CopyBytes</name>
                    </method>
                    <method>
                        <signature>void(char, unsigned int8[], int32)</signature>
                        <name>CopyBytes</name>
                    </method>
                    <method>
                        <signature>void(float32, unsigned int8[], int32)</signature>
                        <name>CopyBytes</name>
                    </method>
                    <method>
                        <signature>void(float64, unsigned int8[], int32)</signature>
                        <name>CopyBytes</name>
                    </method>
                    <method>
                        <signature>void(int16, unsigned int8[], int32)</signature>
                        <name>CopyBytes</name>
                    </method>
                    <method>
                        <signature>void(int32, unsigned int8[], int32)</signature>
                        <name>CopyBytes</name>
                    </method>
                    <method>
                        <signature>void(int64, int32, unsigned int8[], int32)</signature>
                        <name>CopyBytes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int64, unsigned int8[], int32)</signature>
                        <name>CopyBytes</name>
                    </method>
                    <method>
                        <signature>void(System.Decimal, unsigned int8[], int32)</signature>
                        <name>CopyBytes</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16, unsigned int8[], int32)</signature>
                        <name>CopyBytes</name>
                    </method>
                    <method>
                        <signature>void(unsigned int32, unsigned int8[], int32)</signature>
                        <name>CopyBytes</name>
                    </method>
                    <method>
                        <signature>void(unsigned int64, unsigned int8[], int32)</signature>
                        <name>CopyBytes</name>
                    </method>
                    <method>
                        <signature>void(int64, int32, unsigned int8[], int32)</signature>
                        <name>CopyBytesImpl</name>
                    </method>
                    <method>
                        <signature>int64(float64)</signature>
                        <name>DoubleToInt64Bits</name>
                    </method>
                    <method>
                        <signature>int64(unsigned int8[], int32, int32)</signature>
                        <name>FromBytes</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Conversion.BigEndianBitConverter()</signature>
                        <name>get_Big</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Conversion.Endianness()</signature>
                        <name>get_Endianness</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Conversion.LittleEndianBitConverter()</signature>
                        <name>get_Little</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](bool)</signature>
                        <name>GetBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](char)</signature>
                        <name>GetBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](float32)</signature>
                        <name>GetBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](float64)</signature>
                        <name>GetBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](int16)</signature>
                        <name>GetBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](int32)</signature>
                        <name>GetBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](int64)</signature>
                        <name>GetBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](int64, int32)</signature>
                        <name>GetBytes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](System.Decimal)</signature>
                        <name>GetBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int16)</signature>
                        <name>GetBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int32)</signature>
                        <name>GetBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int64)</signature>
                        <name>GetBytes</name>
                    </method>
                    <method>
                        <signature>float32(int32)</signature>
                        <name>Int32BitsToSingle</name>
                    </method>
                    <method>
                        <signature>float64(int64)</signature>
                        <name>Int64BitsToDouble</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsLittleEndian</name>
                    </method>
                    <method>
                        <signature>int32(float32)</signature>
                        <name>SingleToInt32Bits</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8[], int32)</signature>
                        <name>ToBoolean</name>
                    </method>
                    <method>
                        <signature>char(unsigned int8[], int32)</signature>
                        <name>ToChar</name>
                    </method>
                    <method>
                        <signature>System.Decimal(unsigned int8[], int32)</signature>
                        <name>ToDecimal</name>
                    </method>
                    <method>
                        <signature>float64(unsigned int8[], int32)</signature>
                        <name>ToDouble</name>
                    </method>
                    <method>
                        <signature>int16(unsigned int8[], int32)</signature>
                        <name>ToInt16</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32)</signature>
                        <name>ToInt32</name>
                    </method>
                    <method>
                        <signature>int64(unsigned int8[], int32)</signature>
                        <name>ToInt64</name>
                    </method>
                    <method>
                        <signature>float32(unsigned int8[], int32)</signature>
                        <name>ToSingle</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[])</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[], int32)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[], int32, int32)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>unsigned int16(unsigned int8[], int32)</signature>
                        <name>ToUInt16</name>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int8[], int32)</signature>
                        <name>ToUInt32</name>
                    </method>
                    <method>
                        <signature>unsigned int64(unsigned int8[], int32)</signature>
                        <name>ToUInt64</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.Conversion.BigEndianBitConverter</signature>
                        <name>big</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.Conversion.LittleEndianBitConverter</signature>
                        <name>little</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.Conversion.BigEndianBitConverter()</signature>
                        <name>Big</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.Conversion.Endianness()</signature>
                        <name>Endianness</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.Conversion.LittleEndianBitConverter()</signature>
                        <name>Little</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Conversion.EndianBitConverter/Int32SingleUnion</name>
                <newname>Managed.Adb.Conversion.EndianBitConverter/a</newname>
                <methodlist>
                    <method>
                        <signature>void(float32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_AsInt32</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>float32()</signature>
                        <name>get_AsSingle</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>float32</signature>
                        <name>f</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>i</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Conversion.Endianness</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.Conversion.Endianness</signature>
                        <name>BigEndian</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.Conversion.Endianness</signature>
                        <name>LittleEndian</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Conversion.LittleEndianBitConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int64, int32, unsigned int8[], int32)</signature>
                        <name>CopyBytesImpl</name>
                    </method>
                    <method>
                        <signature>int64(unsigned int8[], int32, int32)</signature>
                        <name>FromBytes</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Conversion.Endianness()</signature>
                        <name>get_Endianness</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsLittleEndian</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>Managed.Adb.Conversion.Endianness()</signature>
                        <name>Endianness</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.DdmPreferences</name>
                <newname>Managed.Adb.b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_DebugPortBase</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_InitialHeapUpdate</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_InitialThreadUpdate</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo()</signature>
                        <name>get_LogLevel</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LongTimeout</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_SelectedDebugPort</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Timeout</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_DebugPortBase</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_InitialHeapUpdate</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_InitialThreadUpdate</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.LogLevel/LogLevelInfo)</signature>
                        <name>set_LogLevel</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_LongTimeout</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_SelectedDebugPort</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Timeout</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo</signature>
                        <name>_logLevel</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_selectedDebugPort</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;DebugPortBase&gt;k__BackingField</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;InitialHeapUpdate&gt;k__BackingField</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;InitialThreadUpdate&gt;k__BackingField</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;LongTimeout&gt;k__BackingField</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Timeout&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_DEBUG_PORT_BASE</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>DEFAULT_INITIAL_HEAP_UPDATE</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>DEFAULT_INITIAL_THREAD_UPDATE</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo</signature>
                        <name>DEFAULT_LOG_LEVEL</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_SELECTED_DEBUG_PORT</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_TIMEOUT</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LONG_TIMEOUT</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Debugger</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.IClient, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Net.Sockets.Socket()</signature>
                        <name>Accept</name>
                    </method>
                    <method>
                        <signature>System.Net.Sockets.Socket(System.Net.Sockets.Socket)</signature>
                        <name>Accept</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CloseData</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>ForwardPacketToClient</name>
                    </method>
                    <method>
                        <signature>System.Net.Sockets.Socket()</signature>
                        <name>get_Channel</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IClient()</signature>
                        <name>get_Client</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Debugger/ConnectionStates()</signature>
                        <name>get_ConnectionState</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDebuggerAttached</name>
                    </method>
                    <method>
                        <signature>System.Net.Sockets.Socket()</signature>
                        <name>get_ListenChannel</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ListenPort</name>
                    </method>
                    <method>
                        <signature>System.IO.BinaryWriter()</signature>
                        <name>get_PreDataBuffer</name>
                    </method>
                    <method>
                        <signature>System.IO.BinaryReader()</signature>
                        <name>get_ReadBuffer</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>GetJdwpPacket</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>SendAndConsume</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>SendHandshake</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket)</signature>
                        <name>set_Channel</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.IClient)</signature>
                        <name>set_Client</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Debugger/ConnectionStates)</signature>
                        <name>set_ConnectionState</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsDebuggerAttached</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket)</signature>
                        <name>set_ListenChannel</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ListenPort</name>
                    </method>
                    <method>
                        <signature>void(System.IO.BinaryWriter)</signature>
                        <name>set_PreDataBuffer</name>
                    </method>
                    <method>
                        <signature>void(System.IO.BinaryReader)</signature>
                        <name>set_ReadBuffer</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Net.Sockets.Socket</signature>
                        <name>&lt;Channel&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.IClient</signature>
                        <name>&lt;Client&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.Debugger/ConnectionStates</signature>
                        <name>&lt;ConnectionState&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsDebuggerAttached&gt;k__BackingField</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Net.Sockets.Socket</signature>
                        <name>&lt;ListenChannel&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ListenPort&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.IO.BinaryWriter</signature>
                        <name>&lt;PreDataBuffer&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.IO.BinaryReader</signature>
                        <name>&lt;ReadBuffer&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>INITIAL_BUF_SIZE</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MAX_BUF_SIZE</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>PRE_DATA_BUF_SIZE</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Net.Sockets.Socket()</signature>
                        <name>Channel</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.IClient()</signature>
                        <name>Client</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.Debugger/ConnectionStates()</signature>
                        <name>ConnectionState</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsDebuggerAttached</name>
                    </property>
                    <property>
                        <signature>System.Net.Sockets.Socket()</signature>
                        <name>ListenChannel</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ListenPort</name>
                    </property>
                    <property>
                        <signature>System.IO.BinaryWriter()</signature>
                        <name>PreDataBuffer</name>
                    </property>
                    <property>
                        <signature>System.IO.BinaryReader()</signature>
                        <name>ReadBuffer</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Debugger/ConnectionStates</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.Debugger/ConnectionStates</signature>
                        <name>AwaitShake</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.Debugger/ConnectionStates</signature>
                        <name>NotConnected</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.Debugger/ConnectionStates</signature>
                        <name>Ready</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.DebugPortManager</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.DebugPortManager()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IDebugPortProvider()</signature>
                        <name>get_Provider</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.IDebugPortProvider)</signature>
                        <name>set_Provider</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.DebugPortManager</signature>
                        <name>_instance</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.IDebugPortProvider</signature>
                        <name>&lt;Provider&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>NO_STATIC_PORT</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.DebugPortManager()</signature>
                        <name>Instance</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.IDebugPortProvider()</signature>
                        <name>Provider</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Device</name>
                <methodlist>
                    <method>
                        <signature>void(string, Managed.Adb.DeviceState)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;System.EventArgs&gt;)</signature>
                        <name>add_BuildInfoChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;System.EventArgs&gt;)</signature>
                        <name>add_ClientListChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;System.EventArgs&gt;)</signature>
                        <name>add_StateChanged</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0()</signature>
                        <name>CaptureScreen</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.RawImage()</signature>
                        <name>CaptureScreen</name>
                    </method>
                    <method>
                        <signature>bool(int32, int32)</signature>
                        <name>CreateForward</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Device(string)</signature>
                        <name>CreateFromAdbData</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver)</signature>
                        <name>ExecuteRootShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver, int32)</signature>
                        <name>ExecuteRootShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver, int32, object[])</signature>
                        <name>ExecuteRootShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver, object[])</signature>
                        <name>ExecuteRootShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver)</signature>
                        <name>ExecuteShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver, int32)</signature>
                        <name>ExecuteShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver, int32, object[])</signature>
                        <name>ExecuteShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver, object[])</signature>
                        <name>ExecuteShellCommand</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AvdName</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.BusyBox()</signature>
                        <name>get_BusyBox</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanSU</name>
                    </method>
                    <method>
                        <signature>System.Net.Sockets.Socket()</signature>
                        <name>get_ClientMonitoringSocket</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.IClient&gt;()</signature>
                        <name>get_Clients</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;()</signature>
                        <name>get_EnvironmentVariables</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileListingService()</signature>
                        <name>get_FileListingService</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileSystem()</signature>
                        <name>get_FileSystem</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasClients</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsBootLoader</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEmulator</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsOffline</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsOnline</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsRecovery</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsRooted</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.MountPoint&gt;()</signature>
                        <name>get_MountPoints</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.PackageManager()</signature>
                        <name>get_PackageManager</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;()</signature>
                        <name>get_Properties</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SerialNumber</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.DeviceState()</signature>
                        <name>get_State</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.SyncService()</signature>
                        <name>get_SyncService</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.BatteryInfo()</signature>
                        <name>GetBatteryInfo</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.BatteryInfo(int64)</signature>
                        <name>GetBatteryInfo</name>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>GetDebuggableProcesses</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetProperty</name>
                    </method>
                    <method>
                        <signature>string(string[])</signature>
                        <name>GetProperty</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.DeviceState(string)</signature>
                        <name>GetStateFromString</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>InstallPackage</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>InstallRemotePackage</name>
                    </method>
                    <method>
                        <signature>void(System.EventArgs)</signature>
                        <name>OnBuildInfoChanged</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(System.EventArgs)</signature>
                        <name>OnClientListChanged</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.EventArgs)</signature>
                        <name>OnStateChanged</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reboot</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Reboot</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RefreshEnvironmentVariables</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RefreshMountPoints</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RefreshProperties</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.MountPoint, bool)</signature>
                        <name>RemountMountPoint</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>RemountMountPoint</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;System.EventArgs&gt;)</signature>
                        <name>remove_BuildInfoChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;System.EventArgs&gt;)</signature>
                        <name>remove_ClientListChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;System.EventArgs&gt;)</signature>
                        <name>remove_StateChanged</name>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>RemoveForward</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>RemoveRemotePackage</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RetrieveDeviceInfo</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.IShellOutputReceiver, int32)</signature>
                        <name>RunBugReporterService</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.Logs.LogReceiver)</signature>
                        <name>RunCatLog</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream(string, System.IO.Stream)</signature>
                        <name>RunDevService</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Logs.LogReceiver)</signature>
                        <name>RunEventLogService</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.Logs.LogReceiver)</signature>
                        <name>RunLogService</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.Logs.ITailReceiver, int32)</signature>
                        <name>RunTailService</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AvdName</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.BusyBox)</signature>
                        <name>set_BusyBox</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket)</signature>
                        <name>set_ClientMonitoringSocket</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;Managed.Adb.IClient&gt;)</signature>
                        <name>set_Clients</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;string,string&gt;)</signature>
                        <name>set_EnvironmentVariables</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FileSystem)</signature>
                        <name>set_FileSystem</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.MountPoint&gt;)</signature>
                        <name>set_MountPoints</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;string,string&gt;)</signature>
                        <name>set_Properties</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_SerialNumber</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.DeviceState)</signature>
                        <name>set_State</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>SetProperty</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>SyncPackageToDevice</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>UninstallPackage</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_canSU</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.BusyBox</signature>
                        <name>&lt;BusyBox&gt;k__BackingField</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>System.Net.Sockets.Socket</signature>
                        <name>&lt;ClientMonitoringSocket&gt;k__BackingField</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.IClient&gt;</signature>
                        <name>&lt;Clients&gt;k__BackingField</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;</signature>
                        <name>&lt;EnvironmentVariables&gt;k__BackingField</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.FileSystem</signature>
                        <name>&lt;FileSystem&gt;k__BackingField</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.MountPoint&gt;</signature>
                        <name>&lt;MountPoints&gt;k__BackingField</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;</signature>
                        <name>&lt;Properties&gt;k__BackingField</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;SerialNumber&gt;k__BackingField</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.DeviceState</signature>
                        <name>&lt;State&gt;k__BackingField</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>avdName</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>BATTERY_TIMEOUT</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;System.EventArgs&gt;</signature>
                        <name>BuildInfoChanged</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;System.EventArgs&gt;</signature>
                        <name>ClientListChanged</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FIRST_EMULATOR_SN</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>GETPROP_TIMEOUT</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>INSTALL_TIMEOUT</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>lastBatteryCheckTime</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.BatteryInfo</signature>
                        <name>lastBatteryInfo</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>LOG_TAG</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>MNT_DATA</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>MNT_EXTERNAL_STORAGE</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>MNT_ROOT</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PROP_BUILD_API_LEVEL</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PROP_BUILD_CODENAME</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PROP_BUILD_VERSION</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PROP_BUILD_VERSION_NUMBER</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PROP_DEBUGGABLE</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>RE_DEVICELIST_INFO</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>RE_EMULATOR_SN</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler`1&lt;System.EventArgs&gt;</signature>
                        <name>StateChanged</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TEMP_DIRECTORY_FOR_INSTALL</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>AvdName</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.BusyBox()</signature>
                        <name>BusyBox</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>CanSU</name>
                    </property>
                    <property>
                        <signature>System.Net.Sockets.Socket()</signature>
                        <name>ClientMonitoringSocket</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.IClient&gt;()</signature>
                        <name>Clients</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;()</signature>
                        <name>EnvironmentVariables</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.FileListingService()</signature>
                        <name>FileListingService</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.FileSystem()</signature>
                        <name>FileSystem</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>HasClients</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsBootLoader</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsEmulator</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsOffline</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsOnline</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsRecovery</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsRooted</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.MountPoint&gt;()</signature>
                        <name>MountPoints</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.PackageManager()</signature>
                        <name>PackageManager</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;()</signature>
                        <name>Properties</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>SerialNumber</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.DeviceState()</signature>
                        <name>State</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.SyncService()</signature>
                        <name>SyncService</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>System.EventHandler`1&lt;System.EventArgs&gt;</signature>
                        <name>BuildInfoChanged</name>
                    </event>
                    <event>
                        <signature>System.EventHandler`1&lt;System.EventArgs&gt;</signature>
                        <name>ClientListChanged</name>
                    </event>
                    <event>
                        <signature>System.EventHandler`1&lt;System.EventArgs&gt;</signature>
                        <name>StateChanged</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>Managed.Adb.Device/IsRootedReceiver</name>
                <newname>Managed.Adb.Device/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsRooted</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsRooted</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsRooted&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.DeviceEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.IDevice)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IDevice()</signature>
                        <name>get_Device</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.IDevice)</signature>
                        <name>set_Device</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.IDevice</signature>
                        <name>&lt;Device&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.IDevice()</signature>
                        <name>Device</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.DeviceState</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.DeviceState</signature>
                        <name>BootLoader</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.DeviceState</signature>
                        <name>Download</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.DeviceState</signature>
                        <name>Offline</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.DeviceState</signature>
                        <name>Online</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.DeviceState</signature>
                        <name>Recovery</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.DeviceState</signature>
                        <name>Unknown</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.EnvironmentVariablesReceiver</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Done</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Device()</signature>
                        <name>get_Device</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>set_Device</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.Device</signature>
                        <name>&lt;Device&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ENV_COMMAND</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ENV_PATTERN</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.Device()</signature>
                        <name>Device</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ErrorCodeHelper</name>
                <newname>Managed.Adb.c</newname>
                <methodlist>
                    <method>
                        <signature>string(int32)</signature>
                        <name>ErrorCodeToString</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>RESULT_BUFFER_OVERRUN</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RESULT_CANCELED</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RESULT_CONNECTION_ERROR</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RESULT_FILE_READ_ERROR</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RESULT_FILE_WRITE_ERROR</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RESULT_LOCAL_IS_DIRECTORY</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RESULT_NO_DIR_TARGET</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RESULT_NO_LOCAL_FILE</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RESULT_NO_REMOTE_OBJECT</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RESULT_OK</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RESULT_REMOTE_IS_FILE</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RESULT_REMOTE_PATH_ENCODING</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RESULT_REMOTE_PATH_LENGTH</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RESULT_TARGET_IS_FILE</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RESULT_UNKNOWN_ERROR</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Exceptions.AdbCommandRejectedException</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDeviceOffline</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_WasErrorDuringDeviceSelection</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsDeviceOffline</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_WasErrorDuringDeviceSelection</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsDeviceOffline&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;WasErrorDuringDeviceSelection&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsDeviceOffline</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>WasErrorDuringDeviceSelection</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Exceptions.AdbException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Exceptions.BadPacketException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Exceptions.CommandAbortingException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Exceptions.DeviceNotFoundException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Exceptions.PackageInstallationException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Exceptions.PermissionDeniedException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Exceptions.ShellCommandUnresponsiveException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Exceptions.UnknownOptionException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Extensions.MadbExtensions</name>
                <methodlist>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Reflection.MethodInfo)</signature>
                        <name>&lt;GetMethodsOfReturnType&gt;b__7</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Reflection.MethodInfo(System.Reflection.MethodInfo)</signature>
                        <name>&lt;GetMethodsOfReturnType&gt;b__8</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Reflection.MemberInfo)</signature>
                        <name>&lt;WithAttribute&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Reflection.FieldInfo)</signature>
                        <name>&lt;WithAttribute&gt;b__1</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Reflection.Module)</signature>
                        <name>&lt;WithAttribute&gt;b__2</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Reflection.MethodInfo)</signature>
                        <name>&lt;WithAttribute&gt;b__3</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Reflection.ParameterInfo)</signature>
                        <name>&lt;WithAttribute&gt;b__4</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>&lt;WithAttribute&gt;b__5</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>bool(System.Type)</signature>
                        <name>&lt;WithAttribute&gt;b__6</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.Reflection.FieldInfo)</signature>
                        <name>GetCustomAttribute</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.Reflection.MemberInfo)</signature>
                        <name>GetCustomAttribute</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.Reflection.MethodInfo)</signature>
                        <name>GetCustomAttribute</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.Reflection.Module)</signature>
                        <name>GetCustomAttribute</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.Reflection.ParameterInfo)</signature>
                        <name>GetCustomAttribute</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.Reflection.PropertyInfo)</signature>
                        <name>GetCustomAttribute</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.Type)</signature>
                        <name>GetCustomAttribute</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Reflection.FieldInfo)</signature>
                        <name>GetCustomAttributes</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Reflection.MemberInfo)</signature>
                        <name>GetCustomAttributes</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Reflection.MethodInfo)</signature>
                        <name>GetCustomAttributes</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Reflection.Module)</signature>
                        <name>GetCustomAttributes</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Reflection.ParameterInfo)</signature>
                        <name>GetCustomAttributes</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Reflection.PropertyInfo)</signature>
                        <name>GetCustomAttributes</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Type)</signature>
                        <name>GetCustomAttributes</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Reflection.MethodInfo&gt;(System.Type)</signature>
                        <name>GetMethodsOfReturnType</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Reflection.MethodInfo&gt;(System.Type, System.Reflection.BindingFlags)</signature>
                        <name>GetMethodsOfReturnType</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsNullable</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Reflection.FieldInfo&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Reflection.FieldInfo&gt;)</signature>
                        <name>WithAttribute</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Reflection.MemberInfo&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Reflection.MemberInfo&gt;)</signature>
                        <name>WithAttribute</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Reflection.MethodInfo&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Reflection.MethodInfo&gt;)</signature>
                        <name>WithAttribute</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Reflection.Module&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Reflection.Module&gt;)</signature>
                        <name>WithAttribute</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Reflection.ParameterInfo&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Reflection.ParameterInfo&gt;)</signature>
                        <name>WithAttribute</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Reflection.PropertyInfo&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Reflection.PropertyInfo&gt;)</signature>
                        <name>WithAttribute</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;(System.Collections.Generic.IEnumerable`1&lt;System.Type&gt;)</signature>
                        <name>WithAttribute</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.FileEntry</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device, Managed.Adb.FileEntry, string, Managed.Adb.FileListingService/FileTypes, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FileEntry)</signature>
                        <name>AddChild</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CheckAppPackageStatus</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileEntry(Managed.Adb.Device, string)</signature>
                        <name>CreateNoPermissions</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Delete</name>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, bool)</signature>
                        <name>FillPathBuilder</name>
                    </method>
                    <method>
                        <signature>void(System.Text.StringBuilder, bool, bool)</signature>
                        <name>FillPathBuilder</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>FillPathSegments</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileEntry(Managed.Adb.Device, string)</signature>
                        <name>Find</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileEntry(string)</signature>
                        <name>FindChild</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileEntry(Managed.Adb.Device, string)</signature>
                        <name>FindOrCreate</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.FileEntry&gt;()</signature>
                        <name>get_Children</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_Date</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Device()</signature>
                        <name>get_Device</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Exists</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_FetchTime</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullEscapedPath</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullPath</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullResolvedPath</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Group</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Info</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsApplicationFileName</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsApplicationPackage</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDirectory</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsExecutable</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLink</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsRoot</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LinkName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_NeedFetch</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Owner</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileEntry()</signature>
                        <name>get_Parent</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>get_PathSegments</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FilePermissions()</signature>
                        <name>get_Permissions</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_Size</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileListingService/FileTypes()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;Managed.Adb.FileEntry&gt;)</signature>
                        <name>set_Children</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_Date</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>set_Device</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Exists</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_FetchTime</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Group</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Info</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsApplicationPackage</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsExecutable</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsRoot</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LinkName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Owner</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FileEntry)</signature>
                        <name>set_Parent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FilePermissions)</signature>
                        <name>set_Permissions</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_Size</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FileListingService/FileTypes)</signature>
                        <name>set_Type</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.FileEntry&gt;</signature>
                        <name>&lt;Children&gt;k__BackingField</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;Date&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.Device</signature>
                        <name>&lt;Device&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Exists&gt;k__BackingField</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;FetchTime&gt;k__BackingField</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Group&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Info&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsApplicationPackage&gt;k__BackingField</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsExecutable&gt;k__BackingField</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsRoot&gt;k__BackingField</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;LinkName&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Owner&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.FileEntry</signature>
                        <name>&lt;Parent&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.FilePermissions</signature>
                        <name>&lt;Permissions&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;Size&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.FileListingService/FileTypes</signature>
                        <name>&lt;Type&gt;k__BackingField</name>
                        <newname>k</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.FileEntry&gt;()</signature>
                        <name>Children</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>Date</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.Device()</signature>
                        <name>Device</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Exists</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>FetchTime</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>FullEscapedPath</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>FullPath</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>FullResolvedPath</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Group</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Info</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsApplicationFileName</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsApplicationPackage</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsDirectory</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsExecutable</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsLink</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsRoot</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>LinkName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>NeedFetch</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Owner</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.FileEntry()</signature>
                        <name>Parent</name>
                    </property>
                    <property>
                        <signature>string[]()</signature>
                        <name>PathSegments</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.FilePermissions()</signature>
                        <name>Permissions</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>Size</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.FileListingService/FileTypes()</signature>
                        <name>Type</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.FileEntry/&lt;&gt;c__DisplayClass1</name>
                <newname>Managed.Adb.FileEntry/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Managed.Adb.FileEntry)</signature>
                        <name>&lt;FindChild&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.FileEntry/FileEntryComparer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(Managed.Adb.FileEntry, Managed.Adb.FileEntry)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.FileListingService</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FileEntry)</signature>
                        <name>DoLS</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileEntry(Managed.Adb.FileEntry, string)</signature>
                        <name>FindFileEntry</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileEntry(string)</signature>
                        <name>FindFileEntry</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Device()</signature>
                        <name>get_Device</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ForceBusyBox</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileEntry()</signature>
                        <name>get_Root</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;System.Threading.Thread&gt;()</signature>
                        <name>get_Threads</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileEntry[](Managed.Adb.FileEntry, bool, Managed.Adb.IListingReceiver)</signature>
                        <name>GetChildren</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>set_Device</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ForceBusyBox</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FileEntry)</signature>
                        <name>set_Root</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;System.Threading.Thread&gt;)</signature>
                        <name>set_Threads</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.FileEntry</signature>
                        <name>_root</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.Device</signature>
                        <name>&lt;Device&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;ForceBusyBox&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;System.Threading.Thread&gt;</signature>
                        <name>&lt;Threads&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>APK_FILE_PATTERN</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BUSYBOX_LS</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DIRECTORY_APP</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DIRECTORY_DATA</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DIRECTORY_MNT</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DIRECTORY_SD</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DIRECTORY_SDCARD</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DIRECTORY_SDEXT</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DIRECTORY_SYSTEM</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DIRECTORY_TEMP</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FILE_ROOT</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FILE_SEPARATOR</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>LS_PATTERN_EX</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PM_FULL_LISTING</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>REFRESH_RATE</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>REFRESH_TEST</name>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>RootLevelApprovedItems</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TOOLBOX_LS</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.Device()</signature>
                        <name>Device</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ForceBusyBox</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.FileEntry()</signature>
                        <name>Root</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;System.Threading.Thread&gt;()</signature>
                        <name>Threads</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.FileListingService/&lt;&gt;c__DisplayClass6</name>
                <newname>Managed.Adb.FileListingService/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>&lt;GetChildren&gt;b__4</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.FileListingService</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.FileEntry</signature>
                        <name>entry</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.IListingReceiver</signature>
                        <name>receiver</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.FileListingService/&lt;&gt;c__DisplayClass6/&lt;&gt;c__DisplayClass8</name>
                <newname>Managed.Adb.FileListingService/b/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FileEntry)</signature>
                        <name>&lt;GetChildren&gt;b__5</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.FileListingService/&lt;&gt;c__DisplayClass6</signature>
                        <name>CS$&lt;&gt;8__locals7</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.FileEntry&gt;</signature>
                        <name>map</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.FileListingService/FileTypes</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.FileListingService/FileTypes</signature>
                        <name>Block</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.FileListingService/FileTypes</signature>
                        <name>Character</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.FileListingService/FileTypes</signature>
                        <name>Directory</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.FileListingService/FileTypes</signature>
                        <name>DirectoryLink</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.FileListingService/FileTypes</signature>
                        <name>FIFO</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.FileListingService/FileTypes</signature>
                        <name>File</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.FileListingService/FileTypes</signature>
                        <name>Link</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.FileListingService/FileTypes</signature>
                        <name>Other</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.FileListingService/FileTypes</signature>
                        <name>Socket</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.FileListingService/ThreadState</name>
                <newname>Managed.Adb.FileListingService/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.FileEntry</signature>
                        <name>Entry</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Threading.Thread</signature>
                        <name>Thread</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.FilePermission</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanDelete</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanExecute</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanRead</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanWrite</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_CanDelete</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_CanExecute</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_CanRead</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_CanWrite</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>Managed.Adb.FilePermission/Modes()</signature>
                        <name>ToChmod</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;CanDelete&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;CanExecute&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;CanRead&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;CanWrite&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>CanDelete</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>CanExecute</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>CanRead</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>CanWrite</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.FilePermission/Modes</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.FilePermission/Modes</signature>
                        <name>Execute</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.FilePermission/Modes</signature>
                        <name>NoAccess</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.FilePermission/Modes</signature>
                        <name>Read</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.FilePermission/Modes</signature>
                        <name>Write</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.FilePermissions</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FilePermission, Managed.Adb.FilePermission, Managed.Adb.FilePermission)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FilePermission()</signature>
                        <name>get_Group</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FilePermission()</signature>
                        <name>get_Other</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FilePermission()</signature>
                        <name>get_User</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FilePermission)</signature>
                        <name>set_Group</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FilePermission)</signature>
                        <name>set_Other</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FilePermission)</signature>
                        <name>set_User</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToChmod</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.FilePermission</signature>
                        <name>&lt;Group&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.FilePermission</signature>
                        <name>&lt;Other&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.FilePermission</signature>
                        <name>&lt;User&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.FilePermission()</signature>
                        <name>Group</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.FilePermission()</signature>
                        <name>Other</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.FilePermission()</signature>
                        <name>User</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.FileSystem</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Managed.Adb.FileEntry)</signature>
                        <name>&lt;get_DeviceBlocks&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.FilePermissions)</signature>
                        <name>Chmod</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Chmod</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Copy</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileEntry(Managed.Adb.FileEntry)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileEntry(string)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FileEntry)</signature>
                        <name>Delete</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Delete</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Device()</signature>
                        <name>get_Device</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Managed.Adb.FileEntry&gt;()</signature>
                        <name>get_DeviceBlocks</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsMountPointReadOnly</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>MakeDirectory</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>MakeDirectory</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.CommandErrorReceiver)</signature>
                        <name>MakeDirectoryFallbackInternal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.MountPoint)</signature>
                        <name>Mount</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.MountPoint, string)</signature>
                        <name>Mount</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Mount</name>
                    </method>
                    <method>
                        <signature>void(string, string, string, bool)</signature>
                        <name>Mount</name>
                    </method>
                    <method>
                        <signature>void(string, string, string, bool, string)</signature>
                        <name>Mount</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Move</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ResolveLink</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>set_Device</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.MountPoint)</signature>
                        <name>Unmount</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.MountPoint, string)</signature>
                        <name>Unmount</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Unmount</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Unmount</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.Device</signature>
                        <name>&lt;Device&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;Managed.Adb.FileEntry,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.Device()</signature>
                        <name>Device</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;Managed.Adb.FileEntry&gt;()</signature>
                        <name>DeviceBlocks</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.GetPropReceiver</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Done</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Device()</signature>
                        <name>get_Device</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>set_Device</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.Device</signature>
                        <name>&lt;Device&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>GETPROP_COMMAND</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>GETPROP_PATTERN</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.Device()</signature>
                        <name>Device</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.IClient</name>
                <methodlist>
                    <method>
                        <signature>void(int32, Managed.Adb.ChunkHandler)</signature>
                        <name>AddRequestId</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>DdmSeen</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DumpHprof</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>EnableAllocationTracker</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ExecuteGarbageCollector</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ClientChangeState()</signature>
                        <name>get_ChangeState</name>
                    </method>
                    <method>
                        <signature>System.Net.Sockets.Socket()</signature>
                        <name>get_Channel</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ClientData()</signature>
                        <name>get_ClientData</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ClientConnectionState()</signature>
                        <name>get_ConnectionState</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Debugger()</signature>
                        <name>get_Debugger</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_DebuggerListenPort</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IDevice()</signature>
                        <name>get_Device</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Device()</signature>
                        <name>get_DeviceImplementation</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDdmAware</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDebuggerAttached</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsHeapUpdateEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSelectedClient</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsThreadUpdateEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsValid</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ChunkHandler(int32)</signature>
                        <name>IsResponseToUs</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Kill</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>ListenForDebugger</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>PacketFailed</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Register</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveRequestId</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RequestAllocationDetails</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RequestAllocationStatus</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RequestMethodProfilingStatus</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>RequestNativeHeapInformation</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RequestThreadStackTrace</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RequestThreadUpdate</name>
                    </method>
                    <method>
                        <signature>void(object, Managed.Adb.ChunkHandler)</signature>
                        <name>SendAndConsume</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket)</signature>
                        <name>set_Channel</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsHeapUpdateEnabled</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsSelectedClient</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsThreadUpdateEnabled</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ToggleMethodProfiling</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.ClientChangeMask)</signature>
                        <name>Update</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>Managed.Adb.ClientChangeState()</signature>
                        <name>ChangeState</name>
                    </property>
                    <property>
                        <signature>System.Net.Sockets.Socket()</signature>
                        <name>Channel</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.ClientData()</signature>
                        <name>ClientData</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.ClientConnectionState()</signature>
                        <name>ConnectionState</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.Debugger()</signature>
                        <name>Debugger</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>DebuggerListenPort</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.IDevice()</signature>
                        <name>Device</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.Device()</signature>
                        <name>DeviceImplementation</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsDdmAware</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsDebuggerAttached</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsHeapUpdateEnabled</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsSelectedClient</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsThreadUpdateEnabled</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsValid</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.IDebugPortProvider</name>
                <methodlist>
                    <method>
                        <signature>int32(Managed.Adb.IDevice, string)</signature>
                        <name>getPort</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.IDevice</name>
                <methodlist>
                    <method>
                        <signature>void(System.EventHandler`1&lt;System.EventArgs&gt;)</signature>
                        <name>add_BuildInfoChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;System.EventArgs&gt;)</signature>
                        <name>add_ClientListChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;System.EventArgs&gt;)</signature>
                        <name>add_StateChanged</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.RawImage()</signature>
                        <name>CaptureScreen</name>
                    </method>
                    <method>
                        <signature>bool(int32, int32)</signature>
                        <name>CreateForward</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver)</signature>
                        <name>ExecuteRootShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver, int32)</signature>
                        <name>ExecuteRootShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver, int32, object[])</signature>
                        <name>ExecuteRootShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver, object[])</signature>
                        <name>ExecuteRootShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver)</signature>
                        <name>ExecuteShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver, int32)</signature>
                        <name>ExecuteShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver, int32, object[])</signature>
                        <name>ExecuteShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver, object[])</signature>
                        <name>ExecuteShellCommand</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AvdName</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.BusyBox()</signature>
                        <name>get_BusyBox</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.IClient&gt;()</signature>
                        <name>get_Clients</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;()</signature>
                        <name>get_EnvironmentVariables</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileListingService()</signature>
                        <name>get_FileListingService</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileSystem()</signature>
                        <name>get_FileSystem</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsBootLoader</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEmulator</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsOffline</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsOnline</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.MountPoint&gt;()</signature>
                        <name>get_MountPoints</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;()</signature>
                        <name>get_Properties</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SerialNumber</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.DeviceState()</signature>
                        <name>get_State</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.SyncService()</signature>
                        <name>get_SyncService</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetProperty</name>
                    </method>
                    <method>
                        <signature>string(string[])</signature>
                        <name>GetProperty</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>InstallPackage</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>InstallRemotePackage</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RefreshEnvironmentVariables</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RefreshMountPoints</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RefreshProperties</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;System.EventArgs&gt;)</signature>
                        <name>remove_BuildInfoChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;System.EventArgs&gt;)</signature>
                        <name>remove_ClientListChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler`1&lt;System.EventArgs&gt;)</signature>
                        <name>remove_StateChanged</name>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>RemoveForward</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>RemoveRemotePackage</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AvdName</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>SyncPackageToDevice</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>UninstallPackage</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>AvdName</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.BusyBox()</signature>
                        <name>BusyBox</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.IClient&gt;()</signature>
                        <name>Clients</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;()</signature>
                        <name>EnvironmentVariables</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.FileListingService()</signature>
                        <name>FileListingService</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.FileSystem()</signature>
                        <name>FileSystem</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsBootLoader</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsEmulator</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsOffline</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsOnline</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.MountPoint&gt;()</signature>
                        <name>MountPoints</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;()</signature>
                        <name>Properties</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>SerialNumber</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.DeviceState()</signature>
                        <name>State</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.SyncService()</signature>
                        <name>SyncService</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>System.EventHandler`1&lt;System.EventArgs&gt;</signature>
                        <name>BuildInfoChanged</name>
                    </event>
                    <event>
                        <signature>System.EventHandler`1&lt;System.EventArgs&gt;</signature>
                        <name>ClientListChanged</name>
                    </event>
                    <event>
                        <signature>System.EventHandler`1&lt;System.EventArgs&gt;</signature>
                        <name>StateChanged</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>Managed.Adb.IListingReceiver</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.FileEntry)</signature>
                        <name>RefreshEntry</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FileEntry, Managed.Adb.FileEntry[])</signature>
                        <name>SetChildren</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ILogOutput</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.LogLevel/LogLevelInfo, string, string)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.LogLevel/LogLevelInfo, string, string)</signature>
                        <name>WriteAndPromptLog</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.InstallReceiver</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ErrorMessage</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Success</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ErrorMessage</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Success</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ErrorMessage&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Success&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FAILURE_PATTERN</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>SUCCESS_OUTPUT</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>UNKNOWN_ERROR</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ErrorMessage</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Success</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.IO.BEBinaryReader</name>
                <methodlist>
                    <method>
                        <signature>void(System.IO.MemoryStream)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>ReadDouble</name>
                    </method>
                    <method>
                        <signature>int16()</signature>
                        <name>ReadInt16</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ReadInt32</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>ReadInt64</name>
                    </method>
                    <method>
                        <signature>float32()</signature>
                        <name>ReadSingle</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.IO.BEBinaryWriter</name>
                <methodlist>
                    <method>
                        <signature>void(System.IO.MemoryStream)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(float32)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(int16)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>Write</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.IO.ByteBuffer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, Managed.Adb.IO.ByteOrder)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], Managed.Adb.IO.ByteOrder)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Remaining</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteOrder()</signature>
                        <name>GetOrder</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>length</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>ReadBoolean</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(int32)</signature>
                        <name>ReadBuffer</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(int32, int32)</signature>
                        <name>ReadBuffer</name>
                    </method>
                    <method>
                        <signature>unsigned int8()</signature>
                        <name>ReadByte</name>
                    </method>
                    <method>
                        <signature>unsigned int8(int32)</signature>
                        <name>ReadByte</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>ReadDouble</name>
                    </method>
                    <method>
                        <signature>float64(int32)</signature>
                        <name>ReadDouble</name>
                    </method>
                    <method>
                        <signature>int16()</signature>
                        <name>ReadInt16</name>
                    </method>
                    <method>
                        <signature>int16(int32)</signature>
                        <name>ReadInt16</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ReadInt32</name>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>ReadInt32</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>ReadInt64</name>
                    </method>
                    <method>
                        <signature>int64(int32)</signature>
                        <name>ReadInt64</name>
                    </method>
                    <method>
                        <signature>float32()</signature>
                        <name>ReadSingle</name>
                    </method>
                    <method>
                        <signature>float32(int32)</signature>
                        <name>ReadSingle</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ReadString</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>ReadString</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer()</signature>
                        <name>Rewind</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(Managed.Adb.IO.ByteOrder)</signature>
                        <name>SetOrder</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>Skip</name>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>Skip</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(unsigned int8[])</signature>
                        <name>Wrap</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(unsigned int8[], int32, int32)</signature>
                        <name>Wrap</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(unsigned int8[], int32, int32, Managed.Adb.IO.ByteOrder)</signature>
                        <name>Wrap</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(unsigned int8[], Managed.Adb.IO.ByteOrder)</signature>
                        <name>Wrap</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(bool)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(float32)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(float64)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(int16)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(int32)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(int32, float32)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(int32, float64)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(int32, int16)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(int32, int32)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(int32, int64)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(int64)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(Managed.Adb.IO.ByteBuffer)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(string)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(unsigned int8)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(unsigned int8, int32)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IO.ByteBuffer(unsigned int8[])</signature>
                        <name>Write</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.IO.ByteOrder</signature>
                        <name>order</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.IO.BinaryReader</signature>
                        <name>reader</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.IO.BinaryWriter</signature>
                        <name>writer</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Remaining</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.IO.ByteOrder</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.IO.ByteOrder</signature>
                        <name>BIG_ENDIAN</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.IO.ByteOrder</signature>
                        <name>LITTLE_ENDIAN</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.IO.LinuxPath</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>string(System.Text.RegularExpressions.Match)</signature>
                        <name>&lt;Escape&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>CanPathCircumventSecurityNative</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>ChangeExtension</name>
                    </method>
                    <method>
                        <signature>bool(char*, int32, string, bool)</signature>
                        <name>CharArrayStartsWithOrdinal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(char[], int32, string, bool)</signature>
                        <name>CharArrayStartsWithOrdinal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>CheckInvalidPathChars</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>Combine</name>
                    </method>
                    <method>
                        <signature>string(string, string, string)</signature>
                        <name>Combine</name>
                    </method>
                    <method>
                        <signature>string(string, string, string, string)</signature>
                        <name>Combine</name>
                    </method>
                    <method>
                        <signature>string(string[])</signature>
                        <name>Combine</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>CombineNoChecks</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>Escape</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>FixupPath</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetDirectoryName</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetExtension</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetFileName</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetFileNameWithoutExtension</name>
                    </method>
                    <method>
                        <signature>char[]()</signature>
                        <name>GetInvalidFileNameChars</name>
                    </method>
                    <method>
                        <signature>char[]()</signature>
                        <name>GetInvalidPathChars</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetPathRoot</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetPathWithoutFile</name>
                    </method>
                    <method>
                        <signature>int32(string)</signature>
                        <name>GetRootLength</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>HasExtension</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>InternalCombine</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>IsDirectorySeparator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsPathRooted</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>Quote</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>char</signature>
                        <name>AltDirectorySeparatorChar</name>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.MatchEvaluator</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>char</signature>
                        <name>DirectorySeparatorChar</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ESCAPEPATTERN</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>InvalidFileNameChars</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MAX_DIRECTORY_PATH</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MAX_PATH</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MaxPath</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>char</signature>
                        <name>PathSeparator</name>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>RealInvalidPathChars</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.IO.Rgb565</name>
                <methodlist>
                    <method>
                        <signature>System.Drawing.Image(System.Drawing.Imaging.PixelFormat, unsigned int8[], int32, int32)</signature>
                        <name>ToImage</name>
                    </method>
                    <method>
                        <signature>System.Drawing.Image(unsigned int8[], int32, int32)</signature>
                        <name>ToImage</name>
                    </method>
                    <method>
                        <signature>bool(System.Drawing.Image, string)</signature>
                        <name>ToRgb565</name>
                    </method>
                    <method>
                        <signature>bool(System.Drawing.Image, System.IO.Stream)</signature>
                        <name>ToRgb565</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.IPacketConsumer</name>
                <methodlist>
                    <method>
                        <signature>void(object)</signature>
                        <name>ForwardPacketToClient</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>GetJdwpPacket</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>SendAndConsume</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>SendHandshake</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.IShellOutputReceiver</name>
                <methodlist>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>AddOutput</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCancelled</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsCancelled</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ISyncProgressMonitor</name>
                <methodlist>
                    <method>
                        <signature>void(int64)</signature>
                        <name>Advance</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCanceled</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>StartSubTask</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsCanceled</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.ListingServiceReceiver</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.FileEntry, System.Collections.Generic.List`1&lt;Managed.Adb.FileEntry&gt;, System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>FinishLinks</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileEntry[]()</signature>
                        <name>get_CurrentChildren</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.FileEntry&gt;()</signature>
                        <name>get_Entries</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCancelled</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Links</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileEntry()</signature>
                        <name>get_Parent</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileEntry(string)</signature>
                        <name>GetExistingEntry</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FileEntry[])</signature>
                        <name>set_CurrentChildren</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;Managed.Adb.FileEntry&gt;)</signature>
                        <name>set_Entries</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Links</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FileEntry)</signature>
                        <name>set_Parent</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.FileEntry[]</signature>
                        <name>&lt;CurrentChildren&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.FileEntry&gt;</signature>
                        <name>&lt;Entries&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>&lt;Links&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.FileEntry</signature>
                        <name>&lt;Parent&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>LINK_FORMAT</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.FileEntry[]()</signature>
                        <name>CurrentChildren</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.FileEntry&gt;()</signature>
                        <name>Entries</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsCancelled</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>Links</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.FileEntry()</signature>
                        <name>Parent</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Log</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>d</name>
                    </method>
                    <method>
                        <signature>void(string, string, object[])</signature>
                        <name>d</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>e</name>
                    </method>
                    <method>
                        <signature>void(string, string, object[])</signature>
                        <name>e</name>
                    </method>
                    <method>
                        <signature>void(string, string, System.Exception)</signature>
                        <name>e</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>e</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo()</signature>
                        <name>get_Level</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ILogOutput()</signature>
                        <name>get_LogOutput</name>
                    </method>
                    <method>
                        <signature>string(Managed.Adb.LogLevel/LogLevelInfo, string, string)</signature>
                        <name>GetLogFormatString</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.LogLevel/LogLevelInfo, unsigned int8[], int32, int32)</signature>
                        <name>HexDump</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>HexDump</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>i</name>
                    </method>
                    <method>
                        <signature>void(string, string, object[])</signature>
                        <name>i</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.LogLevel/LogLevelInfo, string, string)</signature>
                        <name>LogAndDisplay</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.LogLevel/LogLevelInfo)</signature>
                        <name>set_Level</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.ILogOutput)</signature>
                        <name>set_LogOutput</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>v</name>
                    </method>
                    <method>
                        <signature>void(string, string, object[])</signature>
                        <name>v</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>w</name>
                    </method>
                    <method>
                        <signature>void(string, string, object[])</signature>
                        <name>w</name>
                    </method>
                    <method>
                        <signature>void(string, string, System.Exception)</signature>
                        <name>w</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>w</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.LogLevel/LogLevelInfo, string, string)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.LogLevel/LogLevelInfo, string, string)</signature>
                        <name>WriteLine</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo</signature>
                        <name>&lt;Level&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.ILogOutput</signature>
                        <name>&lt;LogOutput&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>HEXDIGIT</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>SpaceLine</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo()</signature>
                        <name>Level</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.ILogOutput()</signature>
                        <name>LogOutput</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Log/Config</name>
                <newname>Managed.Adb.Log/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>LOGD</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>LOGV</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.LogLevel</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo()</signature>
                        <name>get_Assert</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo()</signature>
                        <name>get_Debug</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo()</signature>
                        <name>get_Error</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo()</signature>
                        <name>get_Info</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2/KeyCollection&lt;string,Managed.Adb.LogLevel/LogLevelInfo&gt;()</signature>
                        <name>get_Keys</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.LogLevel/LogLevelInfo&gt;()</signature>
                        <name>get_Levels</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2/ValueCollection&lt;string,Managed.Adb.LogLevel/LogLevelInfo&gt;()</signature>
                        <name>get_Values</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo()</signature>
                        <name>get_Warn</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo()</signature>
                        <name>get_Verbose</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo(char)</signature>
                        <name>GetByLetter</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo(string)</signature>
                        <name>GetByLetter</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo(string)</signature>
                        <name>GetByString</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.LogLevel/LogLevelInfo)</signature>
                        <name>set_Assert</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.LogLevel/LogLevelInfo)</signature>
                        <name>set_Debug</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.LogLevel/LogLevelInfo)</signature>
                        <name>set_Error</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.LogLevel/LogLevelInfo)</signature>
                        <name>set_Info</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.LogLevel/LogLevelInfo&gt;)</signature>
                        <name>set_Levels</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.LogLevel/LogLevelInfo)</signature>
                        <name>set_Warn</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.LogLevel/LogLevelInfo)</signature>
                        <name>set_Verbose</name>
                        <newname>f</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo</signature>
                        <name>&lt;Assert&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo</signature>
                        <name>&lt;Debug&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo</signature>
                        <name>&lt;Error&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo</signature>
                        <name>&lt;Info&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.LogLevel/LogLevelInfo&gt;</signature>
                        <name>&lt;Levels&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo</signature>
                        <name>&lt;Warn&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo</signature>
                        <name>&lt;Verbose&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo()</signature>
                        <name>Assert</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo()</signature>
                        <name>Debug</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo()</signature>
                        <name>Error</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo()</signature>
                        <name>Info</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2/KeyCollection&lt;string,Managed.Adb.LogLevel/LogLevelInfo&gt;()</signature>
                        <name>Keys</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.LogLevel/LogLevelInfo&gt;()</signature>
                        <name>Levels</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2/ValueCollection&lt;string,Managed.Adb.LogLevel/LogLevelInfo&gt;()</signature>
                        <name>Values</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo()</signature>
                        <name>Warn</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.LogLevel/LogLevelInfo()</signature>
                        <name>Verbose</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.LogLevel/LogLevelInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, string, char)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>get_Letter</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Priority</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>set_Letter</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Priority</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Value</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>char</signature>
                        <name>&lt;Letter&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Priority&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>char()</signature>
                        <name>Letter</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Priority</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Value</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Logs.EventContainer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(int32, string, int32, int32, int32, int32, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Logs.LogEntry, int32, string, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_DataType</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Logs.EventValueType()</signature>
                        <name>get_EventValueType</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Nanosecond</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ProcessId</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Second</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Tag</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_TagName</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ThreadId</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_Timestamp</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetInt</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>GetLong</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>GetObjectFromStorageString</name>
                    </method>
                    <method>
                        <signature>string(object)</signature>
                        <name>GetStorageString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetString</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Logs.EventValueType(object)</signature>
                        <name>GetType</name>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>object(object, int32, bool)</signature>
                        <name>GetValue</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>float64(int32)</signature>
                        <name>GetValueAsDouble</name>
                    </method>
                    <method>
                        <signature>float64(object, int32, bool)</signature>
                        <name>GetValueAsDouble</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetValueAsString</name>
                    </method>
                    <method>
                        <signature>string(object, int32, bool)</signature>
                        <name>GetValueAsString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(object)</signature>
                        <name>ObjectToString</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Data</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Nanosecond</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ProcessId</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Second</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Tag</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_TagName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ThreadId</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>&lt;Data&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Nanosecond&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ProcessId&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Second&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Tag&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;TagName&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ThreadId&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>m_epoc</name>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>STORAGE_PATTERN</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object()</signature>
                        <name>Data</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>DataType</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.Logs.EventValueType()</signature>
                        <name>EventValueType</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Nanosecond</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ProcessId</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Second</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Tag</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>TagName</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ThreadId</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>Timestamp</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Logs.EventLogParser</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;int32,string&gt;()</signature>
                        <name>get_TagMap</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;int32,Managed.Adb.Logs.EventValueDescription[]&gt;()</signature>
                        <name>get_ValueDescriptionMap</name>
                    </method>
                    <method>
                        <signature>bool(Managed.Adb.Device)</signature>
                        <name>Init</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Logs.EventContainer(Managed.Adb.Logs.LogEntry)</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32, System.Collections.Generic.List`1&lt;object&gt;)</signature>
                        <name>ParseBinaryEvent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Managed.Adb.Logs.EventValueDescription[](string)</signature>
                        <name>ProcessDescription</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>ProcessTagLine</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>EVENT_TAG_MAP_FILE</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>EVENT_TYPE_INT</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>EVENT_TYPE_LIST</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>EVENT_TYPE_LONG</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>EVENT_TYPE_STRING</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;int32,string&gt;</signature>
                        <name>mTagMap</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;int32,Managed.Adb.Logs.EventValueDescription[]&gt;</signature>
                        <name>mValueDescriptionMap</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>PATTERN_DESCRIPTION</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>PATTERN_SIMPLE_TAG</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>PATTERN_TAG_WITH_DESC</name>
                        <newname>g</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2&lt;int32,string&gt;()</signature>
                        <name>TagMap</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2&lt;int32,Managed.Adb.Logs.EventValueDescription[]&gt;()</signature>
                        <name>ValueDescriptionMap</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Logs.EventValueDescription</name>
                <methodlist>
                    <method>
                        <signature>void(string, Managed.Adb.Logs.EventValueType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.Logs.EventValueType, Managed.Adb.Logs.ValueType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>CheckForType</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Logs.EventValueType()</signature>
                        <name>get_EventValueType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Logs.ValueType()</signature>
                        <name>get_ValueType</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>GetObjectFromString</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Logs.EventValueType)</signature>
                        <name>set_EventValueType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Logs.ValueType)</signature>
                        <name>set_ValueType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.Logs.EventValueType</signature>
                        <name>&lt;EventValueType&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.ValueType</signature>
                        <name>&lt;ValueType&gt;k__BackingField</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.Logs.EventValueType()</signature>
                        <name>EventValueType</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.Logs.ValueType()</signature>
                        <name>ValueType</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Logs.EventValueType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.Logs.EventValueType</signature>
                        <name>INT</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.EventValueType</signature>
                        <name>LIST</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.EventValueType</signature>
                        <name>LONG</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.EventValueType</signature>
                        <name>STRING</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.EventValueType</signature>
                        <name>TREE</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.EventValueType</signature>
                        <name>UNKNOWN</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Logs.GcEventContainer</name>
                <methodlist>
                    <method>
                        <signature>void(int32, string, int32, int32, int32, int32, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Logs.LogEntry, int32, string, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int64(int32)</signature>
                        <name>Float12ToInt</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Managed.Adb.Logs.EventValueType()</signature>
                        <name>get_EventValueType</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Logs.EventValueDescription[]()</signature>
                        <name>get_ValueDescriptions</name>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>float64(int32)</signature>
                        <name>GetValueAsDouble</name>
                    </method>
                    <method>
                        <signature>int64(int32)</signature>
                        <name>GetValueAsLong</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetValueAsString</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(object)</signature>
                        <name>ObjectToString</name>
                    </method>
                    <method>
                        <signature>void(int64, int32)</signature>
                        <name>ParseDvmHeapInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](int64)</signature>
                        <name>Put64bitsToArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int64</signature>
                        <name>actualSize</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>allowedSize</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>bytesAllocated</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>bytesFreed</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>dlmallocFootprint</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>externalBytesAllocated</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>externalLimit</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>GC_EVENT_TAG</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>gcTime</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>mallinfoTotalAllocatedSpace</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>objectsAllocated</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>objectsFreed</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>processId</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>softLimit</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>zActualSize</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>zAllowedSize</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>zBytesAllocated</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>zObjectsAllocated</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.Logs.EventValueType()</signature>
                        <name>EventValueType</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.Logs.EventValueDescription[]()</signature>
                        <name>ValueDescriptions</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Logs.ILogListener</name>
                <methodlist>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>NewData</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Logs.LogEntry, System.DateTime)</signature>
                        <name>NewEntry</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Logs.ITailReceiver</name>
                <methodlist>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCancelled</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>Tail</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsCancelled</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Logs.LogEntry</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_NanoSeconds</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ProcessId</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Seconds</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ThreadId</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>set_Data</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Length</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_NanoSeconds</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ProcessId</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Seconds</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ThreadId</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>&lt;Data&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Length&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;NanoSeconds&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ProcessId&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Seconds&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ThreadId&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>unsigned int8[]()</signature>
                        <name>Data</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Length</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>NanoSeconds</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ProcessId</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Seconds</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ThreadId</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Logs.LogReceiver</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.Logs.ILogListener)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Cancel</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Logs.LogEntry(unsigned int8[], int32)</signature>
                        <name>CreateEntry</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Action()</signature>
                        <name>get_CancelAction</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Logs.LogEntry()</signature>
                        <name>get_CurrentEntry</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_EntryDataOffset</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_EntryHeaderBuffer</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_EntryHeaderOffset</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCancelled</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Logs.ILogListener()</signature>
                        <name>get_Listener</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>get_NewTimestamp</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32, System.DateTime)</signature>
                        <name>ParseNewData</name>
                    </method>
                    <method>
                        <signature>void(System.Action)</signature>
                        <name>set_CancelAction</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Logs.LogEntry)</signature>
                        <name>set_CurrentEntry</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_EntryDataOffset</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>set_EntryHeaderBuffer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_EntryHeaderOffset</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsCancelled</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Logs.ILogListener)</signature>
                        <name>set_Listener</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>set_NewTimestamp</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Action</signature>
                        <name>&lt;CancelAction&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.LogEntry</signature>
                        <name>&lt;CurrentEntry&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;EntryDataOffset&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>&lt;EntryHeaderBuffer&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;EntryHeaderOffset&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsCancelled&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.ILogListener</signature>
                        <name>&lt;Listener&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;</signature>
                        <name>&lt;NewTimestamp&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>ENTRY_HEADER_SIZE</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Action()</signature>
                        <name>CancelAction</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.Logs.LogEntry()</signature>
                        <name>CurrentEntry</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>EntryDataOffset</name>
                    </property>
                    <property>
                        <signature>unsigned int8[]()</signature>
                        <name>EntryHeaderBuffer</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>EntryHeaderOffset</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsCancelled</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.Logs.ILogListener()</signature>
                        <name>Listener</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>NewTimestamp</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Logs.TagReceiver</name>
                <methodlist>
                    <method>
                        <signature>void(System.Action`1&lt;string&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Action`1&lt;string&gt;</signature>
                        <name>m_action</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Logs.ValueType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.Logs.ValueType</signature>
                        <name>ALLOCATIONS</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.ValueType</signature>
                        <name>BYTES</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.ValueType</signature>
                        <name>ID</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.ValueType</signature>
                        <name>MILLISECONDS</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.ValueType</signature>
                        <name>NOT_APPLICABLE</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.ValueType</signature>
                        <name>OBJECTS</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.ValueType</signature>
                        <name>PERCENT</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Logs.ValueTypeMethods</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.Logs.ValueType, Managed.Adb.Logs.EventValueType)</signature>
                        <name>CheckType</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.MadbExtensions</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>int16(int16, int32)</signature>
                        <name>BitShiftRight</name>
                    </method>
                    <method>
                        <signature>int32(int32, int32)</signature>
                        <name>BitShiftRight</name>
                    </method>
                    <method>
                        <signature>int64(int64, int32)</signature>
                        <name>BitShiftRight</name>
                    </method>
                    <method>
                        <signature>string(string[])</signature>
                        <name>Combine</name>
                    </method>
                    <method>
                        <signature>int64(System.DateTime)</signature>
                        <name>CurrentTimeMillis</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>GetBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string, string)</signature>
                        <name>GetBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string, System.Text.Encoding)</signature>
                        <name>GetBytes</name>
                    </method>
                    <method>
                        <signature>System.DateTime(System.DateTime)</signature>
                        <name>GetEpoch</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[])</signature>
                        <name>GetString</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[], int32, int32)</signature>
                        <name>GetString</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[], int32, int32, string)</signature>
                        <name>GetString</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[], int32, int32, System.Text.Encoding)</signature>
                        <name>GetString</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[], string)</signature>
                        <name>GetString</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[], System.Text.Encoding)</signature>
                        <name>GetString</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], System.Action`1&lt;unsigned int8[]&gt;)</signature>
                        <name>IntReverseForRawImage</name>
                    </method>
                    <method>
                        <signature>bool(string, string)</signature>
                        <name>IsMatch</name>
                    </method>
                    <method>
                        <signature>bool(string, string, System.Text.RegularExpressions.RegexOptions)</signature>
                        <name>IsMatch</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsNullOrWhiteSpace</name>
                    </method>
                    <method>
                        <signature>System.Text.RegularExpressions.Match(string, string)</signature>
                        <name>Match</name>
                    </method>
                    <method>
                        <signature>System.Text.RegularExpressions.Match(string, string, System.Text.RegularExpressions.RegexOptions)</signature>
                        <name>Match</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32)</signature>
                        <name>ReadInt32</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[])</signature>
                        <name>ReverseByteArray</name>
                    </method>
                    <method>
                        <signature>unsigned int16(unsigned int16)</signature>
                        <name>ReverseBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int32(unsigned int32)</signature>
                        <name>ReverseBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int64(unsigned int64)</signature>
                        <name>ReverseBytes</name>
                    </method>
                    <method>
                        <signature>System.DateTime(int64)</signature>
                        <name>ToDateTimeFromBinary</name>
                    </method>
                    <method>
                        <signature>System.DateTime(int64)</signature>
                        <name>ToDateTimeFromFileTime</name>
                    </method>
                    <method>
                        <signature>System.DateTime(int64)</signature>
                        <name>ToDateTimeFromFileTimeUtc</name>
                    </method>
                    <method>
                        <signature>System.DateTime(float64)</signature>
                        <name>ToDateTimeFromOADate</name>
                    </method>
                    <method>
                        <signature>System.DateTime(string)</signature>
                        <name>ToDateTimeFromString</name>
                    </method>
                    <method>
                        <signature>System.DateTime(string, System.IFormatProvider)</signature>
                        <name>ToDateTimeFromString</name>
                    </method>
                    <method>
                        <signature>System.DateTime(string, System.IFormatProvider, System.Globalization.DateTimeStyles)</signature>
                        <name>ToDateTimeFromString</name>
                    </method>
                    <method>
                        <signature>System.DateTime(int32)</signature>
                        <name>ToDateTimeFromUnixEpoch</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(int16)</signature>
                        <name>ToEnum</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(int32)</signature>
                        <name>ToEnum</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(int64)</signature>
                        <name>ToEnum</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(int8)</signature>
                        <name>ToEnum</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(unsigned int16)</signature>
                        <name>ToEnum</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(unsigned int32)</signature>
                        <name>ToEnum</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(unsigned int64)</signature>
                        <name>ToEnum</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(unsigned int8)</signature>
                        <name>ToEnum</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8)</signature>
                        <name>ToHex</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[])</signature>
                        <name>ToHex</name>
                    </method>
                    <method>
                        <signature>int64(System.DateTime)</signature>
                        <name>ToUnixEpoch</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>Epoch</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.MonitorThread</name>
                <newname>Managed.Adb.d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.IClient, bool)</signature>
                        <name>DropClient</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.IClient&gt;()</signature>
                        <name>get_Clients</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>Managed.Adb.MonitorThread()</signature>
                        <name>get_Instance</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Quit</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;Managed.Adb.IClient&gt;)</signature>
                        <name>set_Clients</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Quit</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>SetDebugSelectedPort</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.MonitorThread</signature>
                        <name>_instance</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Managed.Adb.IClient&gt;</signature>
                        <name>&lt;Clients&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Quit&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.MonitorThread/ThreadState</name>
                <newname>Managed.Adb.d/a</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.MonitorThread/ThreadState</signature>
                        <name>Disconnected</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.MonitorThread/ThreadState</signature>
                        <name>Ready</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.MonitorThread/ThreadState</signature>
                        <name>UNKNOWN</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.MoreLinq.KeyValuePair</name>
                <newname>Managed.Adb.MoreLinq.a</newname>
                <methodlist>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.KeyValuePair`2&lt;!!0,!!1&gt;(!!0, !!1)</signature>
                        <name>Create</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.MoreLinq.MoreEnumerable</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>&lt;Batch&gt;b__7</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>!!0(!!0)</signature>
                        <name>&lt;BatchImpl&gt;b__8</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>!!0(!!0)</signature>
                        <name>&lt;GroupAdjacent&gt;b__29</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.ArgumentOutOfRangeException(string)</signature>
                        <name>&lt;ThrowIfNegative&gt;b__54</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.ArgumentOutOfRangeException(string)</signature>
                        <name>&lt;ThrowIfNonPositive&gt;b__56</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.ArgumentNullException(string)</signature>
                        <name>&lt;ThrowIfNull&gt;b__58</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.ArgumentNullException(string)</signature>
                        <name>&lt;ThrowIfNullOrEmpty&gt;b__5a</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.ArgumentNullException(string)</signature>
                        <name>&lt;ThrowIfNullOrWhiteSpace&gt;b__5c</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, int32)</signature>
                        <name>AssertCount</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, int32, System.Func`3&lt;int32,int32,System.Exception&gt;)</signature>
                        <name>AssertCount</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, int32, System.Func`3&lt;int32,int32,System.Exception&gt;)</signature>
                        <name>AssertCountImpl</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!1&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, int32, System.Func`2&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;,!!1&gt;)</signature>
                        <name>Batch</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, int32)</signature>
                        <name>Batch</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!1&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, int32, System.Func`2&lt;System.Collections.Generic.IEnumerable`1&lt;!!0&gt;,!!1&gt;)</signature>
                        <name>BatchImpl</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(!!0, System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>Concat</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, !!0)</signature>
                        <name>Concat</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>Consume</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>Managed.Adb.MoreLinq.MoreEnumerable/Grouping`2&lt;!!0,!!1&gt;(!!0, System.Collections.Generic.IList`1&lt;!!1&gt;)</signature>
                        <name>CreateGroupAdjacentGrouping</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,!!1&gt;)</signature>
                        <name>DistinctBy</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,!!1&gt;, System.Collections.Generic.IEqualityComparer`1&lt;!!1&gt;)</signature>
                        <name>DistinctBy</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,!!1&gt;, System.Collections.Generic.IEqualityComparer`1&lt;!!1&gt;)</signature>
                        <name>DistinctByImpl</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,!!1&gt;)</signature>
                        <name>ExceptBy</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,!!1&gt;, System.Collections.Generic.IEqualityComparer`1&lt;!!1&gt;)</signature>
                        <name>ExceptBy</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,!!1&gt;, System.Collections.Generic.IEqualityComparer`1&lt;!!1&gt;)</signature>
                        <name>ExceptByImpl</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, int32, System.Func`3&lt;int32,int32,System.Exception&gt;)</signature>
                        <name>ExpectingCountYieldingImpl</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Action`1&lt;!!0&gt;)</signature>
                        <name>ForEach</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(!!0, System.Func`2&lt;!!0,!!0&gt;)</signature>
                        <name>Generate</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Func`2&lt;int32,!!0&gt;)</signature>
                        <name>GenerateByIndex</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Func`2&lt;int32,!!0&gt;)</signature>
                        <name>GenerateByIndexImpl</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(!!0, System.Func`2&lt;!!0,!!0&gt;)</signature>
                        <name>GenerateImpl</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Linq.IGrouping`2&lt;!!1,!!0&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,!!1&gt;)</signature>
                        <name>GroupAdjacent</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Linq.IGrouping`2&lt;!!1,!!0&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,!!1&gt;, System.Collections.Generic.IEqualityComparer`1&lt;!!1&gt;)</signature>
                        <name>GroupAdjacent</name>
                    </method>
                    <method>
                        <arity>3</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Linq.IGrouping`2&lt;!!1,!!2&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,!!1&gt;, System.Func`2&lt;!!0,!!2&gt;)</signature>
                        <name>GroupAdjacent</name>
                    </method>
                    <method>
                        <arity>3</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Linq.IGrouping`2&lt;!!1,!!2&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,!!1&gt;, System.Func`2&lt;!!0,!!2&gt;, System.Collections.Generic.IEqualityComparer`1&lt;!!1&gt;)</signature>
                        <name>GroupAdjacent</name>
                    </method>
                    <method>
                        <arity>3</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Linq.IGrouping`2&lt;!!1,!!2&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,!!1&gt;, System.Func`2&lt;!!0,!!2&gt;, System.Collections.Generic.IEqualityComparer`1&lt;!!1&gt;)</signature>
                        <name>GroupAdjacentImpl</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;int32,!!0&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)</signature>
                        <name>Index</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;int32,!!0&gt;&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, int32)</signature>
                        <name>Index</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>!!0(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,!!1&gt;)</signature>
                        <name>MaxBy</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>!!0(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,!!1&gt;, System.Collections.Generic.IComparer`1&lt;!!1&gt;)</signature>
                        <name>MaxBy</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>!!0(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,!!1&gt;)</signature>
                        <name>MinBy</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>!!0(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`2&lt;!!0,!!1&gt;, System.Collections.Generic.IComparer`1&lt;!!1&gt;)</signature>
                        <name>MinBy</name>
                    </method>
                    <method>
                        <signature>System.Exception(int32, int32)</signature>
                        <name>OnAssertCountFailure</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, int32)</signature>
                        <name>Pad</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, int32, !!0)</signature>
                        <name>Pad</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, int32, System.Func`2&lt;int32,!!0&gt;)</signature>
                        <name>Pad</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, int32, !!0, System.Func`2&lt;int32,!!0&gt;)</signature>
                        <name>PadImpl</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!1&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`3&lt;!!0,!!0,!!1&gt;)</signature>
                        <name>Pairwise</name>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!1&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`3&lt;!!0,!!0,!!1&gt;)</signature>
                        <name>PairwiseImpl</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Action`1&lt;!!0&gt;)</signature>
                        <name>Pipe</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Action`1&lt;!!0&gt;)</signature>
                        <name>PipeImpl</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, !!0)</signature>
                        <name>Prepend</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`3&lt;!!0,!!0,!!0&gt;, !!0)</signature>
                        <name>PreScan</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, System.Func`3&lt;!!0,!!0,!!0&gt;, !!0)</signature>
                        <name>PreScanImpl</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>2</arity>
                        <signature>void(System.Func`2&lt;string,!!1&gt;, System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,string&gt;&gt;)</signature>
                        <name>ThrowException</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, string)</signature>
                        <name>ThrowIfNegative</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(int32, System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,string&gt;&gt;)</signature>
                        <name>ThrowIfNegative</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32, string)</signature>
                        <name>ThrowIfNonPositive</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(int32, System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,string&gt;&gt;)</signature>
                        <name>ThrowIfNonPositive</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(!!0, string)</signature>
                        <name>ThrowIfNull</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(!!0, System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,string&gt;&gt;)</signature>
                        <name>ThrowIfNull</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>ThrowIfNullOrEmpty</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string, System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;string,string&gt;&gt;)</signature>
                        <name>ThrowIfNullOrEmpty</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>ThrowIfNullOrWhiteSpace</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;string,string&gt;&gt;)</signature>
                        <name>ThrowIfNullOrWhiteSpace</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;string,System.ArgumentNullException&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate5b</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,System.ArgumentNullException&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate5d</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;int32,int32,System.Exception&gt;</signature>
                        <name>defaultErrorSelector</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>3</arity>
                <genericparameter sequence="0">
                    <name>TSource</name>
                    <newname>a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TKey</name>
                    <newname>b</newname>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TElement</name>
                    <newname>c</newname>
                </genericparameter>
                <name>Managed.Adb.MoreLinq.MoreEnumerable/&lt;&gt;c__DisplayClass2d`3</name>
                <newname>Managed.Adb.MoreLinq.MoreEnumerable/h</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.KeyValuePair`2&lt;!1,!2&gt;(!0)</signature>
                        <name>&lt;GroupAdjacentImpl&gt;b__2b</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;!0,!2&gt;</signature>
                        <name>elementSelector</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,!1&gt;</signature>
                        <name>keySelector</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TSource</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Managed.Adb.MoreLinq.MoreEnumerable/&lt;&gt;c__DisplayClass38`1</name>
                <newname>Managed.Adb.MoreLinq.MoreEnumerable/j</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.KeyValuePair`2&lt;int32,!0&gt;(!0, int32)</signature>
                        <name>&lt;Index&gt;b__37</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>startIndex</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TSource</name>
                    <newname>a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TResult</name>
                    <newname>b</newname>
                </genericparameter>
                <name>Managed.Adb.MoreLinq.MoreEnumerable/&lt;BatchImpl&gt;d__a`2</name>
                <newname>Managed.Adb.MoreLinq.MoreEnumerable/c</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finallyf</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!1&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;TResult&gt;.GetEnumerator</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;TResult&gt;.get_Current</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;,!1&gt;</signature>
                        <name>&lt;&gt;3__resultSelector</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;3__size</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;3__source</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;7__wrape</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>!0[]</signature>
                        <name>&lt;bucket&gt;5__b</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;count&gt;5__c</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;item&gt;5__d</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,!0&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate9</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Collections.Generic.IEnumerable`1&lt;!0&gt;,!1&gt;</signature>
                        <name>resultSelector</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>size</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>source</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TSource</name>
                    <newname>a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TKey</name>
                    <newname>b</newname>
                </genericparameter>
                <name>Managed.Adb.MoreLinq.MoreEnumerable/&lt;DistinctByImpl&gt;d__12`2</name>
                <newname>Managed.Adb.MoreLinq.MoreEnumerable/d</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally16</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;TSource&gt;.GetEnumerator</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;TSource&gt;.get_Current</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEqualityComparer`1&lt;!1&gt;</signature>
                        <name>&lt;&gt;3__comparer</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,!1&gt;</signature>
                        <name>&lt;&gt;3__keySelector</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;3__source</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;7__wrap15</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;element&gt;5__14</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.HashSet`1&lt;!1&gt;</signature>
                        <name>&lt;knownKeys&gt;5__13</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEqualityComparer`1&lt;!1&gt;</signature>
                        <name>comparer</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,!1&gt;</signature>
                        <name>keySelector</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>source</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TSource</name>
                    <newname>a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TKey</name>
                    <newname>b</newname>
                </genericparameter>
                <name>Managed.Adb.MoreLinq.MoreEnumerable/&lt;ExceptByImpl&gt;d__19`2</name>
                <newname>Managed.Adb.MoreLinq.MoreEnumerable/e</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally1e</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;TSource&gt;.GetEnumerator</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;TSource&gt;.get_Current</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;3__first</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEqualityComparer`1&lt;!1&gt;</signature>
                        <name>&lt;&gt;3__keyComparer</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,!1&gt;</signature>
                        <name>&lt;&gt;3__keySelector</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;3__second</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;7__wrap1d</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;element&gt;5__1b</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;key&gt;5__1c</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.HashSet`1&lt;!1&gt;</signature>
                        <name>&lt;keys&gt;5__1a</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>first</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEqualityComparer`1&lt;!1&gt;</signature>
                        <name>keyComparer</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,!1&gt;</signature>
                        <name>keySelector</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>second</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TSource</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Managed.Adb.MoreLinq.MoreEnumerable/&lt;ExpectingCountYieldingImpl&gt;d__0`1</name>
                <newname>Managed.Adb.MoreLinq.MoreEnumerable/b</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally4</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;TSource&gt;.GetEnumerator</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;TSource&gt;.get_Current</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;3__count</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;int32,int32,System.Exception&gt;</signature>
                        <name>&lt;&gt;3__errorSelector</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;3__source</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;7__wrap3</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;element&gt;5__2</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;iterations&gt;5__1</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>count</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;int32,int32,System.Exception&gt;</signature>
                        <name>errorSelector</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>source</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TResult</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Managed.Adb.MoreLinq.MoreEnumerable/&lt;GenerateByIndexImpl&gt;d__25`1</name>
                <newname>Managed.Adb.MoreLinq.MoreEnumerable/g</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;TResult&gt;.GetEnumerator</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;TResult&gt;.get_Current</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;int32,!0&gt;</signature>
                        <name>&lt;&gt;3__generator</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;i&gt;5__26</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;int32,!0&gt;</signature>
                        <name>generator</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>TResult</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Managed.Adb.MoreLinq.MoreEnumerable/&lt;GenerateImpl&gt;d__21`1</name>
                <newname>Managed.Adb.MoreLinq.MoreEnumerable/f</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;TResult&gt;.GetEnumerator</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;TResult&gt;.get_Current</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,!0&gt;</signature>
                        <name>&lt;&gt;3__generator</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;3__initial</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;current&gt;5__22</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,!0&gt;</signature>
                        <name>generator</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>initial</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>3</arity>
                <genericparameter sequence="0">
                    <name>TSource</name>
                    <newname>a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TKey</name>
                    <newname>b</newname>
                </genericparameter>
                <genericparameter sequence="2">
                    <name>TElement</name>
                    <newname>c</newname>
                </genericparameter>
                <name>Managed.Adb.MoreLinq.MoreEnumerable/&lt;GroupAdjacentImpl&gt;d__2f`3</name>
                <newname>Managed.Adb.MoreLinq.MoreEnumerable/i</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally34</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Linq.IGrouping`2&lt;!1,!2&gt;&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;.GetEnumerator</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <signature>System.Linq.IGrouping`2&lt;!1,!2&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;.get_Current</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Linq.IGrouping`2&lt;!1,!2&gt;</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEqualityComparer`1&lt;!1&gt;</signature>
                        <name>&lt;&gt;3__comparer</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,!2&gt;</signature>
                        <name>&lt;&gt;3__elementSelector</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,!1&gt;</signature>
                        <name>&lt;&gt;3__keySelector</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;3__source</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;!2&gt;</signature>
                        <name>&lt;&gt;g__initLocal2a</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;group&gt;5__31</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.KeyValuePair`2&lt;!1,!2&gt;</signature>
                        <name>&lt;item&gt;5__33</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.KeyValuePair`2&lt;!1,!2&gt;&gt;</signature>
                        <name>&lt;iterator&gt;5__30</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;!2&gt;</signature>
                        <name>&lt;members&gt;5__32</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEqualityComparer`1&lt;!1&gt;</signature>
                        <name>comparer</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.MoreLinq.MoreEnumerable/&lt;&gt;c__DisplayClass2d`3&lt;!0,!1,!2&gt;</signature>
                        <name>CS$&lt;&gt;8__locals2e</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,System.Collections.Generic.KeyValuePair`2&lt;!1,!2&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2c</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,!2&gt;</signature>
                        <name>elementSelector</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,!1&gt;</signature>
                        <name>keySelector</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>source</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Managed.Adb.MoreLinq.MoreEnumerable/&lt;PadImpl&gt;d__3a`1</name>
                <newname>Managed.Adb.MoreLinq.MoreEnumerable/k</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally3e</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;3__padding</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;int32,!0&gt;</signature>
                        <name>&lt;&gt;3__paddingSelector</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;3__source</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;3__width</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;7__wrap3d</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;count&gt;5__3b</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;item&gt;5__3c</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>padding</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;int32,!0&gt;</signature>
                        <name>paddingSelector</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>source</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>width</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TSource</name>
                    <newname>a</newname>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TResult</name>
                    <newname>b</newname>
                </genericparameter>
                <name>Managed.Adb.MoreLinq.MoreEnumerable/&lt;PairwiseImpl&gt;d__41`2</name>
                <newname>Managed.Adb.MoreLinq.MoreEnumerable/l</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally44</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!1&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;TResult&gt;.GetEnumerator</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>!1()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;TResult&gt;.get_Current</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!1</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;!0,!0,!1&gt;</signature>
                        <name>&lt;&gt;3__resultSelector</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;3__source</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;</signature>
                        <name>&lt;e&gt;5__42</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;previous&gt;5__43</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;!0,!0,!1&gt;</signature>
                        <name>resultSelector</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>source</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Managed.Adb.MoreLinq.MoreEnumerable/&lt;PipeImpl&gt;d__47`1</name>
                <newname>Managed.Adb.MoreLinq.MoreEnumerable/m</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally4a</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;3__action</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;3__source</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;7__wrap49</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;element&gt;5__48</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;!0&gt;</signature>
                        <name>action</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>source</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                    <newname>a</newname>
                </genericparameter>
                <name>Managed.Adb.MoreLinq.MoreEnumerable/&lt;PreScanImpl&gt;d__4d`1</name>
                <newname>Managed.Adb.MoreLinq.MoreEnumerable/n</newname>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally51</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;!0,!0,!0&gt;</signature>
                        <name>&lt;&gt;3__f</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;3__id</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;3__source</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;7__wrap50</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;aggregator&gt;5__4e</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;i&gt;5__4f</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Func`3&lt;!0,!0,!0&gt;</signature>
                        <name>f</name>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>id</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;</signature>
                        <name>source</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.MoreLinq.MoreEnumerable/Grouping</name>
                <newname>Managed.Adb.MoreLinq.MoreEnumerable/a</newname>
                <methodlist>
                    <method>
                        <arity>2</arity>
                        <signature>Managed.Adb.MoreLinq.MoreEnumerable/Grouping`2&lt;!!0,!!1&gt;(!!0, System.Collections.Generic.IEnumerable`1&lt;!!1&gt;)</signature>
                        <name>Create</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TKey</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TElement</name>
                </genericparameter>
                <name>Managed.Adb.MoreLinq.MoreEnumerable/Grouping`2</name>
                <methodlist>
                    <method>
                        <signature>void(!0, System.Collections.Generic.IEnumerable`1&lt;!1&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!1&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>set_Key</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!1&gt;</signature>
                        <name>_members</name>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;Key&gt;k__BackingField</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>!0()</signature>
                        <name>Key</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.MoreLinq.SequenceException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>defaultMessage</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.MountPoint</name>
                <methodlist>
                    <method>
                        <signature>void(string, string, string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.MountPoint()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Block</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FileSystem</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Block</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_FileSystem</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsReadOnly</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.ICloneable.Clone</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Block&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;FileSystem&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsReadOnly&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Block</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>FileSystem</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsReadOnly</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.MountPointReceiver</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>&lt;ProcessNewLines&gt;b__0</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Done</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Device()</signature>
                        <name>get_Device</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>set_Device</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.Device</signature>
                        <name>&lt;Device&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>MOUNT_COMMAND</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>RE_MOUNTPOINT_PATTERN</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.Device()</signature>
                        <name>Device</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.MultiLineReceiver</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>AddLine</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>AddOutput</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Done</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCancelled</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.ICollection`1&lt;string&gt;()</signature>
                        <name>get_Lines</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_TrimLines</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UnfinishedLine</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsCancelled</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.ICollection`1&lt;string&gt;)</signature>
                        <name>set_Lines</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_TrimLines</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_UnfinishedLine</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsCancelled&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.ICollection`1&lt;string&gt;</signature>
                        <name>&lt;Lines&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;TrimLines&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;UnfinishedLine&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ENCODING</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>NEWLINE</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsCancelled</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.ICollection`1&lt;string&gt;()</signature>
                        <name>Lines</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>TrimLines</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>UnfinishedLine</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.NullOutputReceiver</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>AddOutput</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IShellOutputReceiver()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCancelled</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsCancelled</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.NullOutputReceiver</signature>
                        <name>_instance</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsCancelled&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.IShellOutputReceiver()</signature>
                        <name>Instance</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsCancelled</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.NullSyncProgressMonitor</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>Advance</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCanceled</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>StartSubTask</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsCanceled</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.PackageManager</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Device()</signature>
                        <name>get_Device</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.FileEntry&gt;()</signature>
                        <name>get_Packages</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileEntry(string)</signature>
                        <name>GetApkFileEntry</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetApkPath</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RefreshPackages</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>set_Device</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.FileEntry&gt;)</signature>
                        <name>set_Packages</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.Device</signature>
                        <name>&lt;Device&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.FileEntry&gt;</signature>
                        <name>&lt;Packages&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PM_LIST_FULL</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.Device()</signature>
                        <name>Device</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.FileEntry&gt;()</signature>
                        <name>Packages</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.PackageManager/PackageManagerPathReceiver</name>
                <newname>Managed.Adb.PackageManager/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Path</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Path&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PM_PATH_PATTERN</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.PackageManagerListingReceiver</name>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.FileEntry&gt;, Managed.Adb.IListingReceiver)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.FileEntry&gt;()</signature>
                        <name>get_Map</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.IListingReceiver()</signature>
                        <name>get_Receiver</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.FileEntry&gt;)</signature>
                        <name>set_Map</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.IListingReceiver)</signature>
                        <name>set_Receiver</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.FileEntry&gt;</signature>
                        <name>&lt;Map&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.IListingReceiver</signature>
                        <name>&lt;Receiver&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,Managed.Adb.FileEntry&gt;()</signature>
                        <name>Map</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.IListingReceiver()</signature>
                        <name>Receiver</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.PackageManagerReceiver</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.Device, Managed.Adb.PackageManager)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>&lt;ProcessNewLines&gt;b__0</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>Managed.Adb.Device()</signature>
                        <name>get_Device</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>Managed.Adb.PackageManager()</signature>
                        <name>get_PackageManager</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>set_Device</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.PackageManager)</signature>
                        <name>set_PackageManager</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.Device</signature>
                        <name>&lt;Device&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.PackageManager</signature>
                        <name>&lt;PackageManager&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PM_PACKAGE_PATTERN</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.Device()</signature>
                        <name>Device</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.PackageManager()</signature>
                        <name>PackageManager</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.RawImage</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ColorData()</signature>
                        <name>get_Alpha</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ColorData()</signature>
                        <name>get_Blue</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Bpp</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ColorData()</signature>
                        <name>get_Green</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Height</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.ColorData()</signature>
                        <name>get_Red</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Size</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Version</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Width</name>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>GetHeaderSize</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.RawImage()</signature>
                        <name>GetRotated</name>
                    </method>
                    <method>
                        <signature>System.Drawing.Imaging.ImageFormat(string)</signature>
                        <name>ImageFormatFromString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, unsigned int8[])</signature>
                        <name>ReadHeader</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Save</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Save</name>
                    </method>
                    <method>
                        <signature>void(string, System.Drawing.Imaging.ImageFormat)</signature>
                        <name>Save</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.ColorData)</signature>
                        <name>set_Alpha</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.ColorData)</signature>
                        <name>set_Blue</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Bpp</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>set_Data</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.ColorData)</signature>
                        <name>set_Green</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Height</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.ColorData)</signature>
                        <name>set_Red</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Size</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Version</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Width</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[])</signature>
                        <name>Swap</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Drawing.Bitmap()</signature>
                        <name>ToImage</name>
                    </method>
                    <method>
                        <signature>System.Drawing.Bitmap(System.Drawing.Imaging.PixelFormat)</signature>
                        <name>ToImage</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.ColorData</signature>
                        <name>&lt;Alpha&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.ColorData</signature>
                        <name>&lt;Blue&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Bpp&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>&lt;Data&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.ColorData</signature>
                        <name>&lt;Green&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Height&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.ColorData</signature>
                        <name>&lt;Red&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Size&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Version&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Width&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>Managed.Adb.ColorData()</signature>
                        <name>Alpha</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.ColorData()</signature>
                        <name>Blue</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Bpp</name>
                    </property>
                    <property>
                        <signature>unsigned int8[]()</signature>
                        <name>Data</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.ColorData()</signature>
                        <name>Green</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Height</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.ColorData()</signature>
                        <name>Red</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Size</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Version</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Width</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.RawImage/&lt;&gt;c__DisplayClass1</name>
                <newname>Managed.Adb.RawImage/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>&lt;Swap&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;unsigned int8&gt;</signature>
                        <name>clone</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.Receivers.SingleLineReceiver</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Text.Encoding)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>AddOutput</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCancelled</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UnfinishedLine</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_UnfinishedTimeStamp</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.DateTime, string)</signature>
                        <name>OnNewLine</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsCancelled</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_UnfinishedLine</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_UnfinishedTimeStamp</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>Tail</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Text.Encoding</signature>
                        <name>_encoding</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsCancelled&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;UnfinishedLine&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;UnfinishedTimeStamp&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Newline</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsCancelled</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>UnfinishedLine</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>UnfinishedTimeStamp</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.SocketExtension</name>
                <methodlist>
                    <method>
                        <signature>void(System.Net.Sockets.Socket)</signature>
                        <name>CloseNoWait</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.SyncResult</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Code</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Message</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Code</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Message</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Code&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Message&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Code</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Message</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.SyncService</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint, Managed.Adb.Device)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(unsigned int8[], unsigned int8[])</signature>
                        <name>CheckResult</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](string, string)</signature>
                        <name>CreateFileRequest</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[], unsigned int8[])</signature>
                        <name>CreateFileRequest</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](string, int32)</signature>
                        <name>CreateRequest</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[], int32)</signature>
                        <name>CreateRequest</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](string, string, Managed.Adb.SyncService/FileMode)</signature>
                        <name>CreateSendFileRequest</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](unsigned int8[], unsigned int8[], int32)</signature>
                        <name>CreateSendFileRequest</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.SyncResult(System.Collections.Generic.IEnumerable`1&lt;Managed.Adb.FileEntry&gt;, string, Managed.Adb.FileListingService, Managed.Adb.ISyncProgressMonitor)</signature>
                        <name>DoPull</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Managed.Adb.SyncResult(string, string, Managed.Adb.ISyncProgressMonitor)</signature>
                        <name>DoPullFile</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Managed.Adb.SyncResult(System.Collections.Generic.IEnumerable`1&lt;System.IO.FileSystemInfo&gt;, string, Managed.Adb.ISyncProgressMonitor)</signature>
                        <name>DoPush</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>Managed.Adb.SyncResult(string, string, Managed.Adb.ISyncProgressMonitor)</signature>
                        <name>DoPushFile</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_Address</name>
                    </method>
                    <method>
                        <signature>System.Net.Sockets.Socket()</signature>
                        <name>get_Channel</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_DataBuffer</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>Managed.Adb.Device()</signature>
                        <name>get_Device</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsOpen</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.NullSyncProgressMonitor()</signature>
                        <name>get_NullProgressMonitor</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FileListingService/FileTypes(Managed.Adb.SyncService/FileMode)</signature>
                        <name>GetFileType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int64(System.Collections.Generic.IEnumerable`1&lt;System.IO.FileSystemInfo&gt;)</signature>
                        <name>GetTotalLocalFileSize</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int64(System.Collections.Generic.IEnumerable`1&lt;Managed.Adb.FileEntry&gt;, Managed.Adb.FileListingService)</signature>
                        <name>GetTotalRemoteFileSize</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(int32, int32)</signature>
                        <name>OctetAnd</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Open</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.SyncResult(System.Collections.Generic.IEnumerable`1&lt;Managed.Adb.FileEntry&gt;, string, Managed.Adb.ISyncProgressMonitor)</signature>
                        <name>Pull</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.SyncResult(Managed.Adb.FileEntry, string, Managed.Adb.ISyncProgressMonitor)</signature>
                        <name>PullFile</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.SyncResult(string, string, Managed.Adb.ISyncProgressMonitor)</signature>
                        <name>PullFile</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.SyncResult(System.Collections.Generic.IEnumerable`1&lt;string&gt;, Managed.Adb.FileEntry, Managed.Adb.ISyncProgressMonitor)</signature>
                        <name>Push</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.SyncResult(string, string, Managed.Adb.ISyncProgressMonitor)</signature>
                        <name>PushFile</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.SyncResult(System.IO.Stream, string)</signature>
                        <name>PushStream</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.SyncResult(System.IO.Stream, string, Managed.Adb.ISyncProgressMonitor)</signature>
                        <name>PushStream</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.SyncService/FileMode(string)</signature>
                        <name>ReadMode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint)</signature>
                        <name>set_Address</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket)</signature>
                        <name>set_Channel</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>set_DataBuffer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>set_Device</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.NullSyncProgressMonitor)</signature>
                        <name>set_NullProgressMonitor</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Net.IPEndPoint</signature>
                        <name>&lt;Address&gt;k__BackingField</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Net.Sockets.Socket</signature>
                        <name>&lt;Channel&gt;k__BackingField</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>&lt;DataBuffer&gt;k__BackingField</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.Device</signature>
                        <name>&lt;Device&gt;k__BackingField</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.NullSyncProgressMonitor</signature>
                        <name>&lt;NullProgressMonitor&gt;k__BackingField</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DATA</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DENT</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DONE</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FAIL</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>LIST</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>OKAY</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>RECV</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>REMOTE_PATH_MAX_LENGTH</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>SEND</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>STAT</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>SYNC_DATA_MAX</name>
                        <newname>j</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>Address</name>
                    </property>
                    <property>
                        <signature>System.Net.Sockets.Socket()</signature>
                        <name>Channel</name>
                    </property>
                    <property>
                        <signature>unsigned int8[]()</signature>
                        <name>DataBuffer</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.Device()</signature>
                        <name>Device</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsOpen</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.NullSyncProgressMonitor()</signature>
                        <name>NullProgressMonitor</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>Managed.Adb.SyncService/FileMode</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Managed.Adb.SyncService/FileMode</signature>
                        <name>Block</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.SyncService/FileMode</signature>
                        <name>Character</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.SyncService/FileMode</signature>
                        <name>Directory</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.SyncService/FileMode</signature>
                        <name>FIFO</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.SyncService/FileMode</signature>
                        <name>Regular</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.SyncService/FileMode</signature>
                        <name>Socket</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.SyncService/FileMode</signature>
                        <name>SymbolicLink</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.SyncService/FileMode</signature>
                        <name>UNKNOWN</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>System.IO.MadbExtensions</name>
                <methodlist>
                    <method>
                        <signature>System.IO.FileSystemInfo(string)</signature>
                        <name>GetFileSystemInfo</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsDirectory</name>
                    </method>
                    <method>
                        <signature>bool(System.IO.FileSystemInfo)</signature>
                        <name>IsDirectory</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsFile</name>
                    </method>
                    <method>
                        <signature>bool(System.IO.FileSystemInfo)</signature>
                        <name>IsFile</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
        </module>
        <module>
            <name>TestAutomation.Bridge.dll</name>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{9F898C99-CD65-4BB6-B3EE-C6D278775551}</name>
                <newname>b</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>int64</signature>
                        <name>$$method0x6000449-1</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{9F898C99-CD65-4BB6-B3EE-C6D278775551}/__StaticArrayInitTypeSize=512</signature>
                        <name>$$method0x60005c4-1</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{9F898C99-CD65-4BB6-B3EE-C6D278775551}/__StaticArrayInitTypeSize=512</name>
                <newname>b/a</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProcessExtensions</name>
                <methodlist>
                    <method>
                        <signature>native int(unsigned int32, unsigned int32)</signature>
                        <name>CreateToolhelp32Snapshot</name>
                    </method>
                    <method>
                        <signature>bool(System.Diagnostics.Process)</signature>
                        <name>HasParent</name>
                    </method>
                    <method>
                        <signature>System.Diagnostics.Process(System.Diagnostics.Process)</signature>
                        <name>ParentProcess</name>
                    </method>
                    <method>
                        <signature>bool(native int, ProcessExtensions/PROCESSENTRY32&amp;)</signature>
                        <name>Process32First</name>
                    </method>
                    <method>
                        <signature>bool(native int, ProcessExtensions/PROCESSENTRY32&amp;)</signature>
                        <name>Process32Next</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>ProcessExtensions/PROCESSENTRY32</name>
                <newname>ProcessExtensions/a</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>cntThreads</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>cntUsage</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>dwFlags</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>dwSize</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>pcPriClassBase</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>szExeFile</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>native int</signature>
                        <name>th32DefaultHeapID</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>th32ModuleID</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>th32ParentProcessID</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>th32ProcessID</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Activity</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Bridge.ActivityManager)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;get_IsApplication&gt;b__1d</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>DumpHeap</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>DumpHeapToStream</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ForceStop</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsApplication</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsBackground</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDebuggable</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_PC</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PID</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PPID</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RSS</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_User</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_WCHAN</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_VSIZE</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Kill</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Restart</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Restart</name>
                    </method>
                    <method>
                        <signature>void(bool, int32)</signature>
                        <name>Restart</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>Restart</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsBackground</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsDebuggable</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_PC</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_PID</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_PPID</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_RSS</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_User</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_WCHAN</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_VSIZE</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsBackground&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsDebuggable&gt;k__BackingField</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;PC&gt;k__BackingField</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;PID&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;PPID&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;RSS&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;User&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;WCHAN&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;VSIZE&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_RESTART_TIMEOUT</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>m_notApp</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.WeakReference</signature>
                        <name>m_wam</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsApplication</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsBackground</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsDebuggable</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>PC</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>PID</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>PPID</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>RSS</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>User</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>WCHAN</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>VSIZE</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ActivityManager</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Bridge.TABConnection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>ActivityExists</name>
                    </method>
                    <method>
                        <signature>string(int32, string)</signature>
                        <name>CreateDumpScript</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, string)</signature>
                        <name>DumpHeap</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>DumpHeap</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.Activity, string)</signature>
                        <name>DumpHeap</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.IO.Stream(int32)</signature>
                        <name>DumpHeapToStream</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream(string)</signature>
                        <name>DumpHeapToStream</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream(TestAutomation.Bridge.Activity)</signature>
                        <name>DumpHeapToStream</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.Activity)</signature>
                        <name>ForceStopProcess</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Bridge.Activity&gt;()</signature>
                        <name>GetActivities</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.Activity(int32)</signature>
                        <name>GetActivityById</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.Activity(string)</signature>
                        <name>GetActivityByName</name>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>IsApplication</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.Activity)</signature>
                        <name>KillProcess</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>StartAction</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>StartAction</name>
                    </method>
                    <method>
                        <signature>void(string, string, string)</signature>
                        <name>StartAction</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>StartActivity</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>StartActivity</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.TABConnection</signature>
                        <name>m_tab</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ActivityManager/ActivityListListener</name>
                <newname>TestAutomation.Bridge.ActivityManager/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>&lt;ProcessNewLines&gt;b__1</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_ProcessInfoCollection</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_ProcessInfoCollection</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>&lt;ProcessInfoCollection&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Converter`2&lt;string,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2</name>
                        <newname>h</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ActivityManager/ActivityStartListener</name>
                <newname>TestAutomation.Bridge.ActivityManager/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>&lt;ProcessNewLines&gt;b__3</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ErrorMessage</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Success</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ErrorMessage</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Success</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ErrorMessage&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Success&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Converter`2&lt;string,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate5</name>
                        <newname>j</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ActivityManager/ActivityStartListener/&lt;&gt;c__DisplayClass6</name>
                <newname>TestAutomation.Bridge.ActivityManager/b/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>&lt;ProcessNewLines&gt;b__4</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.ActivityManager/ActivityStartListener</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>errorline</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>result</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ActivityManager/IsApplicationListener</name>
                <newname>TestAutomation.Bridge.ActivityManager/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;ProcessNewLines&gt;b__8</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsApplication</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsApplication</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsApplication&gt;k__BackingField</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>APPLICATION_DIRECTORY</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate9</name>
                        <newname>l</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ApkInfo</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IO.FileInfo()</signature>
                        <name>get_Info</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlDocument()</signature>
                        <name>get_Manifest</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Package</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlDocument()</signature>
                        <name>GetManifest</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>GetManifestBytes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.FileInfo)</signature>
                        <name>set_Info</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.IO.FileInfo</signature>
                        <name>&lt;Info&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_fileLocation</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Xml.XmlDocument</signature>
                        <name>m_manifest</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.IO.FileInfo()</signature>
                        <name>Info</name>
                    </property>
                    <property>
                        <signature>System.Xml.XmlDocument()</signature>
                        <name>Manifest</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Package</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ApkInfo/ManifestDecoder</name>
                <newname>TestAutomation.Bridge.ApkInfo/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(unsigned int8[], int32, int32, int32)</signature>
                        <name>compXmlString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(unsigned int8[], int32)</signature>
                        <name>compXmlStringAt</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(unsigned int8[])</signature>
                        <name>decompressXML</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32)</signature>
                        <name>LEW</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>prt</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, string)</signature>
                        <name>prtIndent</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>endDocTag</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>endTag</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>result</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>spaces</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>startTag</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.BooleanResultReader</name>
                <methodlist>
                    <method>
                        <signature>void(bool[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCancelled</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>m_pattern</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>bool[]</signature>
                        <name>m_result</name>
                        <newname>q</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsCancelled</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.BugReport</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.TABConnection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.BugReportIterator()</signature>
                        <name>BeginFetching</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.BugReportIterator(System.Text.Encoding)</signature>
                        <name>BeginFetching</name>
                    </method>
                    <method>
                        <signature>bool(string, bool, string, string)</signature>
                        <name>DoZipFile</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>InitializeLifetimeService</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>KillRemoteReporter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>Save</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, int32)</signature>
                        <name>Save</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>SaveAs</name>
                    </method>
                    <method>
                        <signature>string(string, int32, TestAutomation.Bridge.OutputType)</signature>
                        <name>SaveAs</name>
                    </method>
                    <method>
                        <signature>string(string, TestAutomation.Bridge.OutputType)</signature>
                        <name>SaveAs</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_TIME_OUT</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>KILL_REMOTE_REPORTER</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.TABConnection</signature>
                        <name>m_tab</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.BugReport/&lt;&gt;c__DisplayClass4</name>
                <newname>TestAutomation.Bridge.BugReport/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;BeginFetching&gt;b__1</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;BeginFetching&gt;b__2</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>&lt;BeginFetching&gt;b__3</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.BugReport</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Concurrent.BlockingCollection`1&lt;string&gt;</signature>
                        <name>collection</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.BugReport/ReportCollector</signature>
                        <name>collector</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Threading.Tasks.Task</signature>
                        <name>task</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.BugReport/ReportCollector</name>
                <newname>TestAutomation.Bridge.BugReport/a</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Concurrent.BlockingCollection`1&lt;string&gt;, System.Text.Encoding)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>AddOutput</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCancelled</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UnfinishedLine</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsCancelled</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_UnfinishedLine</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsCancelled&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;UnfinishedLine&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Concurrent.BlockingCollection`1&lt;string&gt;</signature>
                        <name>m_collection</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Text.Encoding</signature>
                        <name>m_encoding</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>NEWLINE</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.BugReport/ReportWriter</name>
                <newname>TestAutomation.Bridge.BugReport/b</newname>
                <methodlist>
                    <method>
                        <signature>void(System.IO.BinaryWriter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>AddOutput</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCancelled</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsCancelled</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsCancelled&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.IO.BinaryWriter</signature>
                        <name>m_writer</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.BugReportIterator</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Cancel</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>System.Action()</signature>
                        <name>get_CancelAction</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCompleted</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReading</name>
                    </method>
                    <method>
                        <signature>System.Collections.Concurrent.BlockingCollection`1&lt;string&gt;()</signature>
                        <name>get_Lines</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Func`2&lt;int32,bool&gt;()</signature>
                        <name>get_WaitFunc</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetNextLine</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetNextLine</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>InitializeLifetimeService</name>
                    </method>
                    <method>
                        <signature>void(System.Action)</signature>
                        <name>set_CancelAction</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Concurrent.BlockingCollection`1&lt;string&gt;)</signature>
                        <name>set_Lines</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Func`2&lt;int32,bool&gt;)</signature>
                        <name>set_WaitFunc</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>Wait</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Wait</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Action</signature>
                        <name>&lt;CancelAction&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Concurrent.BlockingCollection`1&lt;string&gt;</signature>
                        <name>&lt;Lines&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;int32,bool&gt;</signature>
                        <name>&lt;WaitFunc&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Action()</signature>
                        <name>CancelAction</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsCompleted</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsReading</name>
                    </property>
                    <property>
                        <signature>System.Collections.Concurrent.BlockingCollection`1&lt;string&gt;()</signature>
                        <name>Lines</name>
                    </property>
                    <property>
                        <signature>System.Func`2&lt;int32,bool&gt;()</signature>
                        <name>WaitFunc</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.CrashDumpHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(TestAutomation.Bridge.CrashdumpInfo, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.CrashdumpInfo)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.CrashdumpInfo</name>
                <methodlist>
                    <method>
                        <signature>void(string, System.DateTime, TestAutomation.Bridge.CrashdumpSource)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_CreationTime</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FoundInTestCase</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Location</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.CrashdumpSource()</signature>
                        <name>get_Source</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_CreationTime</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_FoundInTestCase</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Location</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.CrashdumpSource)</signature>
                        <name>set_Source</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;CreationTime&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;FoundInTestCase&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Location&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.CrashdumpSource</signature>
                        <name>&lt;Source&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>CreationTime</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>FoundInTestCase</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Location</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.CrashdumpSource()</signature>
                        <name>Source</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.CrashdumpInfoCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.CrashdumpSource</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.CrashdumpSource</signature>
                        <name>Anr</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.CrashdumpSource</signature>
                        <name>Dropbox</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.CrashdumpSource</signature>
                        <name>Other</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.CrashdumpSource</signature>
                        <name>Tombstone</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Crc</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int16(string)</signature>
                        <name>Calculate</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int16[]</signature>
                        <name>crctable</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>FILE_CRC_INIT</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>FILE_CRC_MASK</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>FILE_CRC_SHIFT</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>FILE_CRC_XOROT</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>FILE_MAX_CRC_CHECKSUM_BUFFER_SIZE</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.DirectoryObserver</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Client.TestServerClient, string, string, System.Action`1&lt;TestAutomation.Bridge.DirectoryObserverEvent&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestServerClient, string, System.Action`1&lt;TestAutomation.Bridge.DirectoryObserverEvent&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateFilter</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Finalize</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_EnableRaisingEvents</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Filter</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>GetGuid</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.DirectoryObserverEvent)</signature>
                        <name>OnDirectoryChanged</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_EnableRaisingEvents</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Filter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Path</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Start</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Filter&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Path&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.TestServerClient</signature>
                        <name>m_client</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>m_filterPattern</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_guid</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;TestAutomation.Bridge.DirectoryObserverEvent&gt;</signature>
                        <name>m_handler</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_isDisposed</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_isObserving</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>EnableRaisingEvents</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Filter</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Path</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.DirectoryObserverEvent</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.FileChangeTypes()</signature>
                        <name>get_ChangeType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Directory</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_EventTime</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FileName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullName</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_TimeStamp</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.FileChangeTypes)</signature>
                        <name>set_ChangeType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Directory</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_EventTime</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_FileName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.FileChangeTypes</signature>
                        <name>&lt;ChangeType&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Directory&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;EventTime&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;FileName&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>m_epoc</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>TestAutomation.Bridge.FileChangeTypes()</signature>
                        <name>ChangeType</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Directory</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>EventTime</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>FileName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>FullName</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>TimeStamp</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.DiskSpaceInfo</name>
                <newname>TestAutomation.Bridge.a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_BlkSize</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Free</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Size</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_Used</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_BlkSize</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Free</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Size</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_Used</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;BlkSize&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;Free&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;Size&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;Used&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>float64()</signature>
                        <name>BlkSize</name>
                        <newname>e</newname>
                    </property>
                    <property>
                        <signature>float64()</signature>
                        <name>Free</name>
                        <newname>c</newname>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                        <newname>a</newname>
                    </property>
                    <property>
                        <signature>float64()</signature>
                        <name>Size</name>
                        <newname>b</newname>
                    </property>
                    <property>
                        <signature>float64()</signature>
                        <name>Used</name>
                        <newname>d</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.DiskSpaceInfoReceiver</name>
                <newname>TestAutomation.Bridge.b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Bridge.DiskSpaceInfo&gt;()</signature>
                        <name>get_DiskSpace</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;TestAutomation.Bridge.DiskSpaceInfo&gt;)</signature>
                        <name>set_DiskSpace</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Bridge.DiskSpaceInfo&gt;</signature>
                        <name>&lt;DiskSpace&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>m_matcher</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.DmesgData</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.DmesgData(string, System.DateTime, System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>FromString</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_LocalTimestamp</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.DmesgLogPriority()</signature>
                        <name>get_Priority</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_RemoteTimestamp</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.LogBuffer()</signature>
                        <name>get_SourceBuffer</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Tag</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Data</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_LocalTimestamp</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.DmesgLogPriority)</signature>
                        <name>set_Priority</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_RemoteTimestamp</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Tag</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(TestAutomation.Bridge.OutputFormat, TestAutomation.Bridge.LogTimestampMode)</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Data&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;LocalTimestamp&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.DmesgLogPriority</signature>
                        <name>&lt;Priority&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;RemoteTimestamp&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Tag&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>m_regexpDmesgLog</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Data</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>LocalTimestamp</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.DmesgLogPriority()</signature>
                        <name>Priority</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>RemoteTimestamp</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.LogBuffer()</signature>
                        <name>SourceBuffer</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Tag</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.DmesgListener</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogDataReceivedHandler)</signature>
                        <name>add_LogDataReceived</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ClearLogBuffer</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>EnableTimestamps</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLogging</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.LogBuffer()</signature>
                        <name>get_SourceBuffer</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>GetBootTime</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>GetDeviceUptime</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.DateTime, string)</signature>
                        <name>OnOutput</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogDataReceivedHandler)</signature>
                        <name>remove_LogDataReceived</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SendClearMessage</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SendSyncMessage</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsLogging</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogEntryCache)</signature>
                        <name>SetCache</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Stop</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsLogging&gt;k__BackingField</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>BOOT_KEY</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>CLEAR</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>KERNEL_BOOT_QUERY</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>LOG_LOCATION</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogDataReceivedHandler</signature>
                        <name>LogDataReceived</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;</signature>
                        <name>m_bootTime</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogEntryCache</signature>
                        <name>m_cache</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_clearing</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.Device</signature>
                        <name>m_device</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Threading.Thread</signature>
                        <name>m_logger</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>READ_BUFFER_SIZE</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>UPTIME_LOCATION</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsLogging</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.LogBuffer()</signature>
                        <name>SourceBuffer</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>TestAutomation.Bridge.LogDataReceivedHandler</signature>
                        <name>LogDataReceived</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>TestAutomation.Bridge.DmesgListener/&lt;&gt;c__DisplayClass3</name>
                <newname>TestAutomation.Bridge.DmesgListener/d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;Start&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.DmesgListener</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>clearBuffer</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.DmesgListener/DmesgReceiver</name>
                <newname>TestAutomation.Bridge.DmesgListener/a</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Action`2&lt;System.DateTime,string&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime, string)</signature>
                        <name>OnNewLine</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Action`2&lt;System.DateTime,string&gt;</signature>
                        <name>m_output</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.DmesgListener/KernelBootReceiver</name>
                <newname>TestAutomation.Bridge.DmesgListener/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>get_KernelBoot</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Received</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;float64&gt;)</signature>
                        <name>set_KernelBoot</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Nullable`1&lt;float64&gt;</signature>
                        <name>&lt;KernelBoot&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.DmesgListener/UpTimeReceiver</name>
                <newname>TestAutomation.Bridge.DmesgListener/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;float64&gt;()</signature>
                        <name>get_Uptime</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;float64&gt;)</signature>
                        <name>set_Uptime</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Nullable`1&lt;float64&gt;</signature>
                        <name>&lt;Uptime&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>m_uptimeMatcher</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.DmesgLogPriority</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.DmesgLogPriority</signature>
                        <name>Alert</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.DmesgLogPriority</signature>
                        <name>Critical</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.DmesgLogPriority</signature>
                        <name>Debug</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.DmesgLogPriority</signature>
                        <name>Emergency</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.DmesgLogPriority</signature>
                        <name>Error</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.DmesgLogPriority</signature>
                        <name>Info</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.DmesgLogPriority</signature>
                        <name>Notice</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.DmesgLogPriority</signature>
                        <name>Unknown</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.DmesgLogPriority</signature>
                        <name>Warning</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Extensions</name>
                <methodlist>
                    <method>
                        <signature>void(System.Net.Sockets.Socket, bool)</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.SortedSet`1&lt;!!0&gt;(System.Collections.Generic.SortedSet`1&lt;!!0&gt;, !!0)</signature>
                        <name>HeadSet</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.Socket, string)</signature>
                        <name>SendLine</name>
                    </method>
                    <method>
                        <signature>string(string, int32)</signature>
                        <name>substring</name>
                    </method>
                    <method>
                        <signature>string(string, int32, int32)</signature>
                        <name>substring</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.SortedSet`1&lt;!!0&gt;(System.Collections.Generic.SortedSet`1&lt;!!0&gt;, !!0)</signature>
                        <name>TailSet</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.FileChangeTypes</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.FileChangeTypes</signature>
                        <name>ACCESS</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.FileChangeTypes</signature>
                        <name>ALL_EVENTS</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.FileChangeTypes</signature>
                        <name>ATTRIB</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.FileChangeTypes</signature>
                        <name>CLOSE_NOWRITE</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.FileChangeTypes</signature>
                        <name>CLOSE_WRITE</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.FileChangeTypes</signature>
                        <name>CREATE</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.FileChangeTypes</signature>
                        <name>DELETE</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.FileChangeTypes</signature>
                        <name>DELETE_SELF</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.FileChangeTypes</signature>
                        <name>MODIFY</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.FileChangeTypes</signature>
                        <name>MOVE_SELF</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.FileChangeTypes</signature>
                        <name>MOVED_FROM</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.FileChangeTypes</signature>
                        <name>MOVED_TO</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.FileChangeTypes</signature>
                        <name>OPEN</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.FileExtensions</name>
                <newname>TestAutomation.Bridge.c</newname>
                <methodlist>
                    <method>
                        <signature>bool(System.IO.FileInfo)</signature>
                        <name>DirectoryExists</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(System.IO.FileInfo)</signature>
                        <name>GetExtension</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.FileSystemAdapter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.TABConnection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>&lt;ValidateLocalPath&gt;b__11</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>&lt;ValidateRemotePath&gt;b__17</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string, System.Collections.Generic.IEnumerable`1&lt;string&gt;)</signature>
                        <name>AppendAllLines</name>
                    </method>
                    <method>
                        <signature>bool(string, string)</signature>
                        <name>AppendAllText</name>
                    </method>
                    <method>
                        <signature>string[](string)</signature>
                        <name>Cat</name>
                    </method>
                    <method>
                        <signature>bool(string, string)</signature>
                        <name>Copy</name>
                    </method>
                    <method>
                        <signature>bool(string, string, bool)</signature>
                        <name>Copy</name>
                    </method>
                    <method>
                        <signature>void(string, System.IO.Stream)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>CreateDirectory</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>CreateFile</name>
                    </method>
                    <method>
                        <signature>bool(string, bool)</signature>
                        <name>CreateFile</name>
                    </method>
                    <method>
                        <signature>bool(string, bool, string)</signature>
                        <name>CreateFile</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>DirectoryExists</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>ExecuteFileCommand</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(string, Managed.Adb.IShellOutputReceiver)</signature>
                        <name>ExecuteFileCommand</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>FileExists</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>Format</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>FormatDirectoryPath</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>FormatFilePath</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>FormatPath</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AutoRefresh</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ExternalStorage</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_FreeSpaceOnSdCard</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasSdCard</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Home</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Root</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SdCard</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_SdCardSize</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Storage</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Temp</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_UsedSdCardSpace</name>
                    </method>
                    <method>
                        <signature>System.Tuple`3&lt;int32,int32,int32&gt;(string)</signature>
                        <name>GetAttributes</name>
                    </method>
                    <method>
                        <signature>System.DateTime(string)</signature>
                        <name>GetDate</name>
                    </method>
                    <method>
                        <signature>System.DateTime(string, bool)</signature>
                        <name>GetDate</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.RemoteFileInfo(string)</signature>
                        <name>GetFileInfo</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.RemoteFileInfo(string, System.TimeSpan)</signature>
                        <name>GetFileInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int64(string)</signature>
                        <name>GetFileSize</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Bridge.RemoteFileInfo&gt;(string)</signature>
                        <name>GetFileSystemItems</name>
                    </method>
                    <method>
                        <signature>System.Tuple`2&lt;System.Collections.Generic.List`1&lt;string&gt;,System.Collections.Generic.List`1&lt;string&gt;&gt;(string)</signature>
                        <name>GetFolderContent</name>
                    </method>
                    <method>
                        <signature>int64(string)</signature>
                        <name>GetFreeDiskSpace</name>
                    </method>
                    <method>
                        <signature>int64(string)</signature>
                        <name>GetSize</name>
                    </method>
                    <method>
                        <signature>int64(string)</signature>
                        <name>GetTotalDiskSpace</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.RemoteFileType(string)</signature>
                        <name>GetType</name>
                    </method>
                    <method>
                        <signature>int64(string)</signature>
                        <name>GetUsedDiskSpace</name>
                    </method>
                    <method>
                        <signature>System.DateTime(string)</signature>
                        <name>GetUtcTime</name>
                    </method>
                    <method>
                        <signature>bool(string, string)</signature>
                        <name>IsSame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string, string)</signature>
                        <name>Move</name>
                    </method>
                    <method>
                        <signature>bool(string, string, bool)</signature>
                        <name>Move</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream(string)</signature>
                        <name>OpenRead</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Pull</name>
                    </method>
                    <method>
                        <signature>void(string, string, bool)</signature>
                        <name>Pull</name>
                    </method>
                    <method>
                        <signature>void(string, string, bool, bool)</signature>
                        <name>Pull</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Push</name>
                    </method>
                    <method>
                        <signature>void(string, string, bool)</signature>
                        <name>Push</name>
                    </method>
                    <method>
                        <signature>void(string, string, bool, bool)</signature>
                        <name>Push</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>ReadAllBytes</name>
                    </method>
                    <method>
                        <signature>string[](string)</signature>
                        <name>ReadAllLines</name>
                    </method>
                    <method>
                        <signature>string[](string, System.Text.Encoding)</signature>
                        <name>ReadAllLines</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ReadAllText</name>
                    </method>
                    <method>
                        <signature>string(string, System.Text.Encoding)</signature>
                        <name>ReadAllText</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>ReadFile</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>RefreshDirectory</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Remove</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>RemoveDirectory</name>
                    </method>
                    <method>
                        <signature>bool(string, bool)</signature>
                        <name>RemoveDirectory</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>RemoveFile</name>
                    </method>
                    <method>
                        <signature>bool(string, bool)</signature>
                        <name>RemoveFile</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>RemoveItem</name>
                    </method>
                    <method>
                        <signature>bool(string, bool)</signature>
                        <name>RemoveItem</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>RemoveItems</name>
                    </method>
                    <method>
                        <signature>bool(string, bool)</signature>
                        <name>RemoveItems</name>
                    </method>
                    <method>
                        <signature>bool(string, bool, bool)</signature>
                        <name>RemoveItems</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ResolveLink</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AutoRefresh</name>
                    </method>
                    <method>
                        <signature>void(string, int32)</signature>
                        <name>SetAttributes</name>
                    </method>
                    <method>
                        <signature>void(string, int32, int32, int32)</signature>
                        <name>SetAttributes</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>SetAttributes</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string, System.Collections.IList)</signature>
                        <name>SetAttributes</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Touch</name>
                    </method>
                    <method>
                        <signature>void(string, System.DateTime)</signature>
                        <name>Touch</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>TouchDirectory</name>
                    </method>
                    <method>
                        <signature>void(string, System.DateTime)</signature>
                        <name>TouchDirectory</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>TouchFile</name>
                    </method>
                    <method>
                        <signature>void(string, System.DateTime)</signature>
                        <name>TouchFile</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>ValidateLocalPath</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>ValidateRemotePath</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(string, System.Collections.Generic.IEnumerable`1&lt;string&gt;)</signature>
                        <name>WriteAllLines</name>
                    </method>
                    <method>
                        <signature>bool(string, string)</signature>
                        <name>WriteAllText</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>WriteFile</name>
                    </method>
                    <method>
                        <signature>void(string, string, bool)</signature>
                        <name>WriteFile</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;AutoRefresh&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ASSETS_KEY</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;char,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate14</name>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;char,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1a</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DATA_KEY</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DEFAULT_DATA</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DEFAULT_EXTERNAL_STORAGE</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DEFAULT_ROOT</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DEFAULT_STORAGE</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DIRECTORY_REFRESH_COMMAND</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>EXTERNAL_STORAGE_KEY</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FILE_REFRESH_COMMAND</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LINUX_FILE_NAME_MAX</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LINUX_PATH_MAX</name>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>m_sdMountPattern</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.TABConnection</signature>
                        <name>m_tab</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ROOT_KEY</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>SECONDARY_STORAGE_KEY</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>STORAGE_KEY</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TEMP_DIRECTORY</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>WINDOWS_FILE_NAME_MAX</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>WINDOWS_PATH_MAX</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AutoRefresh</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Data</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ExternalStorage</name>
                    </property>
                    <property>
                        <signature>float64()</signature>
                        <name>FreeSpaceOnSdCard</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>HasSdCard</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Home</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Root</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>SdCard</name>
                    </property>
                    <property>
                        <signature>float64()</signature>
                        <name>SdCardSize</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Storage</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Temp</name>
                    </property>
                    <property>
                        <signature>float64()</signature>
                        <name>UsedSdCardSpace</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.FileSystemAdapter/&lt;&gt;c__DisplayClass1</name>
                <newname>TestAutomation.Bridge.FileSystemAdapter/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.RemoteFileInfo)</signature>
                        <name>&lt;GetFileSystemItems&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.TimeSpan</signature>
                        <name>tzoffset</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.FileSystemAdapter/&lt;&gt;c__DisplayClass15</name>
                <newname>TestAutomation.Bridge.FileSystemAdapter/f</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>&lt;ValidateLocalPath&gt;b__12</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>&lt;ValidateLocalPath&gt;b__13</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>path</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.FileSystemAdapter/&lt;&gt;c__DisplayClass1b</name>
                <newname>TestAutomation.Bridge.FileSystemAdapter/g</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>&lt;ValidateRemotePath&gt;b__18</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(char)</signature>
                        <name>&lt;ValidateRemotePath&gt;b__19</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>filename</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>path</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.FileSystemAdapter/&lt;&gt;c__DisplayClass1e</name>
                <newname>TestAutomation.Bridge.FileSystemAdapter/h</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>&lt;WriteAllLines&gt;b__1d</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>builder</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.FileSystemAdapter/&lt;&gt;c__DisplayClass21</name>
                <newname>TestAutomation.Bridge.FileSystemAdapter/i</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>&lt;AppendAllLines&gt;b__20</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>builder</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.FileSystemAdapter/&lt;&gt;c__DisplayClass24</name>
                <newname>TestAutomation.Bridge.FileSystemAdapter/j</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.RemoteFileInfo)</signature>
                        <name>&lt;RemoveItems&gt;b__23</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.FileSystemAdapter</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>forced</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>recursive</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>success</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.FileSystemAdapter/&lt;&gt;c__DisplayClass27</name>
                <newname>TestAutomation.Bridge.FileSystemAdapter/k</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;RefreshDirectory&gt;b__26</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.FileSystemAdapter</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>command</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.FileSystemAdapter/&lt;&gt;c__DisplayClass4</name>
                <newname>TestAutomation.Bridge.FileSystemAdapter/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.FileSystemAdapter</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>sync</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.FileSystemAdapter/&lt;&gt;c__DisplayClass7</name>
                <newname>TestAutomation.Bridge.FileSystemAdapter/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.RemoteFileInfo)</signature>
                        <name>&lt;Pull&gt;b__3</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.FileSystemAdapter/&lt;&gt;c__DisplayClass4</signature>
                        <name>CS$&lt;&gt;8__locals5</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.IO.DirectoryInfo</signature>
                        <name>di</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.FileSystemAdapter/&lt;&gt;c__DisplayClassb</name>
                <newname>TestAutomation.Bridge.FileSystemAdapter/d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>&lt;Push&gt;b__9</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.FileSystemAdapter</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>formatted</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>sync</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.FileSystemAdapter/&lt;&gt;c__DisplayClassf</name>
                <newname>TestAutomation.Bridge.FileSystemAdapter/e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.RemoteFileInfo)</signature>
                        <name>&lt;GetFolderContent&gt;b__d</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Tuple`2&lt;System.Collections.Generic.List`1&lt;string&gt;,System.Collections.Generic.List`1&lt;string&gt;&gt;</signature>
                        <name>ret</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.IListener</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogDataReceivedHandler)</signature>
                        <name>add_LogDataReceived</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ClearLogBuffer</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.LogBuffer()</signature>
                        <name>get_SourceBuffer</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogDataReceivedHandler)</signature>
                        <name>remove_LogDataReceived</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogEntryCache)</signature>
                        <name>SetCache</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Stop</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>TestAutomation.Bridge.LogBuffer()</signature>
                        <name>SourceBuffer</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>TestAutomation.Bridge.LogDataReceivedHandler</signature>
                        <name>LogDataReceived</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>TestAutomation.Bridge.ILogData</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_LocalTimestamp</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_RemoteTimestamp</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.LogBuffer()</signature>
                        <name>get_SourceBuffer</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Tag</name>
                    </method>
                    <method>
                        <signature>string(TestAutomation.Bridge.OutputFormat, TestAutomation.Bridge.LogTimestampMode)</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Data</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>LocalTimestamp</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>RemoteTimestamp</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.LogBuffer()</signature>
                        <name>SourceBuffer</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Tag</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.IOReceiver</name>
                <newname>TestAutomation.Bridge.d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_DirectoryNotFound</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_FileNotFound</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Message</name>
                        <newname>u</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReadDenied</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Success</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_WriteDenied</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_DirectoryNotFound</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_FileNotFound</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Message</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ReadDenied</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Success</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_WriteDenied</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;DirectoryNotFound&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;FileNotFound&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Message&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;ReadDenied&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Success&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;WriteDenied&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.IpHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;int32&gt;(Managed.Adb.Device)</signature>
                        <name>GetReservedRemotePorts</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>NETSTAT_CMD</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.IpHelper/ReservedPortListener</name>
                <newname>TestAutomation.Bridge.IpHelper/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>&lt;ProcessNewLines&gt;b__0</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;int32&gt;()</signature>
                        <name>get_ReserverPorts</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;int32&gt;)</signature>
                        <name>set_ReserverPorts</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;int32&gt;</signature>
                        <name>&lt;ReserverPorts&gt;k__BackingField</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>m_ipRegex</name>
                        <newname>k</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.LinkResolverReceiver</name>
                <newname>TestAutomation.Bridge.e</newname>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;ProcessNewLines&gt;b__0</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RealPath</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_RealPath</name>
                        <newname>q</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;RealPath&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.LogBuffer</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.LogBuffer</signature>
                        <name>All</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogBuffer</signature>
                        <name>Events</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogBuffer</signature>
                        <name>Kernel</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogBuffer</signature>
                        <name>Main</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogBuffer</signature>
                        <name>Radio</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogBuffer</signature>
                        <name>System</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.LogData</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.Logs.EventContainer()</signature>
                        <name>get_EventData</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasGCEventData</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_LocalTimestamp</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_NanoSeconds</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.LogPriority()</signature>
                        <name>get_Priority</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ProcessId</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_RemoteTimestamp</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Seconds</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.LogBuffer()</signature>
                        <name>get_SourceBuffer</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Tag</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ThreadId</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Data</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Logs.EventContainer)</signature>
                        <name>set_EventData</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_LocalTimestamp</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_NanoSeconds</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogPriority)</signature>
                        <name>set_Priority</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ProcessId</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Seconds</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogBuffer)</signature>
                        <name>set_SourceBuffer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Tag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ThreadId</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(TestAutomation.Bridge.OutputFormat, TestAutomation.Bridge.LogTimestampMode)</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Data&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.EventContainer</signature>
                        <name>&lt;EventData&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;LocalTimestamp&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;NanoSeconds&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogPriority</signature>
                        <name>&lt;Priority&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ProcessId&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Seconds&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogBuffer</signature>
                        <name>&lt;SourceBuffer&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Tag&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ThreadId&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>m_epoc</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Data</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.Logs.EventContainer()</signature>
                        <name>EventData</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>HasGCEventData</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>LocalTimestamp</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>NanoSeconds</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.LogPriority()</signature>
                        <name>Priority</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ProcessId</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>RemoteTimestamp</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Seconds</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.LogBuffer()</signature>
                        <name>SourceBuffer</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Tag</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ThreadId</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.LogDataReceivedHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(TestAutomation.Bridge.ILogData, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.ILogData)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.LogEntryCache</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(TestAutomation.Bridge.ILogData)</signature>
                        <name>&lt;Clear&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.ILogData(System.Threading.CancellationToken)</signature>
                        <name>GetNext</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;TestAutomation.Bridge.ILogData,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Logger</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Device)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.LogBuffer(TestAutomation.Bridge.IListener)</signature>
                        <name>&lt;get_ActiveSources&gt;b__0</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(TestAutomation.Bridge.IListener)</signature>
                        <name>&lt;Start&gt;b__5</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(TestAutomation.Bridge.IListener)</signature>
                        <name>&lt;Start&gt;b__6</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(TestAutomation.Bridge.IListener)</signature>
                        <name>&lt;Start&gt;b__7</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(TestAutomation.Bridge.IListener)</signature>
                        <name>&lt;Start&gt;b__8</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(TestAutomation.Bridge.IListener)</signature>
                        <name>&lt;Start&gt;b__9</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;StartEventDispatching&gt;b__13</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.LogBuffer(string)</signature>
                        <name>&lt;WriteToUserLog&gt;b__14</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogDataReceivedHandler)</signature>
                        <name>add_LogDataReceived</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogDataReceivedHandler)</signature>
                        <name>add_m_logDataReceived</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>AddMarkerToLogFile</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CheckDisposed</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CheckLogDataSize</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateLogWriter</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Finalize</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.LogBuffer()</signature>
                        <name>get_ActiveSources</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsRecording</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.OutputFormat()</signature>
                        <name>get_OutputFormat</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.LogTimestampMode()</signature>
                        <name>get_TimestampMode</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_WriteSourceBufferName</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.ILogData)</signature>
                        <name>OnLogDataReceived</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogDataReceivedHandler)</signature>
                        <name>remove_LogDataReceived</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogDataReceivedHandler)</signature>
                        <name>remove_m_logDataReceived</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.OutputFormat)</signature>
                        <name>set_OutputFormat</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogTimestampMode)</signature>
                        <name>set_TimestampMode</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_WriteSourceBufferName</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogBuffer, bool)</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>StartEventDispatching</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>StartRecording</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Stop</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogBuffer, bool)</signature>
                        <name>StopListeners</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>StopRecording</name>
                    </method>
                    <method>
                        <signature>void(string, TestAutomation.Bridge.DmesgLogPriority)</signature>
                        <name>WriteToKernelLog</name>
                    </method>
                    <method>
                        <signature>void(string, string, TestAutomation.Bridge.LogBuffer, TestAutomation.Bridge.LogPriority)</signature>
                        <name>WriteToUserLog</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.IO.TextWriter</signature>
                        <name>_writer</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>_writerLock</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;string,TestAutomation.Bridge.LogBuffer&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate15</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;TestAutomation.Bridge.IListener,TestAutomation.Bridge.LogBuffer&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;TestAutomation.Bridge.IListener&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegateb</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;TestAutomation.Bridge.IListener&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatec</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;TestAutomation.Bridge.IListener&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegated</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;TestAutomation.Bridge.IListener&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatee</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;TestAutomation.Bridge.IListener&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatef</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogEntryCache</signature>
                        <name>m_cache</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Threading.CancellationTokenSource</signature>
                        <name>m_cancel</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.Device</signature>
                        <name>m_device</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_disposed</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.OutputFormat</signature>
                        <name>m_format</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_isListening</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_isRecording</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Bridge.IListener&gt;</signature>
                        <name>m_listeners</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogDataReceivedHandler</signature>
                        <name>m_logDataReceived</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_logFile</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_logIndex</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogTimestampMode</signature>
                        <name>m_timestampMpde</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_writeSourceBufferName</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;TestAutomation.Bridge.LogPriority,TestAutomation.Bridge.DmesgLogPriority&gt;</signature>
                        <name>PriorityMap</name>
                        <newname>p</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>TestAutomation.Bridge.LogBuffer()</signature>
                        <name>ActiveSources</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsRecording</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.OutputFormat()</signature>
                        <name>OutputFormat</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.LogTimestampMode()</signature>
                        <name>TimestampMode</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>WriteSourceBufferName</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>TestAutomation.Bridge.LogDataReceivedHandler</signature>
                        <name>LogDataReceived</name>
                    </event>
                    <event>
                        <signature>TestAutomation.Bridge.LogDataReceivedHandler</signature>
                        <name>m_logDataReceived</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>TestAutomation.Bridge.Logger/&lt;&gt;c__DisplayClass11</name>
                <newname>TestAutomation.Bridge.Logger/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.IListener)</signature>
                        <name>&lt;Start&gt;b__a</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.Logger</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>clearBuffer</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Logger/&lt;&gt;c__DisplayClass17</name>
                <newname>TestAutomation.Bridge.Logger/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.IListener)</signature>
                        <name>&lt;Stop&gt;b__16</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>clearBuffer</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Logger/&lt;&gt;c__DisplayClass1a</name>
                <newname>TestAutomation.Bridge.Logger/d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(TestAutomation.Bridge.IListener)</signature>
                        <name>&lt;StopListeners&gt;b__19</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.LogBuffer</signature>
                        <name>sourceBuffer</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Logger/&lt;&gt;c__DisplayClass3</name>
                <newname>TestAutomation.Bridge.Logger/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogBuffer)</signature>
                        <name>&lt;get_ActiveSources&gt;b__1</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.LogBuffer</signature>
                        <name>bitmap</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.LogListener</name>
                <methodlist>
                    <method>
                        <signature>void(Managed.Adb.Device, TestAutomation.Bridge.LogBuffer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogDataReceivedHandler)</signature>
                        <name>add_LogDataReceived</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ClearLogBuffer</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.LogBuffer()</signature>
                        <name>get_SourceBuffer</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>NewData</name>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.Logs.LogEntry, System.DateTime)</signature>
                        <name>NewEntry</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.ILogData)</signature>
                        <name>OnDataReceived</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogDataReceivedHandler)</signature>
                        <name>remove_LogDataReceived</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.LogEntryCache)</signature>
                        <name>SetCache</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Stop</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>LOG_HOME</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogDataReceivedHandler</signature>
                        <name>LogDataReceived</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogEntryCache</signature>
                        <name>m_cache</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.Device</signature>
                        <name>m_device</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Text.Encoding</signature>
                        <name>m_encoding</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.EventLogParser</signature>
                        <name>m_eventParser</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_isLogging</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Threading.Thread</signature>
                        <name>m_logger</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>m_messageRegex</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Managed.Adb.Logs.LogReceiver</signature>
                        <name>m_receiver</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogBuffer</signature>
                        <name>m_sourceBuffer</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>TestAutomation.Bridge.LogBuffer()</signature>
                        <name>SourceBuffer</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>TestAutomation.Bridge.LogDataReceivedHandler</signature>
                        <name>LogDataReceived</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>TestAutomation.Bridge.LogListener/&lt;&gt;c__DisplayClass5</name>
                <newname>TestAutomation.Bridge.LogListener/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;Start&gt;b__3</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.LogListener</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>clearBuffer</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.LogPriority</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.LogPriority</signature>
                        <name>Debug</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogPriority</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogPriority</signature>
                        <name>Error</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogPriority</signature>
                        <name>Fatal</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogPriority</signature>
                        <name>Info</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogPriority</signature>
                        <name>Silent</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogPriority</signature>
                        <name>Unknown</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogPriority</signature>
                        <name>Warning</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogPriority</signature>
                        <name>Verbose</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.LogTimestampMode</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.LogTimestampMode</signature>
                        <name>Local</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.LogTimestampMode</signature>
                        <name>Remote</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.LsReceiver</name>
                <newname>TestAutomation.Bridge.f</newname>
                <methodlist>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, bool, System.TimeSpan)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_DirectoryNotFound</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Bridge.RemoteFileInfo&gt;()</signature>
                        <name>get_Entries</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLink</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_PermissionDenied</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_DirectoryNotFound</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;TestAutomation.Bridge.RemoteFileInfo&gt;)</signature>
                        <name>set_Entries</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsLink</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_PermissionDenied</name>
                        <newname>q</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;DirectoryNotFound&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Bridge.RemoteFileInfo&gt;</signature>
                        <name>&lt;Entries&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsLink&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;PermissionDenied&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_fullName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_isDirectory</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.TimeSpan</signature>
                        <name>m_timeZoneOffset</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.MD5</name>
                <newname>TestAutomation.Bridge.g</newname>
                <methodlist>
                    <method>
                        <signature>string(string)</signature>
                        <name>CalculateLocal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(TestAutomation.Bridge.TABConnection, string)</signature>
                        <name>CalculateRemote</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.MD5/MD5Receiver</name>
                <newname>TestAutomation.Bridge.g/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Hash</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Hash</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Hash&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>m_matcher</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.MediaPlayer</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Bridge.TABConnection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;GetError&gt;b__3</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ConnectHeadset</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>ConnectHeadset</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DisconnectHeadset</name>
                    </method>
                    <method>
                        <signature>System.Exception(string[])</signature>
                        <name>GetError</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(TestAutomation.Bridge.MediaType, string)</signature>
                        <name>GetMimeType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsIPAddress</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>LaunchWebUrl</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>PlayAudio</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>PlayAudio</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.MediaType, string, string, string)</signature>
                        <name>PlayMedia</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>PlayVideo</name>
                    </method>
                    <method>
                        <signature>void(string, string, string)</signature>
                        <name>PlayVideo</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>PlayWithMusicPlayer</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>ShowImage</name>
                    </method>
                    <method>
                        <signature>void(string, string, string)</signature>
                        <name>ShowImage</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>COMMAND_FORMAT</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>COMMAND_FORMAT_MUSIC_PLAYER</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>COMMAND_FORMAT_WEB_LINK</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>COMMAND_HEADSET_PLUG</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate4</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DefaultImageViewer</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DefaultVideoPlayer</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;</signature>
                        <name>m_audioMimeTypes</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;</signature>
                        <name>m_imageMimeTypes</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.TABConnection</signature>
                        <name>m_tab</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>m_weburlPattern</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;</signature>
                        <name>m_videoMimeTypes</name>
                        <newname>j</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.MediaType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.MediaType</signature>
                        <name>Audio</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.MediaType</signature>
                        <name>Image</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.MediaType</signature>
                        <name>WebUrl</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.MediaType</signature>
                        <name>Video</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.OutputFormat</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.OutputFormat</signature>
                        <name>ADBMimic</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.OutputFormat</signature>
                        <name>Brief</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.OutputFormat</signature>
                        <name>Long</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.OutputFormat</signature>
                        <name>Process</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.OutputFormat</signature>
                        <name>Raw</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.OutputFormat</signature>
                        <name>Tag</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.OutputFormat</signature>
                        <name>ThreadTime</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.OutputFormat</signature>
                        <name>Time</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.OutputType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.OutputType</signature>
                        <name>Html</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.OutputType</signature>
                        <name>PlainText</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.OutputType</signature>
                        <name>ZippedHtml</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.OutputType</signature>
                        <name>ZippedPlainText</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.PackageManager</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Bridge.TABConnection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>DisablePackage</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>DoInstallPackage</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream, string, string, bool, bool)</signature>
                        <name>DoInstallPackage</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>DoUninstallPackage</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>EnablePackage</name>
                    </method>
                    <method>
                        <signature>bool(string, bool)</signature>
                        <name>EnablePackage</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>FindApkPath</name>
                    </method>
                    <method>
                        <signature>System.Tuple`2&lt;string,string&gt;(string)</signature>
                        <name>InstallPackage</name>
                    </method>
                    <method>
                        <signature>System.Tuple`2&lt;string,string&gt;(string, bool)</signature>
                        <name>InstallPackage</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>InstallRemotePackage</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;()</signature>
                        <name>ListPackages</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>PackageExists</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>RemoveRemotePackage</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>SyncPackageToDevice</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string(System.IO.Stream, string, string)</signature>
                        <name>SyncPackageToDevice</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>UninstallPackage</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.TABConnection</signature>
                        <name>m_tab</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PM_LIST_FULL</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.PackageManager/&lt;&gt;c__DisplayClass1</name>
                <newname>TestAutomation.Bridge.PackageManager/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;PackageExists&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>packageName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.PackageManager/ApkLocationReceiver</name>
                <newname>TestAutomation.Bridge.PackageManager/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>&lt;ProcessNewLines&gt;b__5</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;()</signature>
                        <name>get_Packages</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;string,string&gt;)</signature>
                        <name>set_Packages</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;</signature>
                        <name>&lt;Packages&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>pm_package_pattern</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.PackageManager/PackageEnablerReceiver</name>
                <newname>TestAutomation.Bridge.PackageManager/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>&lt;ProcessNewLines&gt;b__3</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.PackageManager/PackageEnablerReceiver/State()</signature>
                        <name>get_PackageState</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.PackageManager/PackageEnablerReceiver/State)</signature>
                        <name>set_PackageState</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.PackageManager/PackageEnablerReceiver/State</signature>
                        <name>&lt;PackageState&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>m_state_pattern</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.PackageManager/PackageEnablerReceiver/State</name>
                <newname>TestAutomation.Bridge.PackageManager/a/a</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.PackageManager/PackageEnablerReceiver/State</signature>
                        <name>Disabled</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.PackageManager/PackageEnablerReceiver/State</signature>
                        <name>Enabled</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.PackageManager/PackageEnablerReceiver/State</signature>
                        <name>Unknown</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.PowerManager</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Bridge.TABConnection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.StayOnMode)</signature>
                        <name>SetDisplayStayOnMode</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>CMD_FORMAT</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.TABConnection</signature>
                        <name>m_tab</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ProfileRating</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.ProfileRating</signature>
                        <name>Green</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.ProfileRating</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.ProfileRating</signature>
                        <name>Red</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.ProfileRating</signature>
                        <name>Yellow</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Property</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Value</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Value</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.RemoteFileInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DirectoryName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Extension</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.RemoteFileType()</signature>
                        <name>get_FileType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Group</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Info</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDirectory</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsExecutable</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFile</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsLink</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsRoot</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_LastAccessTime</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_LastAccessTimeUtc</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LinkName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Owner</name>
                    </method>
                    <method>
                        <signature>Managed.Adb.FilePermissions()</signature>
                        <name>get_Permissions</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.RemoteFileInfo(string, string)</signature>
                        <name>Parse</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.RemoteFileInfo(string, string, System.TimeSpan)</signature>
                        <name>Parse</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DirectoryName</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.RemoteFileType)</signature>
                        <name>set_FileType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Group</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Info</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsExecutable</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_LastAccessTime</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_LastAccessTimeUtc</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_Length</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LinkName</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Owner</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Managed.Adb.FilePermissions)</signature>
                        <name>set_Permissions</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;DirectoryName&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.RemoteFileType</signature>
                        <name>&lt;FileType&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Group&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Info&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsExecutable&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;LastAccessTime&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;LastAccessTimeUtc&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;Length&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;LinkName&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Owner&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>Managed.Adb.FilePermissions</signature>
                        <name>&lt;Permissions&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>LS_PATTERN_EX</name>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>m_matcher</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>DirectoryName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Extension</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.RemoteFileType()</signature>
                        <name>FileType</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>FullName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Group</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Info</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsDirectory</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsExecutable</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsFile</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsLink</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsRoot</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>LastAccessTime</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>LastAccessTimeUtc</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>Length</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>LinkName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Owner</name>
                    </property>
                    <property>
                        <signature>Managed.Adb.FilePermissions()</signature>
                        <name>Permissions</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.RemoteFileType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.RemoteFileType</signature>
                        <name>Block</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.RemoteFileType</signature>
                        <name>Character</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.RemoteFileType</signature>
                        <name>Directory</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.RemoteFileType</signature>
                        <name>DirectoryLink</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.RemoteFileType</signature>
                        <name>FIFO</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.RemoteFileType</signature>
                        <name>File</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.RemoteFileType</signature>
                        <name>Link</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.RemoteFileType</signature>
                        <name>Other</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.RemoteFileType</signature>
                        <name>Socket</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScreencapResponseReceiver</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.TABConnection, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Execute</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ExecuteCommand</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Success</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SaveImage</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Success</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Success&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.TABConnection</signature>
                        <name>connection</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>imageFilePath</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>receiveLength</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>Success</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.ArgumentProxyHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object[], System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;object&gt;(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;object&gt;(object[])</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.DynamicProxy</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>__alias__</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;object,object&gt;)</signature>
                        <name>__alias__</name>
                    </method>
                    <method>
                        <signature>object(object[])</signature>
                        <name>__call__</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.ScriptingTools.DynamicProxy(object)</signature>
                        <name>__create__</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.ScriptingTools.DynamicProxy(System.Type)</signature>
                        <name>__create__</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.ScriptingTools.DynamicProxy(System.Type, object)</signature>
                        <name>__create__</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>__decapitialize__</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>__dir__</name>
                    </method>
                    <method>
                        <signature>System.Reflection.BindingFlags()</signature>
                        <name>__get_flags__</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Reflection.MemberInfo(string)</signature>
                        <name>__get_member__</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>__hide__</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>__len__</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>__remove_argument_proxy__</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>__remove_call__</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>__remove_response_proxy__</name>
                    </method>
                    <method>
                        <signature>void(string, TestAutomation.Bridge.ScriptingTools.ArgumentProxyHandler)</signature>
                        <name>__set_argument_proxy__</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.DynamicInvoker)</signature>
                        <name>__set_call__</name>
                    </method>
                    <method>
                        <signature>void(string, TestAutomation.Bridge.ScriptingTools.ResponseProxyHandler)</signature>
                        <name>__set_response_proxy__</name>
                    </method>
                    <method>
                        <signature>string(System.Reflection.MemberInfo)</signature>
                        <name>&lt;__dir__&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;__dir__&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string(System.Reflection.MemberInfo)</signature>
                        <name>&lt;__dir__&gt;b__2</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;__dir__&gt;b__3</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;__dir__&gt;b__5</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>&lt;__len__&gt;b__d</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>&lt;TryGetIndex&gt;b__15</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>&lt;TrySetIndex&gt;b__1c</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get___allow_alias__</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get___allow_decapitalize__</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get___convert_chars__</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get___target_instance__</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get___target_type__</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>GetType</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodInfo&amp;, object[])</signature>
                        <name>SelectOverload</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set___allow_alias__</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set___allow_decapitalize__</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set___convert_chars__</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.BinaryOperationBinder, object, object&amp;)</signature>
                        <name>TryBinaryOperation</name>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.ConvertBinder, object&amp;)</signature>
                        <name>TryConvert</name>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.CreateInstanceBinder, object[], object&amp;)</signature>
                        <name>TryCreateInstance</name>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.GetIndexBinder, object[], object&amp;)</signature>
                        <name>TryGetIndex</name>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.GetMemberBinder, object&amp;)</signature>
                        <name>TryGetMember</name>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.SetIndexBinder, object[], object)</signature>
                        <name>TrySetIndex</name>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.SetMemberBinder, object)</signature>
                        <name>TrySetMember</name>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.UnaryOperationBinder, object&amp;)</signature>
                        <name>TryUnaryOperation</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;__allow_alias__&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;__allow_decapitalize__&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;__convert_chars__&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;System.Reflection.PropertyInfo&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate18</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;System.Reflection.PropertyInfo&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1f</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Converter`2&lt;System.Reflection.MemberInfo,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate6</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatea</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;System.Reflection.PropertyInfo&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatee</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,System.Collections.Generic.List`1&lt;string&gt;&gt;</signature>
                        <name>m_aliases</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,TestAutomation.Bridge.ScriptingTools.ArgumentProxyHandler&gt;</signature>
                        <name>m_argumentProxies</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.DynamicInvoker</signature>
                        <name>m_callMethod</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>m_hiddenMembers</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>m_instance</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,TestAutomation.Bridge.ScriptingTools.ResponseProxyHandler&gt;</signature>
                        <name>m_responseProxies</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>m_type</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>__allow_alias__</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>__allow_decapitalize__</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>__convert_chars__</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>__target_instance__</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>__target_type__</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.DynamicProxy/&lt;&gt;c__DisplayClass11</name>
                <newname>TestAutomation.Bridge.ScriptingTools.DynamicProxy/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.ScriptingTools.DynamicProxy</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.GetMemberBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.DynamicProxy/&lt;&gt;c__DisplayClass13</name>
                <newname>TestAutomation.Bridge.ScriptingTools.DynamicProxy/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object[])</signature>
                        <name>&lt;TryGetMember&gt;b__10</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.ScriptingTools.DynamicProxy/&lt;&gt;c__DisplayClass11</signature>
                        <name>CS$&lt;&gt;8__locals12</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodInfo</signature>
                        <name>method</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.DynamicProxy/&lt;&gt;c__DisplayClass1a</name>
                <newname>TestAutomation.Bridge.ScriptingTools.DynamicProxy/d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>&lt;TryGetIndex&gt;b__16</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.ParameterInfo)</signature>
                        <name>&lt;TryGetIndex&gt;b__17</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object[]</signature>
                        <name>indexes</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.DynamicProxy/&lt;&gt;c__DisplayClass21</name>
                <newname>TestAutomation.Bridge.ScriptingTools.DynamicProxy/e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>&lt;TrySetIndex&gt;b__1d</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.ParameterInfo)</signature>
                        <name>&lt;TrySetIndex&gt;b__1e</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object[]</signature>
                        <name>indexes</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.DynamicProxy/&lt;&gt;c__DisplayClass4d</name>
                <newname>TestAutomation.Bridge.ScriptingTools.DynamicProxy/h</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo)</signature>
                        <name>&lt;__get_member__&gt;b__44</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo)</signature>
                        <name>&lt;__get_member__&gt;b__45</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo)</signature>
                        <name>&lt;__get_member__&gt;b__46</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo)</signature>
                        <name>&lt;__get_member__&gt;b__47</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo)</signature>
                        <name>&lt;__get_member__&gt;b__48</name>
                        <newname>g</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.ScriptingTools.DynamicProxy</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.DynamicProxy/&lt;&gt;c__DisplayClass51</name>
                <newname>TestAutomation.Bridge.ScriptingTools.DynamicProxy/i</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MethodInfo)</signature>
                        <name>&lt;SelectOverload&gt;b__4f</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Type(System.Reflection.ParameterInfo)</signature>
                        <name>&lt;SelectOverload&gt;b__50</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object[]</signature>
                        <name>args</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Converter`2&lt;System.Reflection.ParameterInfo,System.Type&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate53</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.DynamicProxy/&lt;&gt;c__DisplayClassb</name>
                <newname>TestAutomation.Bridge.ScriptingTools.DynamicProxy/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>&lt;__dir__&gt;b__4</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.ScriptingTools.DynamicProxy</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>members</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.DynamicProxy/&lt;TryBinaryOperation&gt;o__SiteContainer29</name>
                <newname>TestAutomation.Bridge.ScriptingTools.DynamicProxy/g</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site2a</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site2b</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site2c</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site2d</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site2e</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site2f</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site30</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site31</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site32</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site33</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site34</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site35</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site36</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site37</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site38</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site39</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site3a</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site3b</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site3c</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site3d</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site3e</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site3f</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site40</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site41</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site42</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`4&lt;System.Runtime.CompilerServices.CallSite,object,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site43</name>
                        <newname>z</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.DynamicProxy/&lt;TryUnaryOperation&gt;o__SiteContainer23</name>
                <newname>TestAutomation.Bridge.ScriptingTools.DynamicProxy/f</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site24</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site25</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site26</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site27</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site28</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.EventProxy</name>
                <methodlist>
                    <method>
                        <signature>void(System.Reflection.EventInfo, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.ScriptingTools.EventProxy(System.Reflection.EventInfo, object)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.BinaryOperationBinder, object, object&amp;)</signature>
                        <name>TryBinaryOperation</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Reflection.EventInfo</signature>
                        <name>m_event</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>m_instance</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.Extensions</name>
                <newname>TestAutomation.Bridge.ScriptingTools.a</newname>
                <methodlist>
                    <method>
                        <signature>object(System.Reflection.MethodInfo, object, object[], bool)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.Formatting</name>
                <methodlist>
                    <method>
                        <signature>string(object)</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>string(System.Collections.Generic.ICollection`1&lt;object&gt;)</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.PythonCallable</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>__decapitalize__</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>__dir__</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>__len__</name>
                    </method>
                    <method>
                        <signature>string(System.Reflection.MemberInfo)</signature>
                        <name>&lt;__dir__&gt;b__10</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;__dir__&gt;b__11</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>&lt;__dir__&gt;b__14</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>&lt;__len__&gt;b__1b</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.MethodInfo&amp;, object[])</signature>
                        <name>SelectOverload</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.GetMemberBinder, object&amp;)</signature>
                        <name>TryGetMember</name>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.SetMemberBinder, object)</signature>
                        <name>TrySetMember</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Converter`2&lt;System.Reflection.MemberInfo,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate15</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate16</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;System.Reflection.PropertyInfo&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1c</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.PythonCallable/&lt;&gt;c__DisplayClass17</name>
                <newname>TestAutomation.Bridge.ScriptingTools.PythonCallable/e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;__dir__&gt;b__13</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.ScriptingTools.PythonCallable</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>members</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.PythonCallable/&lt;&gt;c__DisplayClass19</name>
                <newname>TestAutomation.Bridge.ScriptingTools.PythonCallable/f</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo)</signature>
                        <name>&lt;__dir__&gt;b__12</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.PythonCallable/&lt;&gt;c__DisplayClass4</name>
                <newname>TestAutomation.Bridge.ScriptingTools.PythonCallable/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo)</signature>
                        <name>&lt;TryGetMember&gt;b__0</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>object(object[])</signature>
                        <name>&lt;TryGetMember&gt;b__2</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.ScriptingTools.PythonCallable</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.GetMemberBinder</signature>
                        <name>binder</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MemberInfo</signature>
                        <name>member</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.PythonCallable/&lt;&gt;c__DisplayClass6</name>
                <newname>TestAutomation.Bridge.ScriptingTools.PythonCallable/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo)</signature>
                        <name>&lt;TryGetMember&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.ScriptingTools.PythonCallable/&lt;&gt;c__DisplayClass4</signature>
                        <name>CS$&lt;&gt;8__locals5</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.PythonCallable/&lt;&gt;c__DisplayClass9</name>
                <newname>TestAutomation.Bridge.ScriptingTools.PythonCallable/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MemberInfo)</signature>
                        <name>&lt;TrySetMember&gt;b__8</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.ScriptingTools.PythonCallable</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.SetMemberBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.PythonCallable/&lt;&gt;c__DisplayClassd</name>
                <newname>TestAutomation.Bridge.ScriptingTools.PythonCallable/d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.MethodInfo)</signature>
                        <name>&lt;SelectOverload&gt;b__b</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Type(System.Reflection.ParameterInfo)</signature>
                        <name>&lt;SelectOverload&gt;b__c</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object[]</signature>
                        <name>args</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Converter`2&lt;System.Reflection.ParameterInfo,System.Type&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatef</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.ResponseProxyHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>object(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.ScriptException</name>
                <methodlist>
                    <method>
                        <signature>void(System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.ScriptingTools.ScriptException(System.Exception)</signature>
                        <name>FromException</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ScriptingTools.TypeError</name>
                <methodlist>
                    <method>
                        <signature>void(string, object[])</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Shell</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Bridge.TABConnection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>BeginExecuteCommand</name>
                    </method>
                    <method>
                        <signature>void(string, System.Action`1&lt;string&gt;)</signature>
                        <name>BeginExecuteCommand</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>BeginExecuteScript</name>
                    </method>
                    <method>
                        <signature>void(string, System.Action`1&lt;string&gt;)</signature>
                        <name>BeginExecuteScript</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;(string)</signature>
                        <name>ExecuteCommand</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;(string, System.Action`1&lt;string&gt;, int32)</signature>
                        <name>ExecuteCommand</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;(string)</signature>
                        <name>ExecuteScript</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;(string, System.Action`1&lt;string&gt;, int32)</signature>
                        <name>ExecuteScript</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>FormatScript</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>ValidateCommand</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.TABConnection</signature>
                        <name>m_tab</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Shell/&lt;&gt;c__DisplayClass2</name>
                <newname>TestAutomation.Bridge.Shell/d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;BeginExecuteCommand&gt;b__1</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.Shell</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>command</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;string&gt;</signature>
                        <name>outputHandler</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Shell/&lt;&gt;c__DisplayClass6</name>
                <newname>TestAutomation.Bridge.Shell/e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;BeginExecuteScript&gt;b__5</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.Shell</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Action`1&lt;string&gt;</signature>
                        <name>outputHandler</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>script</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Shell/&lt;&gt;c__DisplayClass9</name>
                <newname>TestAutomation.Bridge.Shell/f</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;ValidateCommand&gt;b__8</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>cmd</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Shell/GenericShellReceiver</name>
                <newname>TestAutomation.Bridge.Shell/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Action`1&lt;string&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>&lt;.ctor&gt;b__b</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>&lt;ProcessNewLines&gt;b__d</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Output</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>OnNewLine</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`1&lt;System.Collections.Generic.List`1&lt;string&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatec</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Converter`2&lt;string,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatee</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>System.Lazy`1&lt;System.Collections.Generic.List`1&lt;string&gt;&gt;</signature>
                        <name>m_lines</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.WeakReference</signature>
                        <name>m_outputHandler</name>
                        <newname>n</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Shell/NewLineHandler</name>
                <newname>TestAutomation.Bridge.Shell/c</newname>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(string, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Shell/ObservingMultiLineReceiver</name>
                <newname>TestAutomation.Bridge.Shell/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.Shell/NewLineHandler)</signature>
                        <name>add_NewLine</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>AddLine</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.Shell/NewLineHandler)</signature>
                        <name>remove_NewLine</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.Shell/NewLineHandler</signature>
                        <name>NewLine</name>
                        <newname>l</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.SocketMutex</name>
                <methodlist>
                    <method>
                        <signature>System.Threading.Mutex(int32)</signature>
                        <name>EnterMutex</name>
                    </method>
                    <method>
                        <signature>void(System.Threading.Mutex)</signature>
                        <name>FreeMutex</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>MutexString</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.SqLite</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Bridge.TABConnection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.SqLiteDatabase(string)</signature>
                        <name>Connect</name>
                    </method>
                    <method>
                        <signature>string[](string, string)</signature>
                        <name>ExecuteCommand</name>
                    </method>
                    <method>
                        <signature>string[](string, string, bool)</signature>
                        <name>ExecuteCommand</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.TABConnection</signature>
                        <name>m_tab</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.SqLiteDatabase</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Bridge.SqLite, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Location</name>
                    </method>
                    <method>
                        <signature>System.WeakReference()</signature>
                        <name>get_Parent</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>get_TableNames</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.SqLiteTable(string)</signature>
                        <name>GetTable</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Location</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.WeakReference)</signature>
                        <name>set_Parent</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Location&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.WeakReference</signature>
                        <name>&lt;Parent&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>m_tableNames</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Location</name>
                    </property>
                    <property>
                        <signature>System.WeakReference()</signature>
                        <name>Parent</name>
                    </property>
                    <property>
                        <signature>string[]()</signature>
                        <name>TableNames</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.SqliteException</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.SqLiteRecord</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Bridge.SqLiteTable, string, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,object&gt;()</signature>
                        <name>get_Values</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>GetBoolean</name>
                    </method>
                    <method>
                        <signature>int32(string)</signature>
                        <name>GetInt</name>
                    </method>
                    <method>
                        <signature>float32(string)</signature>
                        <name>GetReal</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetString</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string)</signature>
                        <name>GetValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>GetValue</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>SetBoolean</name>
                    </method>
                    <method>
                        <signature>void(string, int32)</signature>
                        <name>SetInt</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SetNull</name>
                    </method>
                    <method>
                        <signature>void(string, float32)</signature>
                        <name>SetReal</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>SetString</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>SetValue</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_conditionKey</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>m_conditionValue</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.WeakReference</signature>
                        <name>m_parent</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,object&gt;()</signature>
                        <name>Values</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.SqLiteTable</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Bridge.SqLiteDatabase, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>CheckColumn</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>DeleteRecord</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>get_ColumNames</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,System.Type&gt;()</signature>
                        <name>get_DataTypes</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RecordCount</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>GetRawRecords</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.SqLiteRecord(string, object)</signature>
                        <name>GetRecord</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,object&gt;(string, object)</signature>
                        <name>GetRecordValues</name>
                    </method>
                    <method>
                        <signature>string(string, object)</signature>
                        <name>GetUnformattedRecord</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(string, object, string)</signature>
                        <name>GetValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object[])</signature>
                        <name>InsertNewRecord</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>InsertNewRecord</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, object, string, object)</signature>
                        <name>SetValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>SqlFormat</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,System.Type&gt;</signature>
                        <name>m_dataTypes</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.WeakReference</signature>
                        <name>m_parent</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string[]()</signature>
                        <name>ColumNames</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,System.Type&gt;()</signature>
                        <name>DataTypes</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>RecordCount</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.StayOnMode</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.StayOnMode</signature>
                        <name>Always</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.StayOnMode</signature>
                        <name>Charger</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.StayOnMode</signature>
                        <name>Disable</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.StayOnMode</signature>
                        <name>Usb</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.TABConnection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(string, bool, TestAutomation.Client.TestAutomationServerOptions, TestAutomation.Client.ScriptingServiceOptions)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(TestAutomation.Bridge.RemoteFileInfo)</signature>
                        <name>&lt;CheckRamDumps&gt;b__10</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(TestAutomation.Bridge.RemoteFileInfo)</signature>
                        <name>&lt;CheckRamDumps&gt;b__11</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.Assembly)</signature>
                        <name>&lt;IsCalledByAssemblyName&gt;b__3</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.CrashDumpHandler)</signature>
                        <name>add_CrashDumpCreated</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Back</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Capture</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>CheckAllowedCall</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>CheckDeviceStatus</name>
                    </method>
                    <method>
                        <signature>int32(bool, bool, bool)</signature>
                        <name>CheckRamDumps</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.DirectoryObserver(string, string, System.Action`1&lt;TestAutomation.Bridge.DirectoryObserverEvent&gt;)</signature>
                        <name>CreateDirectoryObserver</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.DirectoryObserver(string, System.Action`1&lt;TestAutomation.Bridge.DirectoryObserverEvent&gt;)</signature>
                        <name>CreateDirectoryObserver</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>DisableLockScreen</name>
                    </method>
                    <method>
                        <signature>bool(bool)</signature>
                        <name>DisableLockScreen</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.ActivityManager()</signature>
                        <name>get_ActivityManager</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.DirectoryObserver()</signature>
                        <name>get_AnrObserver</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.BugReport()</signature>
                        <name>get_BugReport</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.CrashdumpInfoCollection()</signature>
                        <name>get_Crashdumps</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.DirectoryObserver()</signature>
                        <name>get_DropboxObserver</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.FileSystemAdapter()</signature>
                        <name>get_File</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDirectlyExecutedFromConsole</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsExecutedByMarbleGui</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsExecutedByOratorGui</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsExecutedFromPython</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsExecutedFromVisualStudio</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsExecutedViaDebugging</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsRunningInIronPython</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.Logger()</signature>
                        <name>get_Logger</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.MediaPlayer()</signature>
                        <name>get_MediaPlayer</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.PackageManager()</signature>
                        <name>get_Packages</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.PowerManager()</signature>
                        <name>get_PowerManager</name>
                    </method>
                    <method>
                        <signature>System.IO.MemoryStream()</signature>
                        <name>get_screencapDataStream</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.ScriptingServiceClient()</signature>
                        <name>get_ScriptingServiceClient</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.Shell()</signature>
                        <name>get_Shell</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.SqLite()</signature>
                        <name>get_SqLite</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.TestServerClient()</signature>
                        <name>get_TestServerClient</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.Time()</signature>
                        <name>get_Time</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.DirectoryObserver()</signature>
                        <name>get_TombstoneObserver</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.ViewServerClient()</signature>
                        <name>get_ViewServerClient</name>
                    </method>
                    <method>
                        <signature>bool(string, bool, bool)</signature>
                        <name>GetCrashDumps</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;TestAutomation.Bridge.RemoteFileInfo&gt;(string)</signature>
                        <name>GetFileSystemItems</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(string[], string)</signature>
                        <name>GetHeapDumps</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>GetImage</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(string, bool)</signature>
                        <name>GetNewRamDumps</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetPackageFromCrashDump</name>
                    </method>
                    <method>
                        <signature>string(System.IO.Stream)</signature>
                        <name>GetPackageFromCrashDumpFile</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;int32&gt;()</signature>
                        <name>GetReservedRemotePorts</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>GetSystemDateTime</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>GetXMLDump</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>HodgeFilter</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Input</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsCalledByAssemblyName</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(string, bool, bool)</signature>
                        <name>IsExecutedByProcessName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsRunningInProcessByName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>ListForward</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.DirectoryObserverEvent)</signature>
                        <name>OnAnrObserved</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.DirectoryObserverEvent)</signature>
                        <name>OnDropboxObserved</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.DirectoryObserverEvent)</signature>
                        <name>OnTombstoneObserved</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RaiseAdbdPriority</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RemountDevice</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.CrashDumpHandler)</signature>
                        <name>remove_CrashDumpCreated</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RootAndRemount</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RootDevice</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.ActivityManager)</signature>
                        <name>set_ActivityManager</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.DirectoryObserver)</signature>
                        <name>set_AnrObserver</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.BugReport)</signature>
                        <name>set_BugReport</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.CrashdumpInfoCollection)</signature>
                        <name>set_Crashdumps</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.DirectoryObserver)</signature>
                        <name>set_DropboxObserver</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.FileSystemAdapter)</signature>
                        <name>set_File</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.Logger)</signature>
                        <name>set_Logger</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.MediaPlayer)</signature>
                        <name>set_MediaPlayer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.PackageManager)</signature>
                        <name>set_Packages</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.PowerManager)</signature>
                        <name>set_PowerManager</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.IO.MemoryStream)</signature>
                        <name>set_screencapDataStream</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.ScriptingServiceClient)</signature>
                        <name>set_ScriptingServiceClient</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.Shell)</signature>
                        <name>set_Shell</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.SqLite)</signature>
                        <name>set_SqLite</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestServerClient)</signature>
                        <name>set_TestServerClient</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.Time)</signature>
                        <name>set_Time</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.DirectoryObserver)</signature>
                        <name>set_TombstoneObserver</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.ViewServerClient)</signature>
                        <name>set_ViewServerClient</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32, int32)</signature>
                        <name>SetSystemDate</name>
                    </method>
                    <method>
                        <signature>bool(System.DateTime)</signature>
                        <name>SetSystemDateTime</name>
                    </method>
                    <method>
                        <signature>bool(int32, int32, int32)</signature>
                        <name>SetSystemTime</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SetUtcTimeZone</name>
                    </method>
                    <method>
                        <signature>string[](string)</signature>
                        <name>ShellCommand</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>StartLogging</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>StopLogging</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>SyncPcDateTime</name>
                    </method>
                    <method>
                        <signature>bool(int32, int32, int32, int32, bool)</signature>
                        <name>Touch</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.List`1&lt;int32&gt;)</signature>
                        <name>TouchAction</name>
                    </method>
                    <method>
                        <signature>bool(int32, int32, int32)</signature>
                        <name>TouchMove</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32, int32)</signature>
                        <name>TouchPress</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>TouchRelease</name>
                    </method>
                    <method>
                        <signature>bool(System.TimeSpan)</signature>
                        <name>WaitBooted</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>VerifyEntryAssemblyByName</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.ActivityManager</signature>
                        <name>&lt;ActivityManager&gt;k__BackingField</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.DirectoryObserver</signature>
                        <name>&lt;AnrObserver&gt;k__BackingField</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.BugReport</signature>
                        <name>&lt;BugReport&gt;k__BackingField</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.CrashdumpInfoCollection</signature>
                        <name>&lt;Crashdumps&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.DirectoryObserver</signature>
                        <name>&lt;DropboxObserver&gt;k__BackingField</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.FileSystemAdapter</signature>
                        <name>&lt;File&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.Logger</signature>
                        <name>&lt;Logger&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.MediaPlayer</signature>
                        <name>&lt;MediaPlayer&gt;k__BackingField</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.PackageManager</signature>
                        <name>&lt;Packages&gt;k__BackingField</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.PowerManager</signature>
                        <name>&lt;PowerManager&gt;k__BackingField</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.IO.MemoryStream</signature>
                        <name>&lt;screencapDataStream&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.ScriptingServiceClient</signature>
                        <name>&lt;ScriptingServiceClient&gt;k__BackingField</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.Shell</signature>
                        <name>&lt;Shell&gt;k__BackingField</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.SqLite</signature>
                        <name>&lt;SqLite&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.TestServerClient</signature>
                        <name>&lt;TestServerClient&gt;k__BackingField</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.Time</signature>
                        <name>&lt;Time&gt;k__BackingField</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.DirectoryObserver</signature>
                        <name>&lt;TombstoneObserver&gt;k__BackingField</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.ViewServerClient</signature>
                        <name>&lt;ViewServerClient&gt;k__BackingField</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>baseInputCommand</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>callerVerified</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Threading.Mutex</signature>
                        <name>connectionMutex</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.CrashDumpHandler</signature>
                        <name>CrashDumpCreated</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;TestAutomation.Bridge.RemoteFileInfo,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate12</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;TestAutomation.Bridge.RemoteFileInfo,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate13</name>
                        <newname>z</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.Assembly,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate9</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>DisAllowedBinderNames</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>RemountSuccess</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>RootSuccess</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TIME_ZONE_TAG</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>TestAutomation.Bridge.ActivityManager()</signature>
                        <name>ActivityManager</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.DirectoryObserver()</signature>
                        <name>AnrObserver</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.BugReport()</signature>
                        <name>BugReport</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.CrashdumpInfoCollection()</signature>
                        <name>Crashdumps</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.DirectoryObserver()</signature>
                        <name>DropboxObserver</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.FileSystemAdapter()</signature>
                        <name>File</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsDirectlyExecutedFromConsole</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsExecutedByMarbleGui</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsExecutedByOratorGui</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsExecutedFromPython</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsExecutedFromVisualStudio</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsExecutedViaDebugging</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsRunningInIronPython</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.Logger()</signature>
                        <name>Logger</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.MediaPlayer()</signature>
                        <name>MediaPlayer</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.PackageManager()</signature>
                        <name>Packages</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.PowerManager()</signature>
                        <name>PowerManager</name>
                    </property>
                    <property>
                        <signature>System.IO.MemoryStream()</signature>
                        <name>screencapDataStream</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Client.ScriptingServiceClient()</signature>
                        <name>ScriptingServiceClient</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.Shell()</signature>
                        <name>Shell</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.SqLite()</signature>
                        <name>SqLite</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Client.TestServerClient()</signature>
                        <name>TestServerClient</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.Time()</signature>
                        <name>Time</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.DirectoryObserver()</signature>
                        <name>TombstoneObserver</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.ViewServerClient()</signature>
                        <name>ViewServerClient</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>TestAutomation.Bridge.CrashDumpHandler</signature>
                        <name>CrashDumpCreated</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>TestAutomation.Bridge.TABConnection/&lt;&gt;c__DisplayClass1</name>
                <newname>TestAutomation.Bridge.TABConnection/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;CheckAllowedCall&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.TABConnection/&lt;&gt;c__DisplayClasse</name>
                <newname>TestAutomation.Bridge.TABConnection/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.Assembly)</signature>
                        <name>&lt;IsCalledByAssemblyName&gt;b__4</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.Assembly)</signature>
                        <name>&lt;IsCalledByAssemblyName&gt;b__5</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.AssemblyName)</signature>
                        <name>&lt;IsCalledByAssemblyName&gt;b__6</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.Assembly)</signature>
                        <name>&lt;IsCalledByAssemblyName&gt;b__7</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.AssemblyName)</signature>
                        <name>&lt;IsCalledByAssemblyName&gt;b__8</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>assemblyName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>myName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.TABConnection/BootReceiver</name>
                <newname>TestAutomation.Bridge.TABConnection/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Booted</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_TimedOut</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>ProcessNewLines</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Booted</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_TimedOut</name>
                        <newname>p</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Booted&gt;k__BackingField</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;TimedOut&gt;k__BackingField</name>
                        <newname>o</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.TABException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.TABInterface</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.TABConnection(string, TestAutomation.Bridge.TABInterface/DeviceType, bool, bool, bool)</signature>
                        <name>CreateConnection</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.TABConnection(TestAutomation.Bridge.TABInterface/DeviceType, bool, bool, bool)</signature>
                        <name>CreateConnection</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.TABConnection(string, bool, bool, bool)</signature>
                        <name>CreateConnectionWithSerial</name>
                    </method>
                    <method>
                        <signature>System.Threading.Mutex()</signature>
                        <name>EnterMutex</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(System.Threading.Mutex)</signature>
                        <name>FreeAdbRestart</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Threading.Mutex)</signature>
                        <name>FreeMutex</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_DEFAULT_ADB_TIMEOUT</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_INFINITE_ADB_TIMEOUT</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LONG_TIMEOUT</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;(TestAutomation.Bridge.TABInterface/DeviceType)</signature>
                        <name>GetDevices</name>
                    </method>
                    <method>
                        <signature>bool(System.Threading.Mutex&amp;)</signature>
                        <name>LockAdbRestart</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(bool)</signature>
                        <name>RecreateADBConnection</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>RestartAdbServer</name>
                    </method>
                    <method>
                        <signature>string(string, bool)</signature>
                        <name>RunAdbCommand</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_DEFAULT_ADB_TIMEOUT</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_INFINITE_ADB_TIMEOUT</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_LONG_TIMEOUT</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SetADBPath</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>StartAdbServer</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>StopAdbServer</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>WaitForAdb</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;DEFAULT_ADB_TIMEOUT&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;INFINITE_ADB_TIMEOUT&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;LONG_TIMEOUT&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ADB_LOCATION</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ADB_RECREATION_LOCK</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>AnrTracesFileSize</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>crashDumpFilesChecked</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_ADB_FORKER_WAIT_TIME</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_ADB_SERVER_WAIT_TIME</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>handledCrashDumpFiles</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>handledRamDumpFiles</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>newRamDumpFiles</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;int32,System.Threading.Mutex&gt;</signature>
                        <name>reservedScriptingPorts</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;int32,System.Threading.Mutex&gt;</signature>
                        <name>reservedServerPorts</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TABEvents</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>DEFAULT_ADB_TIMEOUT</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>INFINITE_ADB_TIMEOUT</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>LONG_TIMEOUT</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.TABInterface/DeviceType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.TABInterface/DeviceType</signature>
                        <name>ANY</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.TABInterface/DeviceType</signature>
                        <name>EMULATOR</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.TABInterface/DeviceType</signature>
                        <name>HW</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Time</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Bridge.TABConnection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(System.DateTime)</signature>
                        <name>CreateTimeSyncCommand</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>EnableAutomaticNetworkTime</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>EnableAutomaticNetworkTimeZone</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanAccessTimeSettings</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_TimeZone</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_TimeZoneDetails</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_TRANSACTION_setTimeZone</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Version()</signature>
                        <name>GetPlatformVersion</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>GetSystemDateTime</name>
                    </method>
                    <method>
                        <signature>System.DateTime(bool)</signature>
                        <name>GetSystemDateTime</name>
                    </method>
                    <method>
                        <signature>System.TimeSpan()</signature>
                        <name>GetTimeDiffToLocalPc</name>
                    </method>
                    <method>
                        <signature>System.TimeSpan(bool)</signature>
                        <name>GetTimeDiffToLocalPc</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>GetTimeSettingValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.TimeSpan()</signature>
                        <name>GetTimeZoneOffset</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>InternalGetCurrentTimeZone</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32, int32)</signature>
                        <name>SetSystemDate</name>
                    </method>
                    <method>
                        <signature>bool(System.DateTime)</signature>
                        <name>SetSystemDateTime</name>
                    </method>
                    <method>
                        <signature>bool(System.DateTime, bool)</signature>
                        <name>SetSystemDateTime</name>
                    </method>
                    <method>
                        <signature>bool(System.DateTime, bool, bool)</signature>
                        <name>SetSystemDateTime</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32, int32)</signature>
                        <name>SetSystemTime</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>SetTimeSettingValue</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SetTimeZone</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SetUtcTimeZone</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>SyncPcDateTime</name>
                    </method>
                    <method>
                        <signature>bool(bool)</signature>
                        <name>SyncPcDateTime</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>AUTO_TIME_TAG</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>AUTO_TIME_ZONE_TAG</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.TABConnection</signature>
                        <name>m_tab</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TIME_ZONE_TAG</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>VERSION_TAG</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>CanAccessTimeSettings</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>TimeZone</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>TimeZoneDetails</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>TRANSACTION_setTimeZone</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Time/&lt;&gt;c__DisplayClass2</name>
                <newname>TestAutomation.Bridge.Time/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.TimeZoneInfo)</signature>
                        <name>&lt;get_TimeZoneDetails&gt;b__0</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(System.TimeZoneInfo)</signature>
                        <name>&lt;get_TimeZoneDetails&gt;b__1</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>builder</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.TimeSpan</signature>
                        <name>offset</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Time/DateTimeReceiver</name>
                <newname>TestAutomation.Bridge.Time/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>AddOutput</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCancelled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Success</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_SystemTime</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Success</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(System.DateTime)</signature>
                        <name>set_SystemTime</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Success&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>&lt;SystemTime&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>SYSTEM_DATE_FORMAT</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Time/TimeZoneOffsetReceiver</name>
                <newname>TestAutomation.Bridge.Time/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>AddOutput</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCancelled</name>
                    </method>
                    <method>
                        <signature>System.TimeSpan()</signature>
                        <name>get_Offset</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(System.TimeSpan)</signature>
                        <name>set_Offset</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.TimeSpan</signature>
                        <name>&lt;Offset&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>offsetRe</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Tracing.Trace</name>
                <methodlist>
                    <method>
                        <signature>bool(System.Reflection.FieldInfo)</signature>
                        <name>&lt;LookForIdentifier&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.FieldInfo)</signature>
                        <name>&lt;LookForIdentifier&gt;b__2</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(object)</signature>
                        <name>LookForIdentifier</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(object, object)</signature>
                        <name>LookForIdentifier</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, string, object[])</signature>
                        <name>WriteMessage</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Predicate`1&lt;System.Reflection.FieldInfo&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;System.Reflection.FieldInfo&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate5</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Tracing.Trace/&lt;&gt;c__DisplayClass6</name>
                <newname>TestAutomation.Bridge.Tracing.Trace/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.FieldInfo)</signature>
                        <name>&lt;LookForIdentifier&gt;b__1</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>parent</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Tracing.TraceListener</name>
                <methodlist>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;System.Tuple`2&lt;string,TestAutomation.Bridge.Tracing.TraceMessageHandler&gt;&gt;()</signature>
                        <name>&lt;Init&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, TestAutomation.Bridge.Tracing.TraceMessageHandler)</signature>
                        <name>AddListener</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.Tracing.TraceMessageHandler)</signature>
                        <name>AddListener</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>BroadcastMessage</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.Tracing.TraceMessageHandler)</signature>
                        <name>RemoveListeners</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`1&lt;System.Collections.Generic.List`1&lt;System.Tuple`2&lt;string,TestAutomation.Bridge.Tracing.TraceMessageHandler&gt;&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Lazy`1&lt;System.Collections.Generic.List`1&lt;System.Tuple`2&lt;string,TestAutomation.Bridge.Tracing.TraceMessageHandler&gt;&gt;&gt;</signature>
                        <name>m_listeners</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Tracing.TraceListener/&lt;&gt;c__DisplayClass3</name>
                <newname>TestAutomation.Bridge.Tracing.TraceListener/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Tuple`2&lt;string,TestAutomation.Bridge.Tracing.TraceMessageHandler&gt;)</signature>
                        <name>&lt;AddListener&gt;b__2</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.Tracing.TraceMessageHandler</signature>
                        <name>listener</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Tracing.TraceListener/&lt;&gt;c__DisplayClass7</name>
                <newname>TestAutomation.Bridge.Tracing.TraceListener/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Tuple`2&lt;string,TestAutomation.Bridge.Tracing.TraceMessageHandler&gt;)</signature>
                        <name>&lt;RemoveListeners&gt;b__5</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.Tracing.TraceMessageHandler</signature>
                        <name>listener</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Tracing.TraceMessageHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(string, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ViewNode</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.Window, TestAutomation.Bridge.ViewNode, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(TestAutomation.Bridge.Property, TestAutomation.Bridge.Property)</signature>
                        <name>&lt;LoadProperties&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Xml.XmlDocument()</signature>
                        <name>Dump</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Dump</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Baseline</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.SortedSet`1&lt;string&gt;()</signature>
                        <name>get_Categories</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Bridge.ViewNode&gt;()</signature>
                        <name>get_Children</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.ProfileRating()</signature>
                        <name>get_DrawRating</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_DrawTime</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Filtered</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasFocus</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HashCode</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasMargins</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Height</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Id</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ImageReferences</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Index</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.ProfileRating()</signature>
                        <name>get_LayoutRating</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_LayoutTime</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Left</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MarginBottom</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MarginLeft</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MarginRight</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MarginTop</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.ProfileRating()</signature>
                        <name>get_MeasureRating</name>
                    </method>
                    <method>
                        <signature>float64()</signature>
                        <name>get_MeasureTime</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,TestAutomation.Bridge.Property&gt;()</signature>
                        <name>get_NamedProperties</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PaddingBottom</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PaddingLeft</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PaddingRight</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PaddingTop</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.ViewNode()</signature>
                        <name>get_Parent</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Bridge.Property&gt;()</signature>
                        <name>get_Properties</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ProtocolVersion</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ScrollX</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ScrollY</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Top</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Width</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ViewCount</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_WillNotDraw</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.Window()</signature>
                        <name>get_Window</name>
                    </method>
                    <method>
                        <signature>bool(string, bool)</signature>
                        <name>GetBoolean</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(string, int32)</signature>
                        <name>GetInt</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>LoadProperties</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Baseline</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.SortedSet`1&lt;string&gt;)</signature>
                        <name>set_Categories</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;TestAutomation.Bridge.ViewNode&gt;)</signature>
                        <name>set_Children</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.ProfileRating)</signature>
                        <name>set_DrawRating</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_DrawTime</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Filtered</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_HasFocus</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_HashCode</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_HasMargins</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Height</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Id</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ImageReferences</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Index</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.ProfileRating)</signature>
                        <name>set_LayoutRating</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_LayoutTime</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Left</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_MarginBottom</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_MarginLeft</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_MarginRight</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_MarginTop</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.ProfileRating)</signature>
                        <name>set_MeasureRating</name>
                    </method>
                    <method>
                        <signature>void(float64)</signature>
                        <name>set_MeasureTime</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;string,TestAutomation.Bridge.Property&gt;)</signature>
                        <name>set_NamedProperties</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_PaddingBottom</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_PaddingLeft</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_PaddingRight</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_PaddingTop</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.ViewNode)</signature>
                        <name>set_Parent</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;TestAutomation.Bridge.Property&gt;)</signature>
                        <name>set_Properties</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ProtocolVersion</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ScrollX</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ScrollY</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Top</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Width</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ViewCount</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_WillNotDraw</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.Window)</signature>
                        <name>set_Window</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Baseline&gt;k__BackingField</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.SortedSet`1&lt;string&gt;</signature>
                        <name>&lt;Categories&gt;k__BackingField</name>
                        <newname>ai</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Bridge.ViewNode&gt;</signature>
                        <name>&lt;Children&gt;k__BackingField</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.ProfileRating</signature>
                        <name>&lt;DrawRating&gt;k__BackingField</name>
                        <newname>ah</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;DrawTime&gt;k__BackingField</name>
                        <newname>ae</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Filtered&gt;k__BackingField</name>
                        <newname>am</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;HasFocus&gt;k__BackingField</name>
                        <newname>aa</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;HashCode&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;HasMargins&gt;k__BackingField</name>
                        <newname>z</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Height&gt;k__BackingField</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Id&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ImageReferences&gt;k__BackingField</name>
                        <newname>ak</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Index&gt;k__BackingField</name>
                        <newname>ab</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.ProfileRating</signature>
                        <name>&lt;LayoutRating&gt;k__BackingField</name>
                        <newname>ag</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;LayoutTime&gt;k__BackingField</name>
                        <newname>ad</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Left&gt;k__BackingField</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;MarginBottom&gt;k__BackingField</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;MarginLeft&gt;k__BackingField</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;MarginRight&gt;k__BackingField</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;MarginTop&gt;k__BackingField</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.ProfileRating</signature>
                        <name>&lt;MeasureRating&gt;k__BackingField</name>
                        <newname>af</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>&lt;MeasureTime&gt;k__BackingField</name>
                        <newname>ac</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,TestAutomation.Bridge.Property&gt;</signature>
                        <name>&lt;NamedProperties&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;PaddingBottom&gt;k__BackingField</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;PaddingLeft&gt;k__BackingField</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;PaddingRight&gt;k__BackingField</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;PaddingTop&gt;k__BackingField</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.ViewNode</signature>
                        <name>&lt;Parent&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Bridge.Property&gt;</signature>
                        <name>&lt;Properties&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ProtocolVersion&gt;k__BackingField</name>
                        <newname>an</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ScrollX&gt;k__BackingField</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ScrollY&gt;k__BackingField</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Top&gt;k__BackingField</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Width&gt;k__BackingField</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ViewCount&gt;k__BackingField</name>
                        <newname>al</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;WillNotDraw&gt;k__BackingField</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.Window</signature>
                        <name>&lt;Window&gt;k__BackingField</name>
                        <newname>aj</newname>
                    </field>
                    <field>
                        <signature>System.Comparison`1&lt;TestAutomation.Bridge.Property&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>ao</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>MISCELLANIOUS</name>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>RED_THRESHOLD</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>float64</signature>
                        <name>YELLOW_THRESHOLD</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Baseline</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.SortedSet`1&lt;string&gt;()</signature>
                        <name>Categories</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Bridge.ViewNode&gt;()</signature>
                        <name>Children</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.ProfileRating()</signature>
                        <name>DrawRating</name>
                    </property>
                    <property>
                        <signature>float64()</signature>
                        <name>DrawTime</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Filtered</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>HasFocus</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>HashCode</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>HasMargins</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Height</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Id</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ImageReferences</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Index</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.ProfileRating()</signature>
                        <name>LayoutRating</name>
                    </property>
                    <property>
                        <signature>float64()</signature>
                        <name>LayoutTime</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Left</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>MarginBottom</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>MarginLeft</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>MarginRight</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>MarginTop</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.ProfileRating()</signature>
                        <name>MeasureRating</name>
                    </property>
                    <property>
                        <signature>float64()</signature>
                        <name>MeasureTime</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,TestAutomation.Bridge.Property&gt;()</signature>
                        <name>NamedProperties</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>PaddingBottom</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>PaddingLeft</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>PaddingRight</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>PaddingTop</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.ViewNode()</signature>
                        <name>Parent</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Bridge.Property&gt;()</signature>
                        <name>Properties</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ProtocolVersion</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ScrollX</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ScrollY</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Top</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Width</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ViewCount</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>WillNotDraw</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Bridge.Window()</signature>
                        <name>Window</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ViewServerClient</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Bridge.TABConnection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;GetWindows&gt;b__1</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>BuildIsServerRunningShellCommand</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>BuildStartServerShellCommand</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>BuildStopServerShellCommand</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Connect</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>CreatePortForward</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Disconnect</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsConnected</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ProtocolVersion</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ServerVersion</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.ViewNode()</signature>
                        <name>GetFocusedView</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetFocusedWindow</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetServerProtocolVersion</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetServerVersion</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.Window[]()</signature>
                        <name>GetWindows</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsServerRunning</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.ViewNode(TestAutomation.Bridge.Window)</signature>
                        <name>LoadWindowData</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Bridge.ViewNode(System.IO.Stream, TestAutomation.Bridge.Window)</signature>
                        <name>ParseViewHierarchy</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ProtocolVersion</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ServerVersion</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>StartServer</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>StartServer</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>StopServer</name>
                        <newname>g</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ProtocolVersion&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ServerVersion&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_SERVER_PORT</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.TABConnection</signature>
                        <name>m_tab</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>SERVICE_CODE_IS_SERVER_RUNNING</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>SERVICE_CODE_START_SERVER</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>SERVICE_CODE_STOP_SERVER</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsConnected</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ProtocolVersion</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ServerVersion</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.ViewServerInfo</name>
                <methodlist>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ProtocolVersion</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ServerVersion</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ProtocolVersion</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ServerVersion</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ProtocolVersion&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ServerVersion&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>ProtocolVersion</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ServerVersion</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Bridge.Window</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.ViewServerClient)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Encode</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Id</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFocused</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Id</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Id&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.ViewServerClient</signature>
                        <name>m_client</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Id</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsFocused</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.AccessibilityEvent</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Action</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_EventTime</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.EventType()</signature>
                        <name>get_EventType</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MovementGranularity</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PackageName</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PageFlipCount</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_PageFlipCountTimestamp</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RecordCount</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.AccessibilityRecord&gt;()</signature>
                        <name>get_Records</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>get_TimeStamp</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Action</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_EventTime</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.EventType)</signature>
                        <name>set_EventType</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_MovementGranularity</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_PackageName</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_PageFlipCount</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_PageFlipCountTimestamp</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_RecordCount</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;TestAutomation.Client.AccessibilityRecord&gt;)</signature>
                        <name>set_Records</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>set_TimeStamp</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Action&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;EventTime&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>&lt;EventType&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;MovementGranularity&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;PackageName&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;PageFlipCount&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;PageFlipCountTimestamp&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;RecordCount&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.AccessibilityRecord&gt;</signature>
                        <name>&lt;Records&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;</signature>
                        <name>&lt;TimeStamp&gt;k__BackingField</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Action</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>EventTime</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Client.EventType()</signature>
                        <name>EventType</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>MovementGranularity</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>PackageName</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>PageFlipCount</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>PageFlipCountTimestamp</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>RecordCount</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.AccessibilityRecord&gt;()</signature>
                        <name>Records</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>TimeStamp</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.AccessibilityEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(TestAutomation.Client.AccessibilityEvent, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.AccessibilityEvent)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.AccessibilityRecord</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_AddedCount</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_BeforeText</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.Rect()</signature>
                        <name>get_BoundsInParent</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.Rect()</signature>
                        <name>get_BoundsInScreen</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ClassName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ContentDescription</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_CurrentItemIndex</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_FromIndex</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsChecked</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFullScreen</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsPassword</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsScrollable</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ItemCount</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RemovedCount</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ScrollX</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ScrollY</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_Text</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ToIndex</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_ViewId</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_AddedCount</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_BeforeText</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.Rect)</signature>
                        <name>set_BoundsInParent</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.Rect)</signature>
                        <name>set_BoundsInScreen</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ClassName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ContentDescription</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_CurrentItemIndex</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_FromIndex</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsChecked</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsEnabled</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsFullScreen</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsPassword</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsScrollable</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ItemCount</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_RemovedCount</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ScrollX</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ScrollY</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;)</signature>
                        <name>set_Text</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ToIndex</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_ViewId</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;AddedCount&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;BeforeText&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.Rect</signature>
                        <name>&lt;BoundsInParent&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.Rect</signature>
                        <name>&lt;BoundsInScreen&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ClassName&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ContentDescription&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;CurrentItemIndex&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;FromIndex&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsChecked&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsEnabled&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsFullScreen&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsPassword&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsScrollable&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ItemCount&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;RemovedCount&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ScrollX&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ScrollY&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>&lt;Text&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ToIndex&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>&lt;ViewId&gt;k__BackingField</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>AddedCount</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>BeforeText</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Client.Rect()</signature>
                        <name>BoundsInParent</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Client.Rect()</signature>
                        <name>BoundsInScreen</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ClassName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ContentDescription</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>CurrentItemIndex</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>FromIndex</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsChecked</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsEnabled</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsFullScreen</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsPassword</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsScrollable</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ItemCount</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>RemovedCount</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ScrollX</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ScrollY</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>Text</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ToIndex</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>ViewId</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.Album</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_H</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.ThumbnailItem&gt;()</signature>
                        <name>get_Thumbnails</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_W</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_X</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Y</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetXml</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_H</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;TestAutomation.Client.ThumbnailItem&gt;)</signature>
                        <name>set_Thumbnails</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_W</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_X</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Y</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;H&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.ThumbnailItem&gt;</signature>
                        <name>&lt;Thumbnails&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;W&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;X&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Y&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DESCRIPTION</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>H</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.ThumbnailItem&gt;()</signature>
                        <name>Thumbnails</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>W</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>X</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Y</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.AlbumItem</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Album</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_H</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Index</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_W</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_X</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Y</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Album</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_H</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Index</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_W</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_X</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Y</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Album&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;H&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Index&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;W&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;X&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Y&gt;k__BackingField</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Album</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>H</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Index</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>W</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>X</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Y</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.Albumset</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.AlbumItem&gt;()</signature>
                        <name>get_Albums</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_H</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_W</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_X</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Y</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetXml</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;TestAutomation.Client.AlbumItem&gt;)</signature>
                        <name>set_Albums</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_H</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_W</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_X</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Y</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.AlbumItem&gt;</signature>
                        <name>&lt;Albums&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;H&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;W&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;X&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Y&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DESCRIPTION</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.AlbumItem&gt;()</signature>
                        <name>Albums</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>H</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>W</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>X</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Y</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.ConnectionState</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Client.ConnectionState</signature>
                        <name>Connected</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.ConnectionState</signature>
                        <name>FailedToConnect</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.ConnectionState</signature>
                        <name>HostExited</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.ConnectionState</signature>
                        <name>Initial</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.ConnectionState</signature>
                        <name>UsbDisconnected</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.ConnectionState</signature>
                        <name>UserDisconnected</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.Constants</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_SCRIPTING_PORT_RANGE_END</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_SCRIPTING_PORT_RANGE_START</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_SERVER_PORT_RANGE_END</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_SERVER_PORT_RANGE_START</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DEVICE_START_TIME_TAG</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RPC_MAX_PACKET_SIZE</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>RPC_MESSAGE_HEADER_LENGTH</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>SCRIPTING_SERVICE_ACTION_NAME</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>SCRIPTING_SERVICE_APK_NAME</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>SCRIPTING_SERVICE_COMPONENT_NAME</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>SCRIPTING_SERVICE_KILL_ACTION_NAME</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>SCRIPTING_SERVICE_PACKAGE_NAME</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>SCRIPTING_SERVICE_PORT_EXTRA_KEY</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TEST_SERVER_ARCHIVE_NAME</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TEST_SERVER_CLASS_NAME</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TEST_SERVER_ENTRY_METHOD_NAME</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TEST_SERVER_EVENT_SUBSCRIPTION</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TEST_SERVER_PACKAGE_NAME</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TEST_SERVER_REMOTE_PATH</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>TEST_SERVER_START_TIMEOUT</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>UI_AUTOMATOR_PROCESS_NAME</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.DynamicInvoker</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object[], System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>object(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>object(object[])</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.EventType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_ANNOUNCEMENT</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_GESTURE_DETECTION_END</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_GESTURE_DETECTION_START</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_NOTIFICATION_STATE_CHANGED</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_TOUCH_EXPLORATION_GESTURE_END</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_TOUCH_EXPLORATION_GESTURE_START</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_TOUCH_INTERACTION_END</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_TOUCH_INTERACTION_START</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_VIEW_ACCESSIBILITY_FOCUSED</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_VIEW_CLICKED</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_VIEW_FOCUSED</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_VIEW_HOVER_ENTER</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_VIEW_HOVER_EXIT</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_VIEW_LONG_CLICKED</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_VIEW_SCROLLED</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_VIEW_SELECTED</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_VIEW_TEXT_CHANGED</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_VIEW_TEXT_SELECTION_CHANGED</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_WINDOW_CONTENT_CHANGED</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.EventType</signature>
                        <name>TYPE_WINDOW_STATE_CHANGED</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.InvokeData</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_id</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_method</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object[]()</signature>
                        <name>get_params</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_id</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_method</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object[])</signature>
                        <name>set_params</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;id&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;method&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>object[]</signature>
                        <name>&lt;params&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>id</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>method</name>
                    </property>
                    <property>
                        <signature>object[]()</signature>
                        <name>params</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.Key</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_H</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Label</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.PopUpLabel&gt;()</signature>
                        <name>get_PopUpKeys</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_W</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_X</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Y</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_H</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Label</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;TestAutomation.Client.PopUpLabel&gt;)</signature>
                        <name>set_PopUpKeys</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_W</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_X</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Y</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;H&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Label&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.PopUpLabel&gt;</signature>
                        <name>&lt;PopUpKeys&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;W&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;X&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Y&gt;k__BackingField</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>H</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Label</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.PopUpLabel&gt;()</signature>
                        <name>PopUpKeys</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>W</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>X</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Y</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.Keyboard</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_H</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_KeyboardOn</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.Key&gt;()</signature>
                        <name>get_Keys</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Locale</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ShiftMode</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_W</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_X</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Y</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetXml</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_H</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_KeyboardOn</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;TestAutomation.Client.Key&gt;)</signature>
                        <name>set_Keys</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Locale</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ShiftMode</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_W</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_X</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Y</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;H&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;KeyboardOn&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.Key&gt;</signature>
                        <name>&lt;Keys&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Locale&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ShiftMode&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;W&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;X&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Y&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DESCRIPTION</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>H</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>KeyboardOn</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.Key&gt;()</signature>
                        <name>Keys</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Locale</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ShiftMode</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>W</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>X</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Y</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.MessageCounter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int16()</signature>
                        <name>GetNextTransactionId</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>m_currentId</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.MessageType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Client.MessageType</signature>
                        <name>Event</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.MessageType</signature>
                        <name>MethodInvoke</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.MessageType</signature>
                        <name>MethodResponse</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.PopUpLabel</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Key</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Key&gt;k__BackingField</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Key</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.Rect</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_bottom</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_left</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_right</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_top</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_bottom</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_left</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_right</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_top</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;bottom&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;left&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;right&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;top&gt;k__BackingField</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>bottom</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>left</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>right</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>top</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.RemoteClassBase</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Client.TestServerClient)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RemoteClassName</name>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.GetMemberBinder, object&amp;)</signature>
                        <name>TryGetMember</name>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.InvokeMemberBinder, object[], object&amp;)</signature>
                        <name>TryInvokeMember</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Client.TestServerClient</signature>
                        <name>m_tsc</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>RemoteClassName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.RemoteClassBase/&lt;&gt;c__DisplayClass1</name>
                <newname>TestAutomation.Client.RemoteClassBase/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object[])</signature>
                        <name>&lt;TryGetMember&gt;b__0</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Client.RemoteClassBase</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.GetMemberBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.RemoteFileSystem</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Client.TestServerClient)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RemoteClassName</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>RemoteClassName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.RPCEvent</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_EventArgs</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_EventType</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>GetEventType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_EventArgs</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_EventType</name>
                    </method>
                    <method>
                        <signature>System.Type(string, bool)</signature>
                        <name>TypeFromFriendlyName</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;EventArgs&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;EventType&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>EventArgs</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>EventType</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.RPCEvent/&lt;&gt;c__DisplayClass4</name>
                <newname>TestAutomation.Client.RPCEvent/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>&lt;TypeFromFriendlyName&gt;b__0</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>&lt;TypeFromFriendlyName&gt;b__1</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>&lt;TypeFromFriendlyName&gt;b__2</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>friendlyName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>ignoreCase</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.RPCInvoke</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object[]()</signature>
                        <name>get_Args</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ClassName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MethodName</name>
                    </method>
                    <method>
                        <signature>void(object[])</signature>
                        <name>set_Args</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ClassName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_MethodName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object[]</signature>
                        <name>&lt;Args&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ClassName&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;MethodName&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object[]()</signature>
                        <name>Args</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ClassName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>MethodName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.RPCMessage</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Client.MessageType, unsigned int16, unsigned int32, bool, unsigned int16, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.MessageType, unsigned int16, unsigned int32, bool, unsigned int16, unsigned int8[], string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.RPCMessage(TestAutomation.Client.RPCMessageHeader, unsigned int8[])</signature>
                        <name>FromBytes</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.RPCMessage(TestAutomation.Client.RPCMessageHeader, unsigned int8[], int32)</signature>
                        <name>FromBytes</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.RPCMessage(unsigned int8[])</signature>
                        <name>FromBytes</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.RPCMessage(unsigned int8[], int32)</signature>
                        <name>FromBytes</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Continue</name>
                    </method>
                    <method>
                        <signature>unsigned int16()</signature>
                        <name>get_Index</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Json</name>
                    </method>
                    <method>
                        <signature>System.Text.Encoding()</signature>
                        <name>get_MessageEncoding</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>unsigned int32()</signature>
                        <name>get_MessageLength</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.MessageType()</signature>
                        <name>get_MessageType</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_OptionalBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int32()</signature>
                        <name>get_TotalChunkLength</name>
                    </method>
                    <method>
                        <signature>unsigned int32()</signature>
                        <name>get_TotalDataLength</name>
                    </method>
                    <method>
                        <signature>unsigned int16()</signature>
                        <name>get_TransactionId</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>GetBytes</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Continue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16)</signature>
                        <name>set_Index</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Json</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.MessageType)</signature>
                        <name>set_MessageType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>set_OptionalBytes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>set_TotalChunkLength</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>set_TotalDataLength</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int16)</signature>
                        <name>set_TransactionId</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Continue&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>&lt;Index&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Json&gt;k__BackingField</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.MessageType</signature>
                        <name>&lt;MessageType&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>&lt;OptionalBytes&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>&lt;TotalChunkLength&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>&lt;TotalDataLength&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>&lt;TransactionId&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>Continue</name>
                    </property>
                    <property>
                        <signature>unsigned int16()</signature>
                        <name>Index</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Json</name>
                    </property>
                    <property>
                        <signature>System.Text.Encoding()</signature>
                        <name>MessageEncoding</name>
                    </property>
                    <property>
                        <signature>unsigned int32()</signature>
                        <name>MessageLength</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Client.MessageType()</signature>
                        <name>MessageType</name>
                    </property>
                    <property>
                        <signature>unsigned int8[]()</signature>
                        <name>OptionalBytes</name>
                    </property>
                    <property>
                        <signature>unsigned int32()</signature>
                        <name>TotalChunkLength</name>
                    </property>
                    <property>
                        <signature>unsigned int32()</signature>
                        <name>TotalDataLength</name>
                    </property>
                    <property>
                        <signature>unsigned int16()</signature>
                        <name>TransactionId</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.RPCMessageHeader</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Continue</name>
                    </method>
                    <method>
                        <signature>unsigned int16()</signature>
                        <name>get_Index</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.MessageType()</signature>
                        <name>get_MessageType</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_OptionalBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int32()</signature>
                        <name>get_TotalChunkLength</name>
                    </method>
                    <method>
                        <signature>unsigned int32()</signature>
                        <name>get_TotalDataLength</name>
                    </method>
                    <method>
                        <signature>unsigned int16()</signature>
                        <name>get_TransactionId</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Continue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int16)</signature>
                        <name>set_Index</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.MessageType)</signature>
                        <name>set_MessageType</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>set_OptionalBytes</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>set_TotalChunkLength</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int32)</signature>
                        <name>set_TotalDataLength</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int16)</signature>
                        <name>set_TransactionId</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(unsigned int8[], TestAutomation.Client.RPCMessageHeader&amp;)</signature>
                        <name>TryGetFromBytes</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Continue&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>&lt;Index&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.MessageType</signature>
                        <name>&lt;MessageType&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>&lt;OptionalBytes&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>&lt;TotalChunkLength&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>&lt;TotalDataLength&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>&lt;TransactionId&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>Continue</name>
                    </property>
                    <property>
                        <signature>unsigned int16()</signature>
                        <name>Index</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Client.MessageType()</signature>
                        <name>MessageType</name>
                    </property>
                    <property>
                        <signature>unsigned int8[]()</signature>
                        <name>OptionalBytes</name>
                    </property>
                    <property>
                        <signature>unsigned int32()</signature>
                        <name>TotalChunkLength</name>
                    </property>
                    <property>
                        <signature>unsigned int32()</signature>
                        <name>TotalDataLength</name>
                    </property>
                    <property>
                        <signature>unsigned int16()</signature>
                        <name>TransactionId</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.RPCResponse</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ClassName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Error</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MethodName</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Result</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ClassName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Error</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_MethodName</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Result</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ClassName&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Error&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;MethodName&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;Result&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ClassName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Error</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>MethodName</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>Result</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.ScriptingServiceClient</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Bridge.TABConnection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.TABConnection, TestAutomation.Client.ScriptingServiceOptions)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Connect</name>
                    </method>
                    <method>
                        <signature>bool(bool)</signature>
                        <name>Connect</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>unsigned int8[](TestAutomation.Client.InvokeData)</signature>
                        <name>CreateRequest</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(bool)</signature>
                        <name>Disconnect</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsConnected</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.ScriptingServiceOptions()</signature>
                        <name>get_Options</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetPortPair</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>int32(int32, int32)</signature>
                        <name>GetPortPair</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;int32&gt;()</signature>
                        <name>GetReservedLocalPorts</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.ServiceResponse(string)</signature>
                        <name>GetResponse</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InstallScriptingService</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>object(string, object[])</signature>
                        <name>Invoke</name>
                    </method>
                    <method>
                        <signature>object(TestAutomation.Client.InvokeData)</signature>
                        <name>Invoke</name>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>IsForwarding</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(TestAutomation.Client.InvokeData)</signature>
                        <name>Send</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>StartScriptingService</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>StartService</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(System.TimeSpan)</signature>
                        <name>StartService</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>StopExistingScriptingService</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>toggleAirplaneMode</name>
                    </method>
                    <method>
                        <signature>object(bool)</signature>
                        <name>toggleAirplaneMode</name>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.GetMemberBinder, object&amp;)</signature>
                        <name>TryGetMember</name>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.InvokeMemberBinder, object[], object&amp;)</signature>
                        <name>TryInvokeMember</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ValidateOptions</name>
                        <newname>f</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>_id</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.ScriptingServiceOptions</signature>
                        <name>_options</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_port</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Web.Script.Serialization.JavaScriptSerializer</signature>
                        <name>_serializer</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.TABConnection</signature>
                        <name>_tab</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsConnected</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Client.ScriptingServiceOptions()</signature>
                        <name>Options</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.ScriptingServiceClient/&lt;&gt;c__DisplayClass4</name>
                <newname>TestAutomation.Client.ScriptingServiceClient/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object[])</signature>
                        <name>&lt;TryGetMember&gt;b__3</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Client.ScriptingServiceClient</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.GetMemberBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.ScriptingServiceOptions</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>CreateCommand</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>CreateKillCommand</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ActionName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ComponentName</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.ScriptingServiceOptions()</signature>
                        <name>get_Default</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ForcePushPackage</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ListeningPort</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LocalPackageLocation</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PackageName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PortExtraKey</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ActionName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ComponentName</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ForcePushPackage</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ListeningPort</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LocalPackageLocation</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_PackageName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_PortExtraKey</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ActionName&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ComponentName&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;ForcePushPackage&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ListeningPort&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;LocalPackageLocation&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;PackageName&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;PortExtraKey&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ActionName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ComponentName</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Client.ScriptingServiceOptions()</signature>
                        <name>Default</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ForcePushPackage</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ListeningPort</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>LocalPackageLocation</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>PackageName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>PortExtraKey</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.ServiceResponse</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_error</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_id</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_result</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_error</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_id</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_result</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;error&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;id&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;result&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>error</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>id</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>result</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestAutomationServerExitHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestAutomationServerOptions</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ClassName</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.TestAutomationServerOptions()</signature>
                        <name>get_Default</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_EntryMethodName</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ForcePushArchive</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LocalArchiveLocation</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PackageName</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ShutDownOnUsbDisconnect</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ClassName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_EntryMethodName</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ForcePushArchive</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LocalArchiveLocation</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_PackageName</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ShutDownOnUsbDisconnect</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ClassName&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;EntryMethodName&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;ForcePushArchive&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;LocalArchiveLocation&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;PackageName&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;ShutDownOnUsbDisconnect&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ClassName</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Client.TestAutomationServerOptions()</signature>
                        <name>Default</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>EntryMethodName</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ForcePushArchive</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>LocalArchiveLocation</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>PackageName</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ShutDownOnUsbDisconnect</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestAutomationServerPushProgressHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(int32, int64, int64, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(int32, int64, int64)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestAutomationServerStartedHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestAutomationServerTraceHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(string, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestServerClient</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Bridge.TABConnection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.TABConnection, TestAutomation.Client.TestAutomationServerOptions)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.RPCMessage&gt;()</signature>
                        <name>&lt;.ctor&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>&lt;RegisterDirectoryObservers&gt;b__17</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;StartListeningForRemoteEvents&gt;b__2f</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestAutomationServerExitHandler)</signature>
                        <name>add_m_serverExitedE</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestAutomationServerStartedHandler)</signature>
                        <name>add_m_serverStartedE</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.AccessibilityEventHandler)</signature>
                        <name>add_m_uiEventE</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestAutomationServerExitHandler)</signature>
                        <name>add_ServerExited</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestAutomationServerPushProgressHandler)</signature>
                        <name>add_ServerPushProgress</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestAutomationServerStartedHandler)</signature>
                        <name>add_ServerStarted</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestAutomationServerTraceHandler)</signature>
                        <name>add_ServerTrace</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.AccessibilityEventHandler)</signature>
                        <name>add_UiEvent</name>
                    </method>
                    <method>
                        <signature>void(System.Action`1&lt;TestAutomation.Bridge.DirectoryObserverEvent&gt;)</signature>
                        <name>AddDirectoryObserver</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Bridge.DirectoryObserverEvent)</signature>
                        <name>BroadcastDirectoryEvent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CheckConnected</name>
                        <newname>s</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CheckDisposed</name>
                        <newname>t</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>CloseRemoteServer</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>Connect</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>DeserializeRPCEvent</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(bool, bool)</signature>
                        <name>Disconnect</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.RPCMessage)</signature>
                        <name>DispatchEvent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DoEventDispatching</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.ConnectionState()</signature>
                        <name>get_ConnectionState</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>get_DeviceStartTime</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_EnableRemoteEvents</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.RemoteFileSystem()</signature>
                        <name>get_FileSystem</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.Album()</signature>
                        <name>get_GalleryAlbum</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.Albumset()</signature>
                        <name>get_GalleryAlbumset</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsConnected</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsConnectedViaAbd</name>
                        <newname>w</newname>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.Keyboard()</signature>
                        <name>get_Keyboard</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.TestAutomationServerOptions()</signature>
                        <name>get_Options</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>GetDeviceStartTime</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.RPCMessage()</signature>
                        <name>GetNextEventFromQueue</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetPortPair</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>int32(int32, int32)</signature>
                        <name>GetPortPair</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;int32&gt;()</signature>
                        <name>GetReservedLocalPorts</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>IsForwarding</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>OnRPCEvent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnServerExit</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnServerStart</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PortForward</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PushServerToDevice</name>
                        <newname>r</newname>
                    </method>
                    <method>
                        <signature>bool(bool)</signature>
                        <name>PushServerToDevice</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>TestAutomation.Client.RPCMessage(System.Net.Sockets.Socket, unsigned int16)</signature>
                        <name>ReceiveMessage</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(string, string)</signature>
                        <name>RegisterDirectoryObserver</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RegisterDirectoryObservers</name>
                        <newname>v</newname>
                    </method>
                    <method>
                        <signature>object(string, string, object[])</signature>
                        <name>RemoteInvoke</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestAutomationServerExitHandler)</signature>
                        <name>remove_m_serverExitedE</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestAutomationServerStartedHandler)</signature>
                        <name>remove_m_serverStartedE</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.AccessibilityEventHandler)</signature>
                        <name>remove_m_uiEventE</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestAutomationServerExitHandler)</signature>
                        <name>remove_ServerExited</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestAutomationServerPushProgressHandler)</signature>
                        <name>remove_ServerPushProgress</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestAutomationServerStartedHandler)</signature>
                        <name>remove_ServerStarted</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestAutomationServerTraceHandler)</signature>
                        <name>remove_ServerTrace</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.AccessibilityEventHandler)</signature>
                        <name>remove_UiEvent</name>
                    </method>
                    <method>
                        <signature>void(System.Action`1&lt;TestAutomation.Bridge.DirectoryObserverEvent&gt;)</signature>
                        <name>RemoveDirectoryObserver</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>RemoveForward</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>set_DeviceStartTime</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_EnableRemoteEvents</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.Album)</signature>
                        <name>set_GalleryAlbum</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.Albumset)</signature>
                        <name>set_GalleryAlbumset</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.Keyboard)</signature>
                        <name>set_Keyboard</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>StartEventDispatcher</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>StartListeningForRemoteEvents</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>StartRemoteServer</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>StopEventListener</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>StopRemoteServer</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.GetMemberBinder, object&amp;)</signature>
                        <name>TryGetMember</name>
                    </method>
                    <method>
                        <signature>bool(System.Dynamic.InvokeMemberBinder, object[], object&amp;)</signature>
                        <name>TryInvokeMember</name>
                    </method>
                    <method>
                        <signature>bool(string, string)</signature>
                        <name>UnRegisterDirectoryObserver</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Predicate`1&lt;TestAutomation.Client.AccessibilityEvent&gt;, int32)</signature>
                        <name>WaitForEvent</name>
                    </method>
                    <method>
                        <signature>bool(TestAutomation.Client.EventType, int32, TestAutomation.Client.AccessibilityEvent&amp;)</signature>
                        <name>WaitForEventType</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.ICollection`1&lt;TestAutomation.Client.EventType&gt;, int32, System.Collections.Generic.List`1&lt;TestAutomation.Client.AccessibilityEvent&gt;&amp;)</signature>
                        <name>WaitForEventTypeSequence</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ValidateOptions</name>
                        <newname>u</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;</signature>
                        <name>&lt;DeviceStartTime&gt;k__BackingField</name>
                        <newname>ad</newname>
                    </field>
                    <field>
                        <signature>System.Func`1&lt;System.Collections.Generic.List`1&lt;TestAutomation.Client.RPCMessage&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>ae</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.ConnectionState</signature>
                        <name>m_connectionState</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;System.Action`1&lt;TestAutomation.Bridge.DirectoryObserverEvent&gt;&gt;</signature>
                        <name>m_directoryObservers</name>
                        <newname>ab</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_disposed</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.Threading.Thread</signature>
                        <name>m_eventDispatcher</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Threading.Thread</signature>
                        <name>m_eventLoop</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Lazy`1&lt;System.Collections.Generic.List`1&lt;TestAutomation.Client.RPCMessage&gt;&gt;</signature>
                        <name>m_eventQueue</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Threading.ManualResetEvent</signature>
                        <name>m_events</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_eventsEnabled</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_eventsLooping</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>System.Net.Sockets.Socket</signature>
                        <name>m_eventSocket</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.RemoteFileSystem</signature>
                        <name>m_fileSystem</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.Album</signature>
                        <name>m_galleryAlbum</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.Albumset</signature>
                        <name>m_galleryAlbumset</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>m_galleryLocker</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.Keyboard</signature>
                        <name>m_keyboard</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>m_keyboardLocker</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,System.Collections.Generic.List`1&lt;string&gt;&gt;</signature>
                        <name>m_observerDirectories</name>
                        <newname>ac</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.TestAutomationServerOptions</signature>
                        <name>m_options</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_port</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Web.Script.Serialization.JavaScriptSerializer</signature>
                        <name>m_serializer</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.TestAutomationServerExitHandler</signature>
                        <name>m_serverExitedE</name>
                        <newname>z</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.TestServerClient/TestAutomationServerListener</signature>
                        <name>m_serverOutput</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.TestServerClient/TestAutomationServerPushProgress</signature>
                        <name>m_serverPushProgress</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Threading.ManualResetEvent</signature>
                        <name>m_serverStarted</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.TestAutomationServerStartedHandler</signature>
                        <name>m_serverStartedE</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>System.Threading.Thread</signature>
                        <name>m_serverThread</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Bridge.TABConnection</signature>
                        <name>m_tab</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.AccessibilityEventHandler</signature>
                        <name>m_uiEventE</name>
                        <newname>aa</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_userStoppedServer</name>
                        <newname>s</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>TestAutomation.Client.ConnectionState()</signature>
                        <name>ConnectionState</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>DeviceStartTime</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>EnableRemoteEvents</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Client.RemoteFileSystem()</signature>
                        <name>FileSystem</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Client.Album()</signature>
                        <name>GalleryAlbum</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Client.Albumset()</signature>
                        <name>GalleryAlbumset</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsConnected</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsConnectedViaAbd</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Client.Keyboard()</signature>
                        <name>Keyboard</name>
                    </property>
                    <property>
                        <signature>TestAutomation.Client.TestAutomationServerOptions()</signature>
                        <name>Options</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>TestAutomation.Client.TestAutomationServerExitHandler</signature>
                        <name>m_serverExitedE</name>
                    </event>
                    <event>
                        <signature>TestAutomation.Client.TestAutomationServerStartedHandler</signature>
                        <name>m_serverStartedE</name>
                    </event>
                    <event>
                        <signature>TestAutomation.Client.AccessibilityEventHandler</signature>
                        <name>m_uiEventE</name>
                    </event>
                    <event>
                        <signature>TestAutomation.Client.TestAutomationServerExitHandler</signature>
                        <name>ServerExited</name>
                    </event>
                    <event>
                        <signature>TestAutomation.Client.TestAutomationServerPushProgressHandler</signature>
                        <name>ServerPushProgress</name>
                    </event>
                    <event>
                        <signature>TestAutomation.Client.TestAutomationServerStartedHandler</signature>
                        <name>ServerStarted</name>
                    </event>
                    <event>
                        <signature>TestAutomation.Client.TestAutomationServerTraceHandler</signature>
                        <name>ServerTrace</name>
                    </event>
                    <event>
                        <signature>TestAutomation.Client.AccessibilityEventHandler</signature>
                        <name>UiEvent</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>TestAutomation.Client.TestServerClient/&lt;&gt;c__DisplayClass10</name>
                <newname>TestAutomation.Client.TestServerClient/e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.EventType&gt;()</signature>
                        <name>&lt;WaitForEventTypeSequence&gt;b__e</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Client.AccessibilityEvent&gt;</signature>
                        <name>_events</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Lazy`1&lt;System.Collections.Generic.List`1&lt;TestAutomation.Client.EventType&gt;&gt;</signature>
                        <name>eventSequenceToWait</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>eventsReceived</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.ICollection`1&lt;TestAutomation.Client.EventType&gt;</signature>
                        <name>eventTypes</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestServerClient/&lt;&gt;c__DisplayClass13</name>
                <newname>TestAutomation.Client.TestServerClient/f</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.AccessibilityEvent)</signature>
                        <name>&lt;WaitForEventTypeSequence&gt;b__f</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Client.TestServerClient/&lt;&gt;c__DisplayClass10</signature>
                        <name>CS$&lt;&gt;8__locals11</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Threading.ManualResetEvent</signature>
                        <name>received</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestServerClient/&lt;&gt;c__DisplayClass1a</name>
                <newname>TestAutomation.Client.TestServerClient/h</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>&lt;RegisterDirectoryObservers&gt;b__18</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Client.TestServerClient</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>guid</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestServerClient/&lt;&gt;c__DisplayClass24</name>
                <newname>TestAutomation.Client.TestServerClient/k</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;TryGetMember&gt;b__22</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>object(object[])</signature>
                        <name>&lt;TryGetMember&gt;b__23</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Client.TestServerClient</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Dynamic.GetMemberBinder</signature>
                        <name>binder</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestServerClient/&lt;&gt;c__DisplayClass2a</name>
                <newname>TestAutomation.Client.TestServerClient/m</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;StartRemoteServer&gt;b__29</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Client.TestServerClient</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>cmd</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestServerClient/&lt;&gt;c__DisplayClass31</name>
                <newname>TestAutomation.Client.TestServerClient/n</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Action`1&lt;TestAutomation.Bridge.DirectoryObserverEvent&gt;)</signature>
                        <name>&lt;BroadcastDirectoryEvent&gt;b__30</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Bridge.DirectoryObserverEvent</signature>
                        <name>devent</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestServerClient/&lt;&gt;c__DisplayClass9</name>
                <newname>TestAutomation.Client.TestServerClient/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>eventReceived</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;TestAutomation.Client.AccessibilityEvent&gt;</signature>
                        <name>match</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestServerClient/&lt;&gt;c__DisplayClassc</name>
                <newname>TestAutomation.Client.TestServerClient/d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.AccessibilityEvent)</signature>
                        <name>&lt;WaitForEvent&gt;b__8</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Client.TestServerClient/&lt;&gt;c__DisplayClass9</signature>
                        <name>CS$&lt;&gt;8__localsa</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Threading.ManualResetEvent</signature>
                        <name>received</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestServerClient/&lt;CloseRemoteServer&gt;o__SiteContainer26</name>
                <newname>TestAutomation.Client.TestServerClient/l</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Action`2&lt;System.Runtime.CompilerServices.CallSite,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site27</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestServerClient/&lt;RegisterDirectoryObserver&gt;o__SiteContainer1c</name>
                <newname>TestAutomation.Client.TestServerClient/i</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,bool&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site1d</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`5&lt;System.Runtime.CompilerServices.CallSite,object,string,string,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site1e</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestServerClient/&lt;RegisterDirectoryObservers&gt;o__SiteContainer15</name>
                <newname>TestAutomation.Client.TestServerClient/g</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Action`4&lt;System.Runtime.CompilerServices.CallSite,object,string,string&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site16</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestServerClient/&lt;UnRegisterDirectoryObserver&gt;o__SiteContainer1f</name>
                <newname>TestAutomation.Client.TestServerClient/j</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`3&lt;System.Runtime.CompilerServices.CallSite,object,bool&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site20</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Runtime.CompilerServices.CallSite`1&lt;System.Func`5&lt;System.Runtime.CompilerServices.CallSite,object,string,string,object&gt;&gt;</signature>
                        <name>&lt;&gt;p__Site21</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestServerClient/TestAutomationServerListener</name>
                <newname>TestAutomation.Client.TestServerClient/a</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Threading.ManualResetEvent)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestAutomationServerTraceHandler)</signature>
                        <name>add_OnTrace</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>AddOutput</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCancelled</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ListeningPort</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Success</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>OnTraceReceived</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestAutomationServerTraceHandler)</signature>
                        <name>remove_OnTrace</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_ListeningPort</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Success</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;ListeningPort&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Success&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>m_portRegex</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>m_serverOk</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Threading.ManualResetEvent</signature>
                        <name>m_serverStarted</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.TestAutomationServerTraceHandler</signature>
                        <name>OnTrace</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.TestServerClient/TestAutomationServerPushProgress</name>
                <newname>TestAutomation.Client.TestServerClient/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestAutomationServerPushProgressHandler)</signature>
                        <name>add_Progress</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>Advance</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsCanceled</name>
                    </method>
                    <method>
                        <signature>System.TimeSpan()</signature>
                        <name>get_TransferTime</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnProgress</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Client.TestAutomationServerPushProgressHandler)</signature>
                        <name>remove_Progress</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(System.TimeSpan)</signature>
                        <name>set_TransferTime</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>Start</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>StartSubTask</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Stop</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.TimeSpan</signature>
                        <name>&lt;TransferTime&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>m_sent</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>m_start</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>m_total</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>TestAutomation.Client.TestAutomationServerPushProgressHandler</signature>
                        <name>Progress</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Client.ThumbnailItem</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_H</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Index</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Thumbnail</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_W</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_X</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Y</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_H</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Index</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Thumbnail</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_W</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_X</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Y</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;H&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Index&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Thumbnail&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;W&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;X&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Y&gt;k__BackingField</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>H</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Index</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Thumbnail</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>W</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>X</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Y</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
        </module>
        <module>
            <name>TestAutomation.ChkBugReport.dll</name>
            <type>
                <name>TestAutomation.BugReporter.ArchiveInfo</name>
                <methodlist>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Hash</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Hash</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Hash&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Name&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Hash</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.BugReporter.ChkBugReport</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ExtractReporterBinary</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanRun</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasCorrectArchiveVersion</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReporterArchiveExists</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ReporterArchiveLocation</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetArchiveName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetReporterBinaryHash</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetRequiredHash</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>TestAutomation.BugReporter.ParserOutput(string)</signature>
                        <name>Run</name>
                    </method>
                    <method>
                        <signature>TestAutomation.BugReporter.ParserOutput(string, bool)</signature>
                        <name>Run</name>
                    </method>
                    <method>
                        <signature>TestAutomation.BugReporter.ParserOutput(string, bool, System.TimeSpan)</signature>
                        <name>Run</name>
                    </method>
                    <method>
                        <signature>TestAutomation.BugReporter.ParserOutput(string, System.TimeSpan)</signature>
                        <name>Run</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_PARSER_TIMEOUT</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>CanRun</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>HasCorrectArchiveVersion</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReporterArchiveExists</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ReporterArchiveLocation</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.BugReporter.ErrorCause</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.BugReporter.ErrorCause</signature>
                        <name>FailedParsing</name>
                    </field>
                    <field>
                        <signature>TestAutomation.BugReporter.ErrorCause</signature>
                        <name>InvalidInput</name>
                    </field>
                    <field>
                        <signature>TestAutomation.BugReporter.ErrorCause</signature>
                        <name>NoJavaFound</name>
                    </field>
                    <field>
                        <signature>TestAutomation.BugReporter.ErrorCause</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>TestAutomation.BugReporter.ErrorCause</signature>
                        <name>NoParserFound</name>
                    </field>
                    <field>
                        <signature>TestAutomation.BugReporter.ErrorCause</signature>
                        <name>Timeout</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.BugReporter.Extensions</name>
                <methodlist>
                    <method>
                        <signature>void(System.Reflection.Assembly, string, string)</signature>
                        <name>CopyManifestResourceToFolder</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, string, string)</signature>
                        <name>ExtractManifestResourceZip</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.BugReporter.Extensions/&lt;&gt;c__DisplayClass2</name>
                <newname>TestAutomation.BugReporter.Extensions/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;ExtractManifestResourceZip&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>zipName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.BugReporter.Extensions/&lt;&gt;c__DisplayClass6</name>
                <newname>TestAutomation.BugReporter.Extensions/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;CopyManifestResourceToFolder&gt;b__4</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.BugReporter.Java</name>
                <methodlist>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;get_Location&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsInstalled</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Location</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Predicate`1&lt;string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsInstalled</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Location</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.BugReporter.ParserOutput</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>TestAutomation.BugReporter.ErrorCause()</signature>
                        <name>get_Cause</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsHtml</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsZip</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_OutputLocation</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Success</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.BugReporter.ErrorCause)</signature>
                        <name>set_Cause</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsZip</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_OutputLocation</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>TestAutomation.BugReporter.ErrorCause</signature>
                        <name>&lt;Cause&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsZip&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;OutputLocation&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>TestAutomation.BugReporter.ErrorCause()</signature>
                        <name>Cause</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsHtml</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsZip</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>OutputLocation</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Success</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.BugReporter.ProcessExtensions</name>
                <methodlist>
                    <method>
                        <signature>bool(System.Diagnostics.Process)</signature>
                        <name>StartJar</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
        </module>
        <module>
            <name>TestAutomation.ScriptingService.dll</name>
            <type>
                <name>TestAutomation.ScriptingService.ScriptingService</name>
                <newname>TestAutomation.ScriptingService.a</newname>
                <methodlist>
                    <method>
                        <signature>bool(System.Reflection.CustomAttributeData)</signature>
                        <name>&lt;VerifyCaller&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetServiceHash</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetServiceName</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>GetServiceStream</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.IO.Stream(string)</signature>
                        <name>GetStream</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetStreamHash</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly)</signature>
                        <name>VerifyCaller</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.CustomAttributeData,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Service</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.ScriptingService.ScriptingService/&lt;&gt;c__DisplayClass3</name>
                <newname>TestAutomation.ScriptingService.a/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;GetStream&gt;b__2</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
        </module>
        <module>
            <name>TestAutomation.TestServer.dll</name>
            <type>
                <name>TestAutomation.TestServer.TestServer</name>
                <newname>TestAutomation.TestServer.a</newname>
                <methodlist>
                    <method>
                        <signature>bool(System.Reflection.CustomAttributeData)</signature>
                        <name>&lt;VerifyCaller&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetServerHash</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>GetServerStream</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.IO.Stream(string)</signature>
                        <name>GetStream</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetStreamHash</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly)</signature>
                        <name>VerifyCaller</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;System.Reflection.CustomAttributeData,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TaServer</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.TestServer.TestServer/&lt;&gt;c__DisplayClass3</name>
                <newname>TestAutomation.TestServer.a/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>&lt;GetStream&gt;b__2</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>name</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
        </module>
        <module>
            <name>TestAutomation.Utils.dll</name>
            <type>
                <name>TestAutomation.Utils.AdbDiagnostics</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Diagnostics.Process)</signature>
                        <name>&lt;get_ExecutingAdbLocation&gt;b__b</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Diagnostics.Process)</signature>
                        <name>&lt;get_IsRunning&gt;b__0</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(System.Diagnostics.Process)</signature>
                        <name>&lt;get_Process&gt;b__2</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(System.Diagnostics.Process)</signature>
                        <name>&lt;get_UpTime&gt;b__4</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(int32)</signature>
                        <name>&lt;GetPortForwardings&gt;b__7</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DefaultAdbLocation</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ExecutingAdbLocation</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsRunning</name>
                    </method>
                    <method>
                        <signature>System.Diagnostics.Process()</signature>
                        <name>get_Process</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.TimeSpan&gt;()</signature>
                        <name>get_UpTime</name>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>GetPortForwardings</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;System.Diagnostics.Process,bool&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;System.Diagnostics.Process&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate3</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;System.Diagnostics.Process&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate5</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate8</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Predicate`1&lt;System.Diagnostics.Process&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatec</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_ADB_PORT</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DEFAULT_PROCESS_NAME</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>m_adbFiles</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>DefaultAdbLocation</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ExecutingAdbLocation</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsRunning</name>
                    </property>
                    <property>
                        <signature>System.Diagnostics.Process()</signature>
                        <name>Process</name>
                    </property>
                    <property>
                        <signature>System.Nullable`1&lt;System.TimeSpan&gt;()</signature>
                        <name>UpTime</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.AdbDiagnostics/&lt;&gt;c__DisplayClass9</name>
                <newname>TestAutomation.Utils.AdbDiagnostics/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Diagnostics.Process)</signature>
                        <name>&lt;GetPortForwardings&gt;b__6</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;int32&gt;</signature>
                        <name>ports</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.ApplicationTCPActivityLogData</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, System.Collections.Generic.IEnumerable`1&lt;TestAutomation.Utils.TCPActivityLog&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ImageName</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Utils.TCPActivityLog&gt;()</signature>
                        <name>get_LogData</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Pid</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_WorkingDiectory</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;TestAutomation.Utils.TCPActivityLog&gt;)</signature>
                        <name>set_LogData</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_imageName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_pid</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_workingdirectory</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Utils.TCPActivityLog&gt;</signature>
                        <name>&lt;LogData&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ImageName</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Utils.TCPActivityLog&gt;()</signature>
                        <name>LogData</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Pid</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>WorkingDiectory</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.ApplicationUDPActivityLogData</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, System.Collections.Generic.IEnumerable`1&lt;TestAutomation.Utils.UDPActivityLog&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ImageName</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Utils.UDPActivityLog&gt;()</signature>
                        <name>get_LogData</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Pid</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_WorkingDiectory</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;TestAutomation.Utils.UDPActivityLog&gt;)</signature>
                        <name>set_LogData</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>_imageName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_pid</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_workingdirectory</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Utils.UDPActivityLog&gt;</signature>
                        <name>&lt;LogData&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ImageName</name>
                    </property>
                    <property>
                        <signature>System.Collections.Generic.List`1&lt;TestAutomation.Utils.UDPActivityLog&gt;()</signature>
                        <name>LogData</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Pid</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>WorkingDiectory</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.Extensions</name>
                <methodlist>
                    <method>
                        <signature>int32(TestAutomation.Utils.TcpRow)</signature>
                        <name>&lt;ListensTcp&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Diagnostics.Process)</signature>
                        <name>ListensAnyTcp</name>
                    </method>
                    <method>
                        <signature>bool(System.Diagnostics.Process, int32)</signature>
                        <name>ListensTcp</name>
                    </method>
                    <method>
                        <signature>bool(System.Diagnostics.Process, System.Collections.Generic.List`1&lt;int32&gt;&amp;)</signature>
                        <name>ListensTcp</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Converter`2&lt;TestAutomation.Utils.TcpRow,int32&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate2</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.Extensions/&lt;&gt;c__DisplayClass3</name>
                <newname>TestAutomation.Utils.Extensions/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(TestAutomation.Utils.TcpRow)</signature>
                        <name>&lt;ListensTcp&gt;b__1</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Diagnostics.Process</signature>
                        <name>proc</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.Helper</name>
                <methodlist>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetProcessFullPath</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetProcessProcessName</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.IEnumerable`1&lt;TestAutomation.Utils.ApplicationTCPActivityLogData&gt;, int32)</signature>
                        <name>IsPidAlreadyExist</name>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>TaskKill</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>WhichDayisToday</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.Helper/&lt;&gt;c__DisplayClass1</name>
                <newname>TestAutomation.Utils.Helper/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(TestAutomation.Utils.ApplicationTCPActivityLogData)</signature>
                        <name>&lt;IsPidAlreadyExist&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>pid</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.IpHelper</name>
                <methodlist>
                    <method>
                        <signature>unsigned int32(native int, int32&amp;, bool, int32, TestAutomation.Utils.IpHelper/TcpTableType, int32)</signature>
                        <name>GetExtendedTcpTable</name>
                    </method>
                    <method>
                        <signature>unsigned int32(native int, int32&amp;, bool, int32, TestAutomation.Utils.IpHelper/UdpTableType, int32)</signature>
                        <name>GetExtendedUdpTable</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>AfInet</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DllName</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.IpHelper/TcpRow</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>localAddr</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>localPort1</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>localPort2</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>localPort3</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>localPort4</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>owningPid</name>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>remoteAddr</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>remotePort1</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>remotePort2</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>remotePort3</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>remotePort4</name>
                    </field>
                    <field>
                        <signature>System.Net.NetworkInformation.TcpState</signature>
                        <name>state</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.IpHelper/TcpTable</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>Length</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Utils.IpHelper/TcpRow</signature>
                        <name>row</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.IpHelper/TcpTableType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Utils.IpHelper/TcpTableType</signature>
                        <name>BasicAll</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Utils.IpHelper/TcpTableType</signature>
                        <name>BasicConnections</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Utils.IpHelper/TcpTableType</signature>
                        <name>BasicListener</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Utils.IpHelper/TcpTableType</signature>
                        <name>OwnerModuleAll</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Utils.IpHelper/TcpTableType</signature>
                        <name>OwnerModuleConnections</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Utils.IpHelper/TcpTableType</signature>
                        <name>OwnerModuleListener</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Utils.IpHelper/TcpTableType</signature>
                        <name>OwnerPidAll</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Utils.IpHelper/TcpTableType</signature>
                        <name>OwnerPidConnections</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Utils.IpHelper/TcpTableType</signature>
                        <name>OwnerPidListener</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.IpHelper/UdpRow</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>localAddr</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>localPort1</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>localPort2</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>localPort3</name>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>localPort4</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>owningPid</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.IpHelper/UdpTable</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>Length</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Utils.IpHelper/UdpRow</signature>
                        <name>row</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.IpHelper/UdpTableType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>TestAutomation.Utils.IpHelper/UdpTableType</signature>
                        <name>Basic</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Utils.IpHelper/UdpTableType</signature>
                        <name>OwnerModule</name>
                    </field>
                    <field>
                        <signature>TestAutomation.Utils.IpHelper/UdpTableType</signature>
                        <name>OwnerPid</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.ManagedIpHelper</name>
                <methodlist>
                    <method>
                        <signature>TestAutomation.Utils.TcpTable(bool)</signature>
                        <name>GetExtendedTcpTable</name>
                    </method>
                    <method>
                        <signature>TestAutomation.Utils.UdpTable(bool)</signature>
                        <name>GetExtendedUdpTable</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.TCPActivityLog</name>
                <methodlist>
                    <method>
                        <signature>void(System.Net.IPEndPoint, System.Net.IPEndPoint)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_LocalAddress</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_RemoteEndPoint</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint)</signature>
                        <name>set_LocalAddress</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint)</signature>
                        <name>set_RemoteEndPoint</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Net.IPEndPoint</signature>
                        <name>&lt;LocalAddress&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Net.IPEndPoint</signature>
                        <name>&lt;RemoteEndPoint&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>LocalAddress</name>
                    </property>
                    <property>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>RemoteEndPoint</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.TcpDataType</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Utils.TcpRow)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ForeignAddress</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ImageName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LocalAddress</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Pid</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Protocol</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_State</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ForeignAddress</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ImageName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LocalAddress</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Pid</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_State</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ForeignAddress&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ImageName&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;LocalAddress&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Pid&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;State&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ForeignAddress</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ImageName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>LocalAddress</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Pid</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Protocol</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>State</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.TcpRow</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Utils.IpHelper/TcpRow)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ForeignAddress</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LocalAddress</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_LocalEndPoint</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ProcessId</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_RemoteEndPoint</name>
                    </method>
                    <method>
                        <signature>System.Net.NetworkInformation.TcpState()</signature>
                        <name>get_State</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_StrState</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Net.IPEndPoint</signature>
                        <name>_localEndPoint</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_processId</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Net.IPEndPoint</signature>
                        <name>_remoteEndPoint</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Net.NetworkInformation.TcpState</signature>
                        <name>_state</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ForeignAddress</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>LocalAddress</name>
                    </property>
                    <property>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>LocalEndPoint</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ProcessId</name>
                    </property>
                    <property>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>RemoteEndPoint</name>
                    </property>
                    <property>
                        <signature>System.Net.NetworkInformation.TcpState()</signature>
                        <name>State</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>StrState</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.TcpTable</name>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;TestAutomation.Utils.TcpRow&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;TestAutomation.Utils.TcpRow&gt;()</signature>
                        <name>get_Rows</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;TestAutomation.Utils.TcpRow&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;TestAutomation.Utils.TcpRow&gt;</signature>
                        <name>tcpRows</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;TestAutomation.Utils.TcpRow&gt;()</signature>
                        <name>Rows</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.UDPActivityLog</name>
                <methodlist>
                    <method>
                        <signature>void(System.Net.IPEndPoint)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_LocalAddress</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint)</signature>
                        <name>set_LocalAddress</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Net.IPEndPoint</signature>
                        <name>&lt;LocalAddress&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>LocalAddress</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.UdpDataType</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(TestAutomation.Utils.UdpRow)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ImageName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LocalAddress</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Pid</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Protocol</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ImageName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LocalAddress</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Pid</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ImageName&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;LocalAddress&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;Pid&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ImageName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>LocalAddress</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Pid</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Protocol</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.UdpRow</name>
                <methodlist>
                    <method>
                        <signature>void(TestAutomation.Utils.IpHelper/UdpRow)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_LocalEndPoint</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_ProcessId</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Net.IPEndPoint</signature>
                        <name>_localEndPoint</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_processId</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>LocalEndPoint</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>ProcessId</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>TestAutomation.Utils.UdpTable</name>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;TestAutomation.Utils.UdpRow&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;TestAutomation.Utils.UdpRow&gt;()</signature>
                        <name>get_Rows</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;TestAutomation.Utils.UdpRow&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;TestAutomation.Utils.UdpRow&gt;</signature>
                        <name>_udpRows</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;TestAutomation.Utils.UdpRow&gt;()</signature>
                        <name>Rows</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
        </module>
    </mapping>
    <statistics>
        <statisticline>
            <description>Total Classes</description>
            <statistic>379</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods</description>
            <statistic>3205</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields</description>
            <statistic>1623</statistic>
        </statisticline>
        <statisticline>
            <description>Total Properties</description>
            <statistic>643</statistic>
        </statisticline>
        <statisticline>
            <description>Total Events</description>
            <statistic>25</statistic>
        </statisticline>
        <statisticline>
            <description>Total Classes Renamed</description>
            <statistic>142</statistic>
            <statistic>37,47 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods Renamed</description>
            <statistic>947</statistic>
            <statistic>29,55 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields Renamed</description>
            <statistic>1083</statistic>
            <statistic>66,73 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Properties Renamed</description>
            <statistic>5</statistic>
            <statistic>0,78 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Events Renamed</description>
            <statistic>0</statistic>
            <statistic>0,00 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'a'</description>
            <statistic>405</statistic>
            <statistic>12,64 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'b'</description>
            <statistic>165</statistic>
            <statistic>5,15 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'c'</description>
            <statistic>100</statistic>
            <statistic>3,12 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'p'</description>
            <statistic>64</statistic>
            <statistic>2,00 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'd'</description>
            <statistic>61</statistic>
            <statistic>1,90 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'e'</description>
            <statistic>35</statistic>
            <statistic>1,09 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'q'</description>
            <statistic>20</statistic>
            <statistic>0,62 %</statistic>
        </statisticline>
    </statistics>
</dotfuscatorMap>