using System;
using System.Collections.Generic;

namespace Managed.Adb.MoreLinq
{
    /// <summary>
    /// 
    /// </summary>
    public static partial class MoreEnumerable
    {
        /// <summary>
        /// Returns a sequence of values consecutively generated by a generator function.
        /// </summary>
        /// <typeparam name="TResult">Type of elements to generate.</typeparam>
        /// <param name="initial">Value of first element in sequence</param>
        /// <param name="generator">
        /// Generator function which takes the previous series element and uses it to generate the next element.
        /// </param>
        /// <remarks>
        /// This function defers element generation until needed and streams the results.
        /// </remarks>
        /// <example>
        /// <code>
        /// IEnumerable&lt;int&gt; result = Sequence.Generate(2, n => n * n).Take(6);
        /// </code>
        /// The <c>result</c> variable, when iterated over, will yield 2, 4, 8, 16, 32, and 64, in turn.
        /// </example>        
        public static IEnumerable<TResult> Generate<TResult>(TResult initial, Func<TResult, TResult> generator)
        {
            generator.ThrowIfNull("generator");
            return GenerateImpl(initial, generator);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="initial"></param>
        /// <param name="generator"></param>
        /// <returns></returns>
        private static IEnumerable<TResult> GenerateImpl<TResult>(TResult initial, Func<TResult, TResult> generator)
        {
            TResult current = initial;
            while (true)
            {
                yield return current;
                current = generator(current);
            }
        }
    }
}
